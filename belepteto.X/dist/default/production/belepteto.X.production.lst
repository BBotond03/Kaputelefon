

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sun Dec 01 14:28:16 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F648A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,space=0,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    12                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=1
    19                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=1
    20                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    22                           	dabs	1,0x7E,2
    23     0000                     
    24                           ; Generated 12/10/2023 GMT
    25                           ; 
    26                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F648A Definitions
    56                           ; 
    57                           ; SFR Addresses
    58     0004                     fsr             equ	4
    59     0004                     fsr0            equ	4
    60     0000                     indf            equ	0
    61     0000                     indf0           equ	0
    62     0002                     pc              equ	2
    63     0002                     pcl             equ	2
    64     000A                     pclath          equ	10
    65     0003                     status          equ	3
    66     0000                     INDF            equ	0	;# 
    67     0001                     TMR0            equ	1	;# 
    68     0002                     PCL             equ	2	;# 
    69     0003                     STATUS          equ	3	;# 
    70     0004                     FSR             equ	4	;# 
    71     0005                     PORTA           equ	5	;# 
    72     0006                     PORTB           equ	6	;# 
    73     000A                     PCLATH          equ	10	;# 
    74     000B                     INTCON          equ	11	;# 
    75     000C                     PIR1            equ	12	;# 
    76     000E                     TMR1            equ	14	;# 
    77     000E                     TMR1L           equ	14	;# 
    78     000F                     TMR1H           equ	15	;# 
    79     0010                     T1CON           equ	16	;# 
    80     0011                     TMR2            equ	17	;# 
    81     0012                     T2CON           equ	18	;# 
    82     0015                     CCPR1           equ	21	;# 
    83     0015                     CCPR1L          equ	21	;# 
    84     0016                     CCPR1H          equ	22	;# 
    85     0017                     CCP1CON         equ	23	;# 
    86     0018                     RCSTA           equ	24	;# 
    87     0019                     TXREG           equ	25	;# 
    88     001A                     RCREG           equ	26	;# 
    89     001F                     CMCON           equ	31	;# 
    90     0081                     OPTION_REG      equ	129	;# 
    91     0085                     TRISA           equ	133	;# 
    92     0086                     TRISB           equ	134	;# 
    93     008C                     PIE1            equ	140	;# 
    94     008E                     PCON            equ	142	;# 
    95     0092                     PR2             equ	146	;# 
    96     0098                     TXSTA           equ	152	;# 
    97     0099                     SPBRG           equ	153	;# 
    98     009A                     EEDATA          equ	154	;# 
    99     009B                     EEADR           equ	155	;# 
   100     009C                     EECON1          equ	156	;# 
   101     009D                     EECON2          equ	157	;# 
   102     009F                     VRCON           equ	159	;# 
   103     0000                     INDF            equ	0	;# 
   104     0001                     TMR0            equ	1	;# 
   105     0002                     PCL             equ	2	;# 
   106     0003                     STATUS          equ	3	;# 
   107     0004                     FSR             equ	4	;# 
   108     0005                     PORTA           equ	5	;# 
   109     0006                     PORTB           equ	6	;# 
   110     000A                     PCLATH          equ	10	;# 
   111     000B                     INTCON          equ	11	;# 
   112     000C                     PIR1            equ	12	;# 
   113     000E                     TMR1            equ	14	;# 
   114     000E                     TMR1L           equ	14	;# 
   115     000F                     TMR1H           equ	15	;# 
   116     0010                     T1CON           equ	16	;# 
   117     0011                     TMR2            equ	17	;# 
   118     0012                     T2CON           equ	18	;# 
   119     0015                     CCPR1           equ	21	;# 
   120     0015                     CCPR1L          equ	21	;# 
   121     0016                     CCPR1H          equ	22	;# 
   122     0017                     CCP1CON         equ	23	;# 
   123     0018                     RCSTA           equ	24	;# 
   124     0019                     TXREG           equ	25	;# 
   125     001A                     RCREG           equ	26	;# 
   126     001F                     CMCON           equ	31	;# 
   127     0081                     OPTION_REG      equ	129	;# 
   128     0085                     TRISA           equ	133	;# 
   129     0086                     TRISB           equ	134	;# 
   130     008C                     PIE1            equ	140	;# 
   131     008E                     PCON            equ	142	;# 
   132     0092                     PR2             equ	146	;# 
   133     0098                     TXSTA           equ	152	;# 
   134     0099                     SPBRG           equ	153	;# 
   135     009A                     EEDATA          equ	154	;# 
   136     009B                     EEADR           equ	155	;# 
   137     009C                     EECON1          equ	156	;# 
   138     009D                     EECON2          equ	157	;# 
   139     009F                     VRCON           equ	159	;# 
   140                           
   141                           	psect	idataBANK0
   142     0562                     __pidataBANK0:
   143                           
   144                           ;initializer for _open
   145     0562  3401               	retlw	1
   146     0563  3400               	retlw	0
   147     0006                     _PORTBbits      set	6
   148     000B                     _INTCONbits     set	11
   149     0005                     _PORTAbits      set	5
   150     001F                     _CMCON          set	31
   151     0085                     _TRISAbits      set	133
   152     0086                     _TRISBbits      set	134
   153                           
   154                           	psect	cinit
   155     07EE                     start_initialization:	
   156                           ; #config settings
   157                           
   158     07EE                     __initialization:
   159                           
   160                           ; Initialize objects allocated to BANK0
   161     07EE  118A  2562  118A   	fcall	__pidataBANK0	;fetch initializer
   162     07F1  00EC               	movwf	__pdataBANK0& (0+127)
   163     07F2  118A  2563  118A   	fcall	__pidataBANK0+1	;fetch initializer
   164     07F5  00ED               	movwf	(__pdataBANK0+1)& (0+127)
   165                           
   166                           ; Clear objects allocated to BANK0
   167     07F6  1383               	bcf	3,7	;select IRP bank0
   168     07F7  3020               	movlw	low __pbssBANK0
   169     07F8  0084               	movwf	4
   170     07F9  3050               	movlw	low (__pbssBANK0+48)
   171     07FA  118A  2564  118A   	fcall	clear_ram0
   172     07FD                     end_of_initialization:	
   173                           ;End of C runtime variable initialization code
   174                           
   175     07FD                     __end_of__initialization:
   176     07FD  0183               	clrf	3
   177     07FE  118A  2F35         	ljmp	_main	;jump to C main() function
   178                           
   179                           	psect	bssBANK0
   180     0020                     __pbssBANK0:
   181     0020                     _inputPinpad:
   182     0020                     	ds	14
   183     002E                     _outputPinpad:
   184     002E                     	ds	14
   185     003C                     _outputIndex:
   186     003C                     	ds	2
   187     003E                     _sensorIndex:
   188     003E                     	ds	2
   189     0040                     _USER_INPUT:
   190     0040                     	ds	16
   191                           
   192                           	psect	dataBANK0
   193     006C                     __pdataBANK0:
   194     006C                     _open:
   195     006C                     	ds	2
   196                           
   197                           	psect	clrtext
   198     0564                     clear_ram0:	
   199                           ;	Called with FSR containing the base address, and
   200                           ;	W with the last address+1
   201                           
   202     0564  0064               	clrwdt	;clear the watchdog before getting into this loop
   203     0565                     clrloop0:
   204     0565  0180               	clrf	0	;clear RAM location pointed to by FSR
   205     0566  0A84               	incf	4,f	;increment pointer
   206     0567  0604               	xorwf	4,w	;XOR with final address
   207     0568  1903               	btfsc	3,2	;have we reached the end yet?
   208     0569  3400               	retlw	0	;all done for this memory range, return
   209     056A  0604               	xorwf	4,w	;XOR again to restore value
   210     056B  2D65               	goto	clrloop0	;do the next byte
   211                           
   212                           	psect	cstackCOMMON
   213     0070                     __pcstackCOMMON:
   214     0070                     ?_initialize_pins:
   215     0070                     ?_delay_us:	
   216                           ; 1 bytes @ 0x0
   217                           
   218     0070                     ?_flash:	
   219                           ; 1 bytes @ 0x0
   220                           
   221     0070                     ?_clock_SR:	
   222                           ; 1 bytes @ 0x0
   223                           
   224     0070                     ?_push_output:	
   225                           ; 1 bytes @ 0x0
   226                           
   227     0070                     ?_main:	
   228                           ; 1 bytes @ 0x0
   229                           
   230     0070                     ?___wmul:	
   231                           ; 1 bytes @ 0x0
   232                           
   233     0070                     delay_us@time:	
   234                           ; 2 bytes @ 0x0
   235                           
   236     0070                     ___wmul@multiplier:	
   237                           ; 2 bytes @ 0x0
   238                           
   239     0070                     ??_initialize_pins:	
   240                           ; 2 bytes @ 0x0
   241                           
   242     0070                     ??_flash:	
   243                           ; 1 bytes @ 0x0
   244                           
   245     0070                     ??_clock_SR:	
   246                           ; 1 bytes @ 0x0
   247                           
   248     0070                     ??_push_output:	
   249                           ; 1 bytes @ 0x0
   250                           
   251                           
   252                           ; 1 bytes @ 0x0
   253     0070                     	ds	1
   254     0071                     initialize_pins@i:
   255                           
   256                           ; 2 bytes @ 0x1
   257     0071                     	ds	1
   258     0072                     ___wmul@multiplicand:
   259     0072                     ??_delay_us:	
   260                           ; 2 bytes @ 0x2
   261                           
   262                           
   263                           ; 1 bytes @ 0x2
   264     0072                     	ds	1
   265     0073                     delay_us@i:
   266                           
   267                           ; 2 bytes @ 0x3
   268     0073                     	ds	1
   269     0074                     ___wmul@product:
   270     0074                     ??___wmul:	
   271                           ; 2 bytes @ 0x4
   272                           
   273                           
   274                           ; 1 bytes @ 0x4
   275     0074                     	ds	2
   276     0076                     ?___awdiv:
   277     0076                     ___awdiv@divisor:	
   278                           ; 2 bytes @ 0x6
   279                           
   280                           
   281                           ; 2 bytes @ 0x6
   282     0076                     	ds	2
   283     0078                     ___awdiv@dividend:
   284                           
   285                           ; 2 bytes @ 0x8
   286     0078                     	ds	2
   287     007A                     ___awdiv@counter:
   288     007A                     ??___awdiv:	
   289                           ; 1 bytes @ 0xA
   290                           
   291                           
   292                           ; 1 bytes @ 0xA
   293     007A                     	ds	1
   294     007B                     ___awdiv@sign:
   295                           
   296                           ; 1 bytes @ 0xB
   297     007B                     	ds	1
   298     007C                     ___awdiv@quotient:
   299                           
   300                           ; 2 bytes @ 0xC
   301     007C                     	ds	2
   302                           
   303                           	psect	cstackBANK0
   304     0050                     __pcstackBANK0:
   305     0050                     ?_beep:
   306     0050                     beep@duration_ms:	
   307                           ; 1 bytes @ 0x0
   308                           
   309                           
   310                           ; 2 bytes @ 0x0
   311     0050                     	ds	2
   312     0052                     ??_beep:
   313                           
   314                           ; 1 bytes @ 0x2
   315     0052                     	ds	1
   316     0053                     beep@total_cycles:
   317                           
   318                           ; 2 bytes @ 0x3
   319     0053                     	ds	2
   320     0055                     beep@i:
   321                           
   322                           ; 2 bytes @ 0x5
   323     0055                     	ds	2
   324     0057                     beep@half_period_us:
   325                           
   326                           ; 2 bytes @ 0x7
   327     0057                     	ds	2
   328     0059                     ?_decode_value:
   329     0059                     decode_value@code:	
   330                           ; 1 bytes @ 0x9
   331                           
   332                           
   333                           ; 1 bytes @ 0x9
   334     0059                     	ds	1
   335     005A                     ??_decode_value:
   336                           
   337                           ; 1 bytes @ 0xA
   338     005A                     	ds	4
   339     005E                     decode_value@i:
   340                           
   341                           ; 2 bytes @ 0xE
   342     005E                     	ds	2
   343     0060                     ??_main:
   344                           
   345                           ; 1 bytes @ 0x10
   346     0060                     	ds	4
   347     0064                     main@i:
   348                           
   349                           ; 2 bytes @ 0x14
   350     0064                     	ds	2
   351     0066                     main@cycle:
   352                           
   353                           ; 2 bytes @ 0x16
   354     0066                     	ds	2
   355     0068                     main@i_226:
   356                           
   357                           ; 2 bytes @ 0x18
   358     0068                     	ds	2
   359     006A                     main@itter:
   360                           
   361                           ; 2 bytes @ 0x1A
   362     006A                     	ds	2
   363                           
   364                           	psect	maintext
   365     0735                     __pmaintext:	
   366 ;;
   367 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   368 ;;
   369 ;; *************** function _main *****************
   370 ;; Defined at:
   371 ;;		line 139 in file "main.c"
   372 ;; Parameters:    Size  Location     Type
   373 ;;		None
   374 ;; Auto vars:     Size  Location     Type
   375 ;;  i               2   24[BANK0 ] int 
   376 ;;  i               2   20[BANK0 ] int 
   377 ;;  itter           2   26[BANK0 ] int 
   378 ;;  cycle           2   22[BANK0 ] int 
   379 ;; Return value:  Size  Location     Type
   380 ;;                  1    wreg      void 
   381 ;; Registers used:
   382 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   383 ;; Tracked objects:
   384 ;;		On entry : B00/0
   385 ;;		On exit  : 0/0
   386 ;;		Unchanged: 0/0
   387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   388 ;;      Params:         0       0       0       0
   389 ;;      Locals:         0       8       0       0
   390 ;;      Temps:          0       4       0       0
   391 ;;      Totals:         0      12       0       0
   392 ;;Total ram usage:       12 bytes
   393 ;; Hardware stack levels required when called: 3
   394 ;; This function calls:
   395 ;;		_beep
   396 ;;		_clock_SR
   397 ;;		_decode_value
   398 ;;		_initialize_pins
   399 ;;		_push_output
   400 ;; This function is called by:
   401 ;;		Startup code after reset
   402 ;; This function uses a non-reentrant model
   403 ;;
   404                           
   405     0735                     _main:	
   406                           ;psect for function _main
   407                           
   408     0735                     l962:	
   409                           ;incstack = 0
   410                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   411                           
   412                           
   413                           ;main.c: 140:     initialize_pins();
   414     0735  118A  267A  118A   	fcall	_initialize_pins
   415     0738                     l964:
   416                           
   417                           ;main.c: 141:     PORTBbits.RB2 = 1;
   418     0738  1283               	bcf	3,5	;RP0=0, select bank0
   419     0739  1303               	bcf	3,6	;RP1=0, select bank0
   420     073A  1506               	bsf	6,2	;volatile
   421     073B                     l966:
   422                           
   423                           ;main.c: 142:     PORTBbits.RB0 = 0;
   424     073B  1006               	bcf	6,0	;volatile
   425     073C                     l968:
   426                           
   427                           ;main.c: 143:     int itter = 0;
   428     073C  01EA               	clrf	main@itter
   429     073D  01EB               	clrf	main@itter+1
   430     073E                     l970:
   431                           
   432                           ;main.c: 144:     int cycle = 0;
   433     073E  01E6               	clrf	main@cycle
   434     073F  01E7               	clrf	main@cycle+1
   435     0740                     l972:
   436                           
   437                           ;main.c: 145:     PORTBbits.RB6 = 1;
   438     0740  1706               	bsf	6,6	;volatile
   439     0741                     l974:
   440                           
   441                           ;main.c: 150:         if (PORTAbits.RA2 == 0) {
   442     0741  1283               	bcf	3,5	;RP0=0, select bank0
   443     0742  1303               	bcf	3,6	;RP1=0, select bank0
   444     0743  1905               	btfsc	5,2	;volatile
   445     0744  2F46               	goto	u561
   446     0745  2F47               	goto	u560
   447     0746                     u561:
   448     0746  2F5D               	goto	l980
   449     0747                     u560:
   450     0747                     l976:
   451                           
   452                           ;main.c: 151:             beep(1000);
   453     0747  30E8               	movlw	232
   454     0748  00D0               	movwf	beep@duration_ms
   455     0749  3003               	movlw	3
   456     074A  00D1               	movwf	beep@duration_ms+1
   457     074B  118A  262A  118A   	fcall	_beep
   458     074E                     l978:
   459                           
   460                           ;main.c: 152:             _delay((unsigned long)((50)*(20000000/4000.0)));
   461     074E  3002               	movlw	2
   462     074F  1283               	bcf	3,5	;RP0=0, select bank0
   463     0750  1303               	bcf	3,6	;RP1=0, select bank0
   464     0751  00E2               	movwf	??_main+2
   465     0752  3045               	movlw	69
   466     0753  00E1               	movwf	??_main+1
   467     0754  30A9               	movlw	169
   468     0755  00E0               	movwf	??_main
   469     0756                     u617:
   470     0756  0BE0               	decfsz	??_main,f
   471     0757  2F56               	goto	u617
   472     0758  0BE1               	decfsz	??_main+1,f
   473     0759  2F56               	goto	u617
   474     075A  0BE2               	decfsz	??_main+2,f
   475     075B  2F56               	goto	u617
   476     075C  0000               	nop
   477     075D                     l980:
   478                           
   479                           ;main.c: 155:         PORTBbits.RB7 = 0;
   480     075D  1283               	bcf	3,5	;RP0=0, select bank0
   481     075E  1303               	bcf	3,6	;RP1=0, select bank0
   482     075F  1386               	bcf	6,7	;volatile
   483     0760                     l982:
   484                           
   485                           ;main.c: 156:         for (int i = 0; i < (8 - itter); i++) {
   486     0760  01E4               	clrf	main@i
   487     0761  01E5               	clrf	main@i+1
   488     0762  2F6E               	goto	l988
   489     0763                     l984:
   490                           
   491                           ;main.c: 157:             clock_SR();
   492     0763  118A  256C  118A   	fcall	_clock_SR
   493     0766                     l986:
   494                           
   495                           ;main.c: 158:         }
   496     0766  3001               	movlw	1
   497     0767  1283               	bcf	3,5	;RP0=0, select bank0
   498     0768  1303               	bcf	3,6	;RP1=0, select bank0
   499     0769  07E4               	addwf	main@i,f
   500     076A  1803               	skipnc
   501     076B  0AE5               	incf	main@i+1,f
   502     076C  3000               	movlw	0
   503     076D  07E5               	addwf	main@i+1,f
   504     076E                     l988:
   505     076E  3008               	movlw	8
   506     076F  00E0               	movwf	??_main
   507     0770  086A               	movf	main@itter,w
   508     0771  0260               	subwf	??_main,w
   509     0772  00E1               	movwf	??_main+1
   510     0773  096B               	comf	main@itter+1,w
   511     0774  1803               	skipnc
   512     0775  3E01               	addlw	1
   513     0776  00E2               	movwf	??_main+2
   514     0777  0865               	movf	main@i+1,w
   515     0778  3A80               	xorlw	128
   516     0779  00E3               	movwf	??_main+3
   517     077A  0862               	movf	??_main+2,w
   518     077B  3A80               	xorlw	128
   519     077C  0263               	subwf	??_main+3,w
   520     077D  1D03               	skipz
   521     077E  2F81               	goto	u575
   522     077F  0861               	movf	??_main+1,w
   523     0780  0264               	subwf	main@i,w
   524     0781                     u575:
   525     0781  1C03               	skipc
   526     0782  2F84               	goto	u571
   527     0783  2F85               	goto	u570
   528     0784                     u571:
   529     0784  2F63               	goto	l984
   530     0785                     u570:
   531     0785                     l77:
   532                           
   533                           ;main.c: 160:         PORTBbits.RB7 = 1;
   534     0785  1283               	bcf	3,5	;RP0=0, select bank0
   535     0786  1303               	bcf	3,6	;RP1=0, select bank0
   536     0787  1786               	bsf	6,7	;volatile
   537     0788                     l990:
   538                           
   539                           ;main.c: 161:         clock_SR();
   540     0788  118A  256C  118A   	fcall	_clock_SR
   541     078B                     l992:
   542                           
   543                           ;main.c: 163:         PORTBbits.RB7 = 0;
   544     078B  1283               	bcf	3,5	;RP0=0, select bank0
   545     078C  1303               	bcf	3,6	;RP1=0, select bank0
   546     078D  1386               	bcf	6,7	;volatile
   547     078E                     l994:
   548                           
   549                           ;main.c: 164:         for (int i = (7 - itter); i < 8; i++) {
   550     078E  3007               	movlw	7
   551     078F  00E0               	movwf	??_main
   552     0790  086A               	movf	main@itter,w
   553     0791  0260               	subwf	??_main,w
   554     0792  00E8               	movwf	main@i_226
   555     0793  096B               	comf	main@itter+1,w
   556     0794  1803               	skipnc
   557     0795  3E01               	addlw	1
   558     0796  00E9               	movwf	main@i_226+1
   559     0797                     l996:
   560     0797  0869               	movf	main@i_226+1,w
   561     0798  3A80               	xorlw	128
   562     0799  00FF               	movwf	btemp+1
   563     079A  3080               	movlw	128
   564     079B  027F               	subwf	btemp+1,w
   565     079C  1D03               	skipz
   566     079D  2FA0               	goto	u585
   567     079E  3008               	movlw	8
   568     079F  0268               	subwf	main@i_226,w
   569     07A0                     u585:
   570     07A0  1C03               	skipc
   571     07A1  2FA3               	goto	u581
   572     07A2  2FA4               	goto	u580
   573     07A3                     u581:
   574     07A3  2FA5               	goto	l1000
   575     07A4                     u580:
   576     07A4  2FB1               	goto	l79
   577     07A5                     l1000:
   578                           
   579                           ;main.c: 165:             clock_SR();
   580     07A5  118A  256C  118A   	fcall	_clock_SR
   581     07A8                     l1002:
   582                           
   583                           ;main.c: 166:         }
   584     07A8  3001               	movlw	1
   585     07A9  1283               	bcf	3,5	;RP0=0, select bank0
   586     07AA  1303               	bcf	3,6	;RP1=0, select bank0
   587     07AB  07E8               	addwf	main@i_226,f
   588     07AC  1803               	skipnc
   589     07AD  0AE9               	incf	main@i_226+1,f
   590     07AE  3000               	movlw	0
   591     07AF  07E9               	addwf	main@i_226+1,f
   592     07B0  2F97               	goto	l996
   593     07B1                     l79:
   594                           
   595                           ;main.c: 167:         PORTBbits.RB7 = 1;
   596     07B1  1283               	bcf	3,5	;RP0=0, select bank0
   597     07B2  1303               	bcf	3,6	;RP1=0, select bank0
   598     07B3  1786               	bsf	6,7	;volatile
   599     07B4                     l1006:
   600                           
   601                           ;main.c: 170:         push_output();
   602     07B4  118A  2578  118A   	fcall	_push_output
   603     07B7                     l1008:
   604                           
   605                           ;main.c: 171:         USER_INPUT[itter] = PORTAbits.RA1;
   606     07B7  1283               	bcf	3,5	;RP0=0, select bank0
   607     07B8  1303               	bcf	3,6	;RP1=0, select bank0
   608     07B9  0C05               	rrf	5,w	;volatile
   609     07BA  3901               	andlw	1
   610     07BB  00E0               	movwf	??_main
   611     07BC  01E1               	clrf	??_main+1
   612     07BD  086A               	movf	main@itter,w
   613     07BE  00E2               	movwf	??_main+2
   614     07BF  0762               	addwf	??_main+2,w
   615     07C0  3E40               	addlw	(low (_USER_INPUT| 0))& (0+255)
   616     07C1  0084               	movwf	4
   617     07C2  0860               	movf	??_main,w
   618     07C3  1383               	bcf	3,7	;select IRP bank0
   619     07C4  0080               	movwf	0
   620     07C5  0A84               	incf	4,f
   621     07C6  0861               	movf	??_main+1,w
   622     07C7  0080               	movwf	0
   623     07C8                     l1010:
   624                           
   625                           ;main.c: 172:         itter++;
   626     07C8  3001               	movlw	1
   627     07C9  07EA               	addwf	main@itter,f
   628     07CA  1803               	skipnc
   629     07CB  0AEB               	incf	main@itter+1,f
   630     07CC  3000               	movlw	0
   631     07CD  07EB               	addwf	main@itter+1,f
   632     07CE                     l1012:
   633                           
   634                           ;main.c: 174:         if (itter == 8) {
   635     07CE  3008               	movlw	8
   636     07CF  066A               	xorwf	main@itter,w
   637     07D0  046B               	iorwf	main@itter+1,w
   638     07D1  1D03               	btfss	3,2
   639     07D2  2FD4               	goto	u591
   640     07D3  2FD5               	goto	u590
   641     07D4                     u591:
   642     07D4  2F41               	goto	l974
   643     07D5                     u590:
   644     07D5                     l1014:
   645                           
   646                           ;main.c: 175:             itter = 0;
   647     07D5  01EA               	clrf	main@itter
   648     07D6  01EB               	clrf	main@itter+1
   649     07D7                     l1016:
   650                           
   651                           ;main.c: 176:             cycle++;
   652     07D7  3001               	movlw	1
   653     07D8  07E6               	addwf	main@cycle,f
   654     07D9  1803               	skipnc
   655     07DA  0AE7               	incf	main@cycle+1,f
   656     07DB  3000               	movlw	0
   657     07DC  07E7               	addwf	main@cycle+1,f
   658     07DD                     l1018:
   659                           
   660                           ;main.c: 177:             if (cycle == 2)
   661     07DD  3002               	movlw	2
   662     07DE  0666               	xorwf	main@cycle,w
   663     07DF  0467               	iorwf	main@cycle+1,w
   664     07E0  1D03               	btfss	3,2
   665     07E1  2FE3               	goto	u601
   666     07E2  2FE4               	goto	u600
   667     07E3                     u601:
   668     07E3  2F41               	goto	l974
   669     07E4                     u600:
   670     07E4                     l1020:
   671                           
   672                           ;main.c: 178:             {;main.c: 179:                 cycle = 0;
   673     07E4  01E6               	clrf	main@cycle
   674     07E5  01E7               	clrf	main@cycle+1
   675     07E6                     l1022:
   676                           
   677                           ;main.c: 180:                 decode_value(USER_INPUT);
   678     07E6  3040               	movlw	(low (_USER_INPUT| 0))& (0+255)
   679     07E7  00D9               	movwf	decode_value@code
   680     07E8  118A  25F0  118A   	fcall	_decode_value
   681     07EB  2F41               	goto	l974
   682     07EC  118A  2800         	ljmp	start
   683     07EE                     __end_of_main:
   684                           
   685                           	psect	text1
   686     0578                     __ptext1:	
   687 ;; *************** function _push_output *****************
   688 ;; Defined at:
   689 ;;		line 130 in file "main.c"
   690 ;; Parameters:    Size  Location     Type
   691 ;;		None
   692 ;; Auto vars:     Size  Location     Type
   693 ;;		None
   694 ;; Return value:  Size  Location     Type
   695 ;;                  1    wreg      void 
   696 ;; Registers used:
   697 ;;		wreg
   698 ;; Tracked objects:
   699 ;;		On entry : 0/0
   700 ;;		On exit  : 0/0
   701 ;;		Unchanged: 0/0
   702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   703 ;;      Params:         0       0       0       0
   704 ;;      Locals:         0       0       0       0
   705 ;;      Temps:          1       0       0       0
   706 ;;      Totals:         1       0       0       0
   707 ;;Total ram usage:        1 bytes
   708 ;; Hardware stack levels used: 1
   709 ;; This function calls:
   710 ;;		Nothing
   711 ;; This function is called by:
   712 ;;		_main
   713 ;; This function uses a non-reentrant model
   714 ;;
   715                           
   716     0578                     _push_output:	
   717                           ;psect for function _push_output
   718                           
   719     0578                     l956:	
   720                           ;incstack = 0
   721                           ; Regs used in _push_output: [wreg]
   722                           
   723                           
   724                           ;main.c: 132:     PORTBbits.RB2 = 0;
   725     0578  1283               	bcf	3,5	;RP0=0, select bank0
   726     0579  1303               	bcf	3,6	;RP1=0, select bank0
   727     057A  1106               	bcf	6,2	;volatile
   728     057B                     l958:
   729                           
   730                           ;main.c: 133:     _delay((unsigned long)((10)*(20000000/4000000.0)));
   731     057B  3010               	movlw	16
   732     057C  00F0               	movwf	??_push_output
   733     057D                     u627:
   734     057D  0BF0               	decfsz	??_push_output,f
   735     057E  2D7D               	goto	u627
   736     057F  0000               	nop
   737     0580                     l960:
   738                           
   739                           ;main.c: 134:     PORTBbits.RB2 = 1;
   740     0580  1283               	bcf	3,5	;RP0=0, select bank0
   741     0581  1303               	bcf	3,6	;RP1=0, select bank0
   742     0582  1506               	bsf	6,2	;volatile
   743     0583                     l66:
   744     0583  0008               	return
   745     0584                     __end_of_push_output:
   746                           
   747                           	psect	text2
   748     067A                     __ptext2:	
   749 ;; *************** function _initialize_pins *****************
   750 ;; Defined at:
   751 ;;		line 38 in file "main.c"
   752 ;; Parameters:    Size  Location     Type
   753 ;;		None
   754 ;; Auto vars:     Size  Location     Type
   755 ;;  i               2    1[COMMON] int 
   756 ;; Return value:  Size  Location     Type
   757 ;;                  1    wreg      void 
   758 ;; Registers used:
   759 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   760 ;; Tracked objects:
   761 ;;		On entry : 0/0
   762 ;;		On exit  : 0/0
   763 ;;		Unchanged: 0/0
   764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   765 ;;      Params:         0       0       0       0
   766 ;;      Locals:         2       0       0       0
   767 ;;      Temps:          1       0       0       0
   768 ;;      Totals:         3       0       0       0
   769 ;;Total ram usage:        3 bytes
   770 ;; Hardware stack levels used: 1
   771 ;; This function calls:
   772 ;;		Nothing
   773 ;; This function is called by:
   774 ;;		_main
   775 ;; This function uses a non-reentrant model
   776 ;;
   777                           
   778     067A                     _initialize_pins:	
   779                           ;psect for function _initialize_pins
   780                           
   781     067A                     l916:	
   782                           ;incstack = 0
   783                           ; Regs used in _initialize_pins: [wreg-fsr0h+status,2+status,0+btemp+1]
   784                           
   785                           
   786                           ;main.c: 39:     CMCON = 0x07;
   787     067A  3007               	movlw	7
   788     067B  1283               	bcf	3,5	;RP0=0, select bank0
   789     067C  1303               	bcf	3,6	;RP1=0, select bank0
   790     067D  009F               	movwf	31	;volatile
   791                           
   792                           ;main.c: 40:     TRISBbits.TRISB0 = 0;
   793     067E  1683               	bsf	3,5	;RP0=1, select bank1
   794     067F  1303               	bcf	3,6	;RP1=0, select bank1
   795     0680  1006               	bcf	6,0	;volatile
   796                           
   797                           ;main.c: 41:     TRISAbits.TRISA3 = 0;
   798     0681  1185               	bcf	5,3	;volatile
   799                           
   800                           ;main.c: 42:     TRISBbits.TRISB2 = 0;
   801     0682  1106               	bcf	6,2	;volatile
   802                           
   803                           ;main.c: 43:     TRISBbits.TRISB1 = 0;
   804     0683  1086               	bcf	6,1	;volatile
   805                           
   806                           ;main.c: 45:     TRISAbits.TRISA1 = 1;
   807     0684  1485               	bsf	5,1	;volatile
   808                           
   809                           ;main.c: 46:     TRISAbits.TRISA2 = 1;
   810     0685  1505               	bsf	5,2	;volatile
   811                           
   812                           ;main.c: 47:     TRISBbits.TRISB7 = 0;
   813     0686  1386               	bcf	6,7	;volatile
   814                           
   815                           ;main.c: 48:     TRISBbits.TRISB6 = 0;
   816     0687  1306               	bcf	6,6	;volatile
   817                           
   818                           ;main.c: 49:     PORTAbits.RA3 = 1;
   819     0688  1283               	bcf	3,5	;RP0=0, select bank0
   820     0689  1303               	bcf	3,6	;RP1=0, select bank0
   821     068A  1585               	bsf	5,3	;volatile
   822     068B                     l918:
   823                           
   824                           ;main.c: 50:     for(int i =0; i<7; i++)
   825     068B  01F1               	clrf	initialize_pins@i
   826     068C  01F2               	clrf	initialize_pins@i+1
   827     068D                     l924:
   828                           
   829                           ;main.c: 51:     {;main.c: 52:         if(i == 0)
   830     068D  0871               	movf	initialize_pins@i,w
   831     068E  0472               	iorwf	initialize_pins@i+1,w
   832     068F  1D03               	btfss	3,2
   833     0690  2E92               	goto	u521
   834     0691  2E93               	goto	u520
   835     0692                     u521:
   836     0692  2EA9               	goto	l928
   837     0693                     u520:
   838     0693                     l926:
   839                           
   840                           ;main.c: 53:         {;main.c: 54:             outputPinpad[i] = 1;
   841     0693  0871               	movf	initialize_pins@i,w
   842     0694  00F0               	movwf	??_initialize_pins
   843     0695  0770               	addwf	??_initialize_pins,w
   844     0696  3E2E               	addlw	(low (_outputPinpad| 0))& (0+255)
   845     0697  0084               	movwf	4
   846     0698  3001               	movlw	1
   847     0699  1383               	bcf	3,7	;select IRP bank0
   848     069A  0080               	movwf	0
   849     069B  0A84               	incf	4,f
   850     069C  3000               	movlw	0
   851     069D  0080               	movwf	0
   852                           
   853                           ;main.c: 55:             inputPinpad[i] = 1;
   854     069E  0871               	movf	initialize_pins@i,w
   855     069F  00F0               	movwf	??_initialize_pins
   856     06A0  0770               	addwf	??_initialize_pins,w
   857     06A1  3E20               	addlw	(low (_inputPinpad| 0))& (0+255)
   858     06A2  0084               	movwf	4
   859     06A3  3001               	movlw	1
   860     06A4  0080               	movwf	0
   861     06A5  0A84               	incf	4,f
   862     06A6  3000               	movlw	0
   863     06A7  0080               	movwf	0
   864                           
   865                           ;main.c: 57:         }
   866     06A8  2EBC               	goto	l930
   867     06A9                     l928:
   868                           
   869                           ;main.c: 59:         {;main.c: 60:             outputPinpad[i] = 1;
   870     06A9  0871               	movf	initialize_pins@i,w
   871     06AA  00F0               	movwf	??_initialize_pins
   872     06AB  0770               	addwf	??_initialize_pins,w
   873     06AC  3E2E               	addlw	(low (_outputPinpad| 0))& (0+255)
   874     06AD  0084               	movwf	4
   875     06AE  3001               	movlw	1
   876     06AF  1383               	bcf	3,7	;select IRP bank0
   877     06B0  0080               	movwf	0
   878     06B1  0A84               	incf	4,f
   879     06B2  3000               	movlw	0
   880     06B3  0080               	movwf	0
   881                           
   882                           ;main.c: 61:             inputPinpad[i] = 0;
   883     06B4  0871               	movf	initialize_pins@i,w
   884     06B5  00F0               	movwf	??_initialize_pins
   885     06B6  0770               	addwf	??_initialize_pins,w
   886     06B7  3E20               	addlw	(low (_inputPinpad| 0))& (0+255)
   887     06B8  0084               	movwf	4
   888     06B9  0180               	clrf	0
   889     06BA  0A84               	incf	4,f
   890     06BB  0180               	clrf	0
   891     06BC                     l930:
   892                           
   893                           ;main.c: 63:     }
   894     06BC  3001               	movlw	1
   895     06BD  07F1               	addwf	initialize_pins@i,f
   896     06BE  1803               	skipnc
   897     06BF  0AF2               	incf	initialize_pins@i+1,f
   898     06C0  3000               	movlw	0
   899     06C1  07F2               	addwf	initialize_pins@i+1,f
   900     06C2                     l932:
   901     06C2  0872               	movf	initialize_pins@i+1,w
   902     06C3  3A80               	xorlw	128
   903     06C4  00FF               	movwf	btemp+1
   904     06C5  3080               	movlw	128
   905     06C6  027F               	subwf	btemp+1,w
   906     06C7  1D03               	skipz
   907     06C8  2ECB               	goto	u535
   908     06C9  3007               	movlw	7
   909     06CA  0271               	subwf	initialize_pins@i,w
   910     06CB                     u535:
   911     06CB  1C03               	skipc
   912     06CC  2ECE               	goto	u531
   913     06CD  2ECF               	goto	u530
   914     06CE                     u531:
   915     06CE  2E8D               	goto	l924
   916     06CF                     u530:
   917     06CF                     l28:
   918                           
   919                           ;main.c: 64:     INTCONbits.GIE = 1;
   920     06CF  178B               	bsf	11,7	;volatile
   921                           
   922                           ;main.c: 65:     INTCONbits.PEIE = 1;
   923     06D0  170B               	bsf	11,6	;volatile
   924     06D1                     l31:
   925     06D1  0008               	return
   926     06D2                     __end_of_initialize_pins:
   927                           
   928                           	psect	text3
   929     05F0                     __ptext3:	
   930 ;; *************** function _decode_value *****************
   931 ;; Defined at:
   932 ;;		line 112 in file "main.c"
   933 ;; Parameters:    Size  Location     Type
   934 ;;  code            1    9[BANK0 ] PTR int 
   935 ;;		 -> USER_INPUT(16), 
   936 ;; Auto vars:     Size  Location     Type
   937 ;;  i               2   14[BANK0 ] int 
   938 ;; Return value:  Size  Location     Type
   939 ;;                  1    wreg      void 
   940 ;; Registers used:
   941 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   942 ;; Tracked objects:
   943 ;;		On entry : 0/0
   944 ;;		On exit  : 0/0
   945 ;;		Unchanged: 0/0
   946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   947 ;;      Params:         0       1       0       0
   948 ;;      Locals:         0       2       0       0
   949 ;;      Temps:          0       4       0       0
   950 ;;      Totals:         0       7       0       0
   951 ;;Total ram usage:        7 bytes
   952 ;; Hardware stack levels used: 1
   953 ;; Hardware stack levels required when called: 2
   954 ;; This function calls:
   955 ;;		_beep
   956 ;;		_flash
   957 ;; This function is called by:
   958 ;;		_main
   959 ;; This function uses a non-reentrant model
   960 ;;
   961                           
   962     05F0                     _decode_value:	
   963                           ;psect for function _decode_value
   964                           
   965     05F0                     l934:	
   966                           ;incstack = 0
   967                           ; Regs used in _decode_value: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   968                           
   969                           
   970                           ;main.c: 112: void decode_value(int code[]);main.c: 113: {;main.c: 114:     for(int i =0
      +                          ; i<7; i++)
   971     05F0  1283               	bcf	3,5	;RP0=0, select bank0
   972     05F1  1303               	bcf	3,6	;RP1=0, select bank0
   973     05F2  01DE               	clrf	decode_value@i
   974     05F3  01DF               	clrf	decode_value@i+1
   975     05F4                     l940:
   976                           
   977                           ;main.c: 115:     {;main.c: 116:         if(code[i] == 1)
   978     05F4  1283               	bcf	3,5	;RP0=0, select bank0
   979     05F5  1303               	bcf	3,6	;RP1=0, select bank0
   980     05F6  085E               	movf	decode_value@i,w
   981     05F7  00DA               	movwf	??_decode_value
   982     05F8  075A               	addwf	??_decode_value,w
   983     05F9  0759               	addwf	decode_value@code,w
   984     05FA  00DB               	movwf	??_decode_value+1
   985     05FB  085B               	movf	??_decode_value+1,w
   986     05FC  0084               	movwf	4
   987     05FD  1383               	bcf	3,7	;select IRP bank0
   988     05FE  0800               	movf	0,w
   989     05FF  00DC               	movwf	??_decode_value+2
   990     0600  0A84               	incf	4,f
   991     0601  0800               	movf	0,w
   992     0602  00DD               	movwf	??_decode_value+3
   993     0603  035C               	decf	??_decode_value+2,w
   994     0604  045D               	iorwf	??_decode_value+3,w
   995     0605  1D03               	btfss	3,2
   996     0606  2E08               	goto	u541
   997     0607  2E09               	goto	u540
   998     0608                     u541:
   999     0608  2E11               	goto	l944
  1000     0609                     u540:
  1001     0609                     l942:
  1002                           
  1003                           ;main.c: 117:         {;main.c: 118:             beep(500);
  1004     0609  30F4               	movlw	244
  1005     060A  00D0               	movwf	beep@duration_ms
  1006     060B  3001               	movlw	1
  1007     060C  00D1               	movwf	beep@duration_ms+1
  1008     060D  118A  262A  118A   	fcall	_beep
  1009                           
  1010                           ;main.c: 119:         }
  1011     0610  2E14               	goto	l946
  1012     0611                     l944:
  1013                           
  1014                           ;main.c: 121:             flash();
  1015     0611  118A  25C4  118A   	fcall	_flash
  1016     0614                     l946:
  1017                           
  1018                           ;main.c: 122:     }
  1019     0614  3001               	movlw	1
  1020     0615  1283               	bcf	3,5	;RP0=0, select bank0
  1021     0616  1303               	bcf	3,6	;RP1=0, select bank0
  1022     0617  07DE               	addwf	decode_value@i,f
  1023     0618  1803               	skipnc
  1024     0619  0ADF               	incf	decode_value@i+1,f
  1025     061A  3000               	movlw	0
  1026     061B  07DF               	addwf	decode_value@i+1,f
  1027     061C                     l948:
  1028     061C  085F               	movf	decode_value@i+1,w
  1029     061D  3A80               	xorlw	128
  1030     061E  00FF               	movwf	btemp+1
  1031     061F  3080               	movlw	128
  1032     0620  027F               	subwf	btemp+1,w
  1033     0621  1D03               	skipz
  1034     0622  2E25               	goto	u555
  1035     0623  3007               	movlw	7
  1036     0624  025E               	subwf	decode_value@i,w
  1037     0625                     u555:
  1038     0625  1C03               	skipc
  1039     0626  2E28               	goto	u551
  1040     0627  2E29               	goto	u550
  1041     0628                     u551:
  1042     0628  2DF4               	goto	l940
  1043     0629                     u550:
  1044     0629                     l60:
  1045     0629  0008               	return
  1046     062A                     __end_of_decode_value:
  1047                           
  1048                           	psect	text4
  1049     05C4                     __ptext4:	
  1050 ;; *************** function _flash *****************
  1051 ;; Defined at:
  1052 ;;		line 91 in file "main.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;		None
  1055 ;; Auto vars:     Size  Location     Type
  1056 ;;		None
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  1    wreg      void 
  1059 ;; Registers used:
  1060 ;;		wreg, status,0
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1066 ;;      Params:         0       0       0       0
  1067 ;;      Locals:         0       0       0       0
  1068 ;;      Temps:          3       0       0       0
  1069 ;;      Totals:         3       0       0       0
  1070 ;;Total ram usage:        3 bytes
  1071 ;; Hardware stack levels used: 1
  1072 ;; This function calls:
  1073 ;;		Nothing
  1074 ;; This function is called by:
  1075 ;;		_decode_value
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079     05C4                     _flash:	
  1080                           ;psect for function _flash
  1081                           
  1082     05C4                     l910:	
  1083                           ;incstack = 0
  1084                           ; Regs used in _flash: [wreg+status,0]
  1085                           
  1086                           
  1087                           ;main.c: 93:     PORTBbits.RB0 = !PORTBbits.RB0;
  1088     05C4  1003               	clrc
  1089     05C5  1283               	bcf	3,5	;RP0=0, select bank0
  1090     05C6  1303               	bcf	3,6	;RP1=0, select bank0
  1091     05C7  1C06               	btfss	6,0	;volatile
  1092     05C8  1403               	setc
  1093     05C9  1803               	btfsc	3,0
  1094     05CA  2DCC               	goto	u481
  1095     05CB  2DD0               	goto	u480
  1096     05CC                     u481:
  1097     05CC  1283               	bcf	3,5	;RP0=0, select bank0
  1098     05CD  1303               	bcf	3,6	;RP1=0, select bank0
  1099     05CE  1406               	bsf	6,0	;volatile
  1100     05CF  2DD3               	goto	u494
  1101     05D0                     u480:
  1102     05D0  1283               	bcf	3,5	;RP0=0, select bank0
  1103     05D1  1303               	bcf	3,6	;RP1=0, select bank0
  1104     05D2  1006               	bcf	6,0	;volatile
  1105     05D3                     u494:
  1106     05D3                     l912:
  1107                           
  1108                           ;main.c: 94:     _delay((unsigned long)((50)*(20000000/4000.0)));
  1109     05D3  3002               	movlw	2
  1110     05D4  00F2               	movwf	??_flash+2
  1111     05D5  3045               	movlw	69
  1112     05D6  00F1               	movwf	??_flash+1
  1113     05D7  30A9               	movlw	169
  1114     05D8  00F0               	movwf	??_flash
  1115     05D9                     u637:
  1116     05D9  0BF0               	decfsz	??_flash,f
  1117     05DA  2DD9               	goto	u637
  1118     05DB  0BF1               	decfsz	??_flash+1,f
  1119     05DC  2DD9               	goto	u637
  1120     05DD  0BF2               	decfsz	??_flash+2,f
  1121     05DE  2DD9               	goto	u637
  1122     05DF  2DE0               	nop2
  1123     05E0                     l914:
  1124                           
  1125                           ;main.c: 95:     PORTBbits.RB0 = !PORTBbits.RB0;
  1126     05E0  1003               	clrc
  1127     05E1  1283               	bcf	3,5	;RP0=0, select bank0
  1128     05E2  1303               	bcf	3,6	;RP1=0, select bank0
  1129     05E3  1C06               	btfss	6,0	;volatile
  1130     05E4  1403               	setc
  1131     05E5  1803               	btfsc	3,0
  1132     05E6  2DE8               	goto	u501
  1133     05E7  2DEC               	goto	u500
  1134     05E8                     u501:
  1135     05E8  1283               	bcf	3,5	;RP0=0, select bank0
  1136     05E9  1303               	bcf	3,6	;RP1=0, select bank0
  1137     05EA  1406               	bsf	6,0	;volatile
  1138     05EB  2DEF               	goto	u514
  1139     05EC                     u500:
  1140     05EC  1283               	bcf	3,5	;RP0=0, select bank0
  1141     05ED  1303               	bcf	3,6	;RP1=0, select bank0
  1142     05EE  1006               	bcf	6,0	;volatile
  1143     05EF                     u514:
  1144     05EF                     l46:
  1145     05EF  0008               	return
  1146     05F0                     __end_of_flash:
  1147                           
  1148                           	psect	text5
  1149     062A                     __ptext5:	
  1150 ;; *************** function _beep *****************
  1151 ;; Defined at:
  1152 ;;		line 79 in file "main.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;  duration_ms     2    0[BANK0 ] int 
  1155 ;; Auto vars:     Size  Location     Type
  1156 ;;  i               2    5[BANK0 ] int 
  1157 ;;  half_period_    2    7[BANK0 ] int 
  1158 ;;  total_cycles    2    3[BANK0 ] int 
  1159 ;; Return value:  Size  Location     Type
  1160 ;;                  1    wreg      void 
  1161 ;; Registers used:
  1162 ;;		wreg, status,2, status,0, pclath, cstack
  1163 ;; Tracked objects:
  1164 ;;		On entry : 0/0
  1165 ;;		On exit  : 0/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1168 ;;      Params:         0       2       0       0
  1169 ;;      Locals:         0       6       0       0
  1170 ;;      Temps:          0       1       0       0
  1171 ;;      Totals:         0       9       0       0
  1172 ;;Total ram usage:        9 bytes
  1173 ;; Hardware stack levels used: 1
  1174 ;; Hardware stack levels required when called: 1
  1175 ;; This function calls:
  1176 ;;		___awdiv
  1177 ;;		___wmul
  1178 ;;		_delay_us
  1179 ;; This function is called by:
  1180 ;;		_decode_value
  1181 ;;		_main
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185     062A                     _beep:	
  1186                           ;psect for function _beep
  1187                           
  1188     062A                     l896:	
  1189                           ;incstack = 0
  1190                           ; Regs used in _beep: [wreg+status,2+status,0+pclath+cstack]
  1191                           
  1192                           
  1193                           ;main.c: 79: void beep(int duration_ms);main.c: 80: {;main.c: 81:     int half_period_us
      +                           = 1000000 / (2 * 6000);
  1194     062A  3053               	movlw	83
  1195     062B  1283               	bcf	3,5	;RP0=0, select bank0
  1196     062C  1303               	bcf	3,6	;RP1=0, select bank0
  1197     062D  00D7               	movwf	beep@half_period_us
  1198     062E  3000               	movlw	0
  1199     062F  00D8               	movwf	beep@half_period_us+1
  1200     0630                     l898:
  1201                           
  1202                           ;main.c: 82:     int total_cycles = (duration_ms * 1000) / (2 * half_period_us);
  1203     0630  30A6               	movlw	166
  1204     0631  00F6               	movwf	___awdiv@divisor
  1205     0632  3000               	movlw	0
  1206     0633  00F7               	movwf	___awdiv@divisor+1
  1207     0634  0851               	movf	beep@duration_ms+1,w
  1208     0635  00F1               	movwf	___wmul@multiplier+1
  1209     0636  0850               	movf	beep@duration_ms,w
  1210     0637  00F0               	movwf	___wmul@multiplier
  1211     0638  30E8               	movlw	232
  1212     0639  00F2               	movwf	___wmul@multiplicand
  1213     063A  3003               	movlw	3
  1214     063B  00F3               	movwf	___wmul@multiplicand+1
  1215     063C  118A  259F  118A   	fcall	___wmul
  1216     063F  0871               	movf	?___wmul+1,w
  1217     0640  00F9               	movwf	___awdiv@dividend+1
  1218     0641  0870               	movf	?___wmul,w
  1219     0642  00F8               	movwf	___awdiv@dividend
  1220     0643  118A  26D2  118A   	fcall	___awdiv
  1221     0646  0877               	movf	?___awdiv+1,w
  1222     0647  1283               	bcf	3,5	;RP0=0, select bank0
  1223     0648  1303               	bcf	3,6	;RP1=0, select bank0
  1224     0649  00D4               	movwf	beep@total_cycles+1
  1225     064A  0876               	movf	?___awdiv,w
  1226     064B  00D3               	movwf	beep@total_cycles
  1227     064C                     l900:
  1228                           
  1229                           ;main.c: 84:     for (int i = 0; i < total_cycles; i++) {
  1230     064C  01D5               	clrf	beep@i
  1231     064D  01D6               	clrf	beep@i+1
  1232     064E  2E6B               	goto	l908
  1233     064F                     l41:
  1234                           
  1235                           ;main.c: 85:         PORTBbits.RB1 = 1;
  1236     064F  1283               	bcf	3,5	;RP0=0, select bank0
  1237     0650  1303               	bcf	3,6	;RP1=0, select bank0
  1238     0651  1486               	bsf	6,1	;volatile
  1239     0652                     l902:
  1240                           
  1241                           ;main.c: 86:         delay_us((int)half_period_us);
  1242     0652  0858               	movf	beep@half_period_us+1,w
  1243     0653  00F1               	movwf	delay_us@time+1
  1244     0654  0857               	movf	beep@half_period_us,w
  1245     0655  00F0               	movwf	delay_us@time
  1246     0656  118A  2584  118A   	fcall	_delay_us
  1247     0659                     l904:
  1248                           
  1249                           ;main.c: 87:         PORTBbits.RB1 = 0;
  1250     0659  1283               	bcf	3,5	;RP0=0, select bank0
  1251     065A  1303               	bcf	3,6	;RP1=0, select bank0
  1252     065B  1086               	bcf	6,1	;volatile
  1253                           
  1254                           ;main.c: 88:         delay_us((int)half_period_us);
  1255     065C  0858               	movf	beep@half_period_us+1,w
  1256     065D  00F1               	movwf	delay_us@time+1
  1257     065E  0857               	movf	beep@half_period_us,w
  1258     065F  00F0               	movwf	delay_us@time
  1259     0660  118A  2584  118A   	fcall	_delay_us
  1260     0663                     l906:
  1261                           
  1262                           ;main.c: 89:     }
  1263     0663  3001               	movlw	1
  1264     0664  1283               	bcf	3,5	;RP0=0, select bank0
  1265     0665  1303               	bcf	3,6	;RP1=0, select bank0
  1266     0666  07D5               	addwf	beep@i,f
  1267     0667  1803               	skipnc
  1268     0668  0AD6               	incf	beep@i+1,f
  1269     0669  3000               	movlw	0
  1270     066A  07D6               	addwf	beep@i+1,f
  1271     066B                     l908:
  1272     066B  0856               	movf	beep@i+1,w
  1273     066C  3A80               	xorlw	128
  1274     066D  00D2               	movwf	??_beep
  1275     066E  0854               	movf	beep@total_cycles+1,w
  1276     066F  3A80               	xorlw	128
  1277     0670  0252               	subwf	??_beep,w
  1278     0671  1D03               	skipz
  1279     0672  2E75               	goto	u475
  1280     0673  0853               	movf	beep@total_cycles,w
  1281     0674  0255               	subwf	beep@i,w
  1282     0675                     u475:
  1283     0675  1C03               	skipc
  1284     0676  2E78               	goto	u471
  1285     0677  2E79               	goto	u470
  1286     0678                     u471:
  1287     0678  2E4F               	goto	l41
  1288     0679                     u470:
  1289     0679                     l43:
  1290     0679  0008               	return
  1291     067A                     __end_of_beep:
  1292                           
  1293                           	psect	text6
  1294     0584                     __ptext6:	
  1295 ;; *************** function _delay_us *****************
  1296 ;; Defined at:
  1297 ;;		line 71 in file "main.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;  time            2    0[COMMON] int 
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;  i               2    3[COMMON] int 
  1302 ;; Return value:  Size  Location     Type
  1303 ;;                  1    wreg      void 
  1304 ;; Registers used:
  1305 ;;		wreg, status,2
  1306 ;; Tracked objects:
  1307 ;;		On entry : 0/0
  1308 ;;		On exit  : 0/0
  1309 ;;		Unchanged: 0/0
  1310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1311 ;;      Params:         2       0       0       0
  1312 ;;      Locals:         2       0       0       0
  1313 ;;      Temps:          1       0       0       0
  1314 ;;      Totals:         5       0       0       0
  1315 ;;Total ram usage:        5 bytes
  1316 ;; Hardware stack levels used: 1
  1317 ;; This function calls:
  1318 ;;		Nothing
  1319 ;; This function is called by:
  1320 ;;		_beep
  1321 ;; This function uses a non-reentrant model
  1322 ;;
  1323                           
  1324     0584                     _delay_us:	
  1325                           ;psect for function _delay_us
  1326                           
  1327     0584                     l834:	
  1328                           ;incstack = 0
  1329                           ; Regs used in _delay_us: [wreg+status,2]
  1330                           
  1331                           
  1332                           ;main.c: 71: void delay_us(int time);main.c: 72: {;main.c: 73:     for(int i =0; i< time
      +                          ; i++)
  1333     0584  01F3               	clrf	delay_us@i
  1334     0585  01F4               	clrf	delay_us@i+1
  1335     0586  2D90               	goto	l34
  1336     0587                     l35:
  1337                           
  1338                           ;main.c: 74:     {;main.c: 75:         _delay((unsigned long)((1)*(20000000/4000000.0)))
      +                          ;
  1339     0587  2D88               	nop2	;2 cycle nop
  1340     0588  2D89               	nop2	;2 cycle nop
  1341     0589  0000               	nop
  1342     058A                     l836:
  1343                           
  1344                           ;main.c: 76:     }
  1345     058A  3001               	movlw	1
  1346     058B  07F3               	addwf	delay_us@i,f
  1347     058C  1803               	skipnc
  1348     058D  0AF4               	incf	delay_us@i+1,f
  1349     058E  3000               	movlw	0
  1350     058F  07F4               	addwf	delay_us@i+1,f
  1351     0590                     l34:
  1352     0590  0874               	movf	delay_us@i+1,w
  1353     0591  3A80               	xorlw	128
  1354     0592  00F2               	movwf	??_delay_us
  1355     0593  0871               	movf	delay_us@time+1,w
  1356     0594  3A80               	xorlw	128
  1357     0595  0272               	subwf	??_delay_us,w
  1358     0596  1D03               	skipz
  1359     0597  2D9A               	goto	u325
  1360     0598  0870               	movf	delay_us@time,w
  1361     0599  0273               	subwf	delay_us@i,w
  1362     059A                     u325:
  1363     059A  1C03               	skipc
  1364     059B  2D9D               	goto	u321
  1365     059C  2D9E               	goto	u320
  1366     059D                     u321:
  1367     059D  2D87               	goto	l35
  1368     059E                     u320:
  1369     059E                     l37:
  1370     059E  0008               	return
  1371     059F                     __end_of_delay_us:
  1372                           
  1373                           	psect	text7
  1374     059F                     __ptext7:	
  1375 ;; *************** function ___wmul *****************
  1376 ;; Defined at:
  1377 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\Umul16.c"
  1378 ;; Parameters:    Size  Location     Type
  1379 ;;  multiplier      2    0[COMMON] unsigned int 
  1380 ;;  multiplicand    2    2[COMMON] unsigned int 
  1381 ;; Auto vars:     Size  Location     Type
  1382 ;;  product         2    4[COMMON] unsigned int 
  1383 ;; Return value:  Size  Location     Type
  1384 ;;                  2    0[COMMON] unsigned int 
  1385 ;; Registers used:
  1386 ;;		wreg, status,2, status,0
  1387 ;; Tracked objects:
  1388 ;;		On entry : 0/0
  1389 ;;		On exit  : 0/0
  1390 ;;		Unchanged: 0/0
  1391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1392 ;;      Params:         4       0       0       0
  1393 ;;      Locals:         2       0       0       0
  1394 ;;      Temps:          0       0       0       0
  1395 ;;      Totals:         6       0       0       0
  1396 ;;Total ram usage:        6 bytes
  1397 ;; Hardware stack levels used: 1
  1398 ;; This function calls:
  1399 ;;		Nothing
  1400 ;; This function is called by:
  1401 ;;		_beep
  1402 ;; This function uses a non-reentrant model
  1403 ;;
  1404                           
  1405     059F                     ___wmul:	
  1406                           ;psect for function ___wmul
  1407                           
  1408     059F                     l838:	
  1409                           ;incstack = 0
  1410                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1411                           
  1412     059F  01F4               	clrf	___wmul@product
  1413     05A0  01F5               	clrf	___wmul@product+1
  1414     05A1                     l840:
  1415     05A1  1C70               	btfss	___wmul@multiplier,0
  1416     05A2  2DA4               	goto	u331
  1417     05A3  2DA5               	goto	u330
  1418     05A4                     u331:
  1419     05A4  2DAB               	goto	l170
  1420     05A5                     u330:
  1421     05A5                     l842:
  1422     05A5  0872               	movf	___wmul@multiplicand,w
  1423     05A6  07F4               	addwf	___wmul@product,f
  1424     05A7  1803               	skipnc
  1425     05A8  0AF5               	incf	___wmul@product+1,f
  1426     05A9  0873               	movf	___wmul@multiplicand+1,w
  1427     05AA  07F5               	addwf	___wmul@product+1,f
  1428     05AB                     l170:
  1429     05AB  3001               	movlw	1
  1430     05AC                     u345:
  1431     05AC  1003               	clrc
  1432     05AD  0DF2               	rlf	___wmul@multiplicand,f
  1433     05AE  0DF3               	rlf	___wmul@multiplicand+1,f
  1434     05AF  3EFF               	addlw	-1
  1435     05B0  1D03               	skipz
  1436     05B1  2DAC               	goto	u345
  1437     05B2                     l844:
  1438     05B2  3001               	movlw	1
  1439     05B3                     u355:
  1440     05B3  1003               	clrc
  1441     05B4  0CF1               	rrf	___wmul@multiplier+1,f
  1442     05B5  0CF0               	rrf	___wmul@multiplier,f
  1443     05B6  3EFF               	addlw	-1
  1444     05B7  1D03               	skipz
  1445     05B8  2DB3               	goto	u355
  1446     05B9                     l846:
  1447     05B9  0870               	movf	___wmul@multiplier,w
  1448     05BA  0471               	iorwf	___wmul@multiplier+1,w
  1449     05BB  1D03               	btfss	3,2
  1450     05BC  2DBE               	goto	u361
  1451     05BD  2DBF               	goto	u360
  1452     05BE                     u361:
  1453     05BE  2DA1               	goto	l840
  1454     05BF                     u360:
  1455     05BF                     l848:
  1456     05BF  0875               	movf	___wmul@product+1,w
  1457     05C0  00F1               	movwf	?___wmul+1
  1458     05C1  0874               	movf	___wmul@product,w
  1459     05C2  00F0               	movwf	?___wmul
  1460     05C3                     l172:
  1461     05C3  0008               	return
  1462     05C4                     __end_of___wmul:
  1463                           
  1464                           	psect	text8
  1465     06D2                     __ptext8:	
  1466 ;; *************** function ___awdiv *****************
  1467 ;; Defined at:
  1468 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awdiv.c"
  1469 ;; Parameters:    Size  Location     Type
  1470 ;;  divisor         2    6[COMMON] int 
  1471 ;;  dividend        2    8[COMMON] int 
  1472 ;; Auto vars:     Size  Location     Type
  1473 ;;  quotient        2   12[COMMON] int 
  1474 ;;  sign            1   11[COMMON] unsigned char 
  1475 ;;  counter         1   10[COMMON] unsigned char 
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  2    6[COMMON] int 
  1478 ;; Registers used:
  1479 ;;		wreg, status,2, status,0
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1485 ;;      Params:         4       0       0       0
  1486 ;;      Locals:         4       0       0       0
  1487 ;;      Temps:          0       0       0       0
  1488 ;;      Totals:         8       0       0       0
  1489 ;;Total ram usage:        8 bytes
  1490 ;; Hardware stack levels used: 1
  1491 ;; This function calls:
  1492 ;;		Nothing
  1493 ;; This function is called by:
  1494 ;;		_beep
  1495 ;; This function uses a non-reentrant model
  1496 ;;
  1497                           
  1498     06D2                     ___awdiv:	
  1499                           ;psect for function ___awdiv
  1500                           
  1501     06D2                     l852:	
  1502                           ;incstack = 0
  1503                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1504                           
  1505     06D2  01FB               	clrf	___awdiv@sign
  1506     06D3                     l854:
  1507     06D3  1FF7               	btfss	___awdiv@divisor+1,7
  1508     06D4  2ED6               	goto	u371
  1509     06D5  2ED7               	goto	u370
  1510     06D6                     u371:
  1511     06D6  2EDE               	goto	l860
  1512     06D7                     u370:
  1513     06D7                     l856:
  1514     06D7  09F6               	comf	___awdiv@divisor,f
  1515     06D8  09F7               	comf	___awdiv@divisor+1,f
  1516     06D9  0AF6               	incf	___awdiv@divisor,f
  1517     06DA  1903               	skipnz
  1518     06DB  0AF7               	incf	___awdiv@divisor+1,f
  1519     06DC                     l858:
  1520     06DC  3001               	movlw	1
  1521     06DD  00FB               	movwf	___awdiv@sign
  1522     06DE                     l860:
  1523     06DE  1FF9               	btfss	___awdiv@dividend+1,7
  1524     06DF  2EE1               	goto	u381
  1525     06E0  2EE2               	goto	u380
  1526     06E1                     u381:
  1527     06E1  2EE9               	goto	l866
  1528     06E2                     u380:
  1529     06E2                     l862:
  1530     06E2  09F8               	comf	___awdiv@dividend,f
  1531     06E3  09F9               	comf	___awdiv@dividend+1,f
  1532     06E4  0AF8               	incf	___awdiv@dividend,f
  1533     06E5  1903               	skipnz
  1534     06E6  0AF9               	incf	___awdiv@dividend+1,f
  1535     06E7                     l864:
  1536     06E7  3001               	movlw	1
  1537     06E8  06FB               	xorwf	___awdiv@sign,f
  1538     06E9                     l866:
  1539     06E9  01FC               	clrf	___awdiv@quotient
  1540     06EA  01FD               	clrf	___awdiv@quotient+1
  1541     06EB                     l868:
  1542     06EB  0876               	movf	___awdiv@divisor,w
  1543     06EC  0477               	iorwf	___awdiv@divisor+1,w
  1544     06ED  1903               	btfsc	3,2
  1545     06EE  2EF0               	goto	u391
  1546     06EF  2EF1               	goto	u390
  1547     06F0                     u391:
  1548     06F0  2F26               	goto	l888
  1549     06F1                     u390:
  1550     06F1                     l870:
  1551     06F1  3001               	movlw	1
  1552     06F2  00FA               	movwf	___awdiv@counter
  1553     06F3  2EFD               	goto	l876
  1554     06F4                     l872:
  1555     06F4  3001               	movlw	1
  1556     06F5                     u405:
  1557     06F5  1003               	clrc
  1558     06F6  0DF6               	rlf	___awdiv@divisor,f
  1559     06F7  0DF7               	rlf	___awdiv@divisor+1,f
  1560     06F8  3EFF               	addlw	-1
  1561     06F9  1D03               	skipz
  1562     06FA  2EF5               	goto	u405
  1563     06FB                     l874:
  1564     06FB  3001               	movlw	1
  1565     06FC  07FA               	addwf	___awdiv@counter,f
  1566     06FD                     l876:
  1567     06FD  1FF7               	btfss	___awdiv@divisor+1,7
  1568     06FE  2F00               	goto	u411
  1569     06FF  2F01               	goto	u410
  1570     0700                     u411:
  1571     0700  2EF4               	goto	l872
  1572     0701                     u410:
  1573     0701                     l878:
  1574     0701  3001               	movlw	1
  1575     0702                     u425:
  1576     0702  1003               	clrc
  1577     0703  0DFC               	rlf	___awdiv@quotient,f
  1578     0704  0DFD               	rlf	___awdiv@quotient+1,f
  1579     0705  3EFF               	addlw	-1
  1580     0706  1D03               	skipz
  1581     0707  2F02               	goto	u425
  1582     0708  0877               	movf	___awdiv@divisor+1,w
  1583     0709  0279               	subwf	___awdiv@dividend+1,w
  1584     070A  1D03               	skipz
  1585     070B  2F0E               	goto	u435
  1586     070C  0876               	movf	___awdiv@divisor,w
  1587     070D  0278               	subwf	___awdiv@dividend,w
  1588     070E                     u435:
  1589     070E  1C03               	skipc
  1590     070F  2F11               	goto	u431
  1591     0710  2F12               	goto	u430
  1592     0711                     u431:
  1593     0711  2F19               	goto	l884
  1594     0712                     u430:
  1595     0712                     l880:
  1596     0712  0876               	movf	___awdiv@divisor,w
  1597     0713  02F8               	subwf	___awdiv@dividend,f
  1598     0714  0877               	movf	___awdiv@divisor+1,w
  1599     0715  1C03               	skipc
  1600     0716  03F9               	decf	___awdiv@dividend+1,f
  1601     0717  02F9               	subwf	___awdiv@dividend+1,f
  1602     0718                     l882:
  1603     0718  147C               	bsf	___awdiv@quotient,0
  1604     0719                     l884:
  1605     0719  3001               	movlw	1
  1606     071A                     u445:
  1607     071A  1003               	clrc
  1608     071B  0CF7               	rrf	___awdiv@divisor+1,f
  1609     071C  0CF6               	rrf	___awdiv@divisor,f
  1610     071D  3EFF               	addlw	-1
  1611     071E  1D03               	skipz
  1612     071F  2F1A               	goto	u445
  1613     0720                     l886:
  1614     0720  3001               	movlw	1
  1615     0721  02FA               	subwf	___awdiv@counter,f
  1616     0722  1D03               	btfss	3,2
  1617     0723  2F25               	goto	u451
  1618     0724  2F26               	goto	u450
  1619     0725                     u451:
  1620     0725  2F01               	goto	l878
  1621     0726                     u450:
  1622     0726                     l888:
  1623     0726  087B               	movf	___awdiv@sign,w
  1624     0727  1903               	btfsc	3,2
  1625     0728  2F2A               	goto	u461
  1626     0729  2F2B               	goto	u460
  1627     072A                     u461:
  1628     072A  2F30               	goto	l892
  1629     072B                     u460:
  1630     072B                     l890:
  1631     072B  09FC               	comf	___awdiv@quotient,f
  1632     072C  09FD               	comf	___awdiv@quotient+1,f
  1633     072D  0AFC               	incf	___awdiv@quotient,f
  1634     072E  1903               	skipnz
  1635     072F  0AFD               	incf	___awdiv@quotient+1,f
  1636     0730                     l892:
  1637     0730  087D               	movf	___awdiv@quotient+1,w
  1638     0731  00F7               	movwf	?___awdiv+1
  1639     0732  087C               	movf	___awdiv@quotient,w
  1640     0733  00F6               	movwf	?___awdiv
  1641     0734                     l323:
  1642     0734  0008               	return
  1643     0735                     __end_of___awdiv:
  1644                           
  1645                           	psect	text9
  1646     056C                     __ptext9:	
  1647 ;; *************** function _clock_SR *****************
  1648 ;; Defined at:
  1649 ;;		line 124 in file "main.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;		None
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;		None
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  1    wreg      void 
  1656 ;; Registers used:
  1657 ;;		wreg
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1663 ;;      Params:         0       0       0       0
  1664 ;;      Locals:         0       0       0       0
  1665 ;;      Temps:          1       0       0       0
  1666 ;;      Totals:         1       0       0       0
  1667 ;;Total ram usage:        1 bytes
  1668 ;; Hardware stack levels used: 1
  1669 ;; This function calls:
  1670 ;;		Nothing
  1671 ;; This function is called by:
  1672 ;;		_main
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676     056C                     _clock_SR:	
  1677                           ;psect for function _clock_SR
  1678                           
  1679     056C                     l950:	
  1680                           ;incstack = 0
  1681                           ; Regs used in _clock_SR: [wreg]
  1682                           
  1683                           
  1684                           ;main.c: 126:     PORTBbits.RB6 = 1;
  1685     056C  1283               	bcf	3,5	;RP0=0, select bank0
  1686     056D  1303               	bcf	3,6	;RP1=0, select bank0
  1687     056E  1706               	bsf	6,6	;volatile
  1688     056F                     l952:
  1689                           
  1690                           ;main.c: 127:     _delay((unsigned long)((10)*(20000000/4000000.0)));
  1691     056F  3010               	movlw	16
  1692     0570  00F0               	movwf	??_clock_SR
  1693     0571                     u647:
  1694     0571  0BF0               	decfsz	??_clock_SR,f
  1695     0572  2D71               	goto	u647
  1696     0573  0000               	nop
  1697     0574                     l954:
  1698                           
  1699                           ;main.c: 128:     PORTBbits.RB6 = 0;
  1700     0574  1283               	bcf	3,5	;RP0=0, select bank0
  1701     0575  1303               	bcf	3,6	;RP1=0, select bank0
  1702     0576  1306               	bcf	6,6	;volatile
  1703     0577                     l63:
  1704     0577  0008               	return
  1705     0578                     __end_of_clock_SR:
  1706     0001                     ___latbits      equ	1
  1707     007E                     btemp           set	126	;btemp
  1708     007E                     wtemp0          set	126
  1709                           
  1710                           	psect	config
  1711                           
  1712                           ;Config register CONFIG @ 0x2007
  1713                           ;	Oscillator Selection bits
  1714                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  1715                           ;	Watchdog Timer Enable bit
  1716                           ;	WDTE = OFF, WDT disabled
  1717                           ;	Power-up Timer Enable bit
  1718                           ;	PWRTE = ON, PWRT enabled
  1719                           ;	RA5/MCLR/VPP Pin Function Select bit
  1720                           ;	MCLRE = ON, RA5/MCLR/VPP pin function is MCLR
  1721                           ;	Brown-out Detect Enable bit
  1722                           ;	BOREN = OFF, BOD disabled
  1723                           ;	Low-Voltage Programming Enable bit
  1724                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  1725                           ;	Data EE Memory Code Protection bit
  1726                           ;	CPD = OFF, Data memory code protection off
  1727                           ;	Flash Program Memory Code Protection bit
  1728                           ;	CP = OFF, Code protection off
  1729     2007                     	org	8199
  1730     2007  3F22               	dw	16162

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         48
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      78
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    decode_value@code	PTR int  size(1) Largest target is 16
		 -> USER_INPUT(BANK0[16]), 


Critical Paths under _main in COMMON

    _beep->___awdiv
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    _main->_decode_value
    _decode_value->_beep

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0    1597
                                             16 BANK0     12    12      0
                               _beep
                           _clock_SR
                       _decode_value
                    _initialize_pins
                        _push_output
 ---------------------------------------------------------------------------------
 (1) _push_output                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initialize_pins                                      3     3      0     156
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _decode_value                                         7     6      1     673
                                              9 BANK0      7     6      1
                               _beep
                              _flash
 ---------------------------------------------------------------------------------
 (2) _flash                                                3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _beep                                                 9     7      2     582
                                              0 BANK0      9     7      2
                            ___awdiv
                             ___wmul
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             5     3      2      48
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4      94
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     302
                                              6 COMMON     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _clock_SR                                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beep
     ___awdiv
       ___wmul (ARG)
     ___wmul
     _delay_us
   _clock_SR
   _decode_value
     _beep
     _flash
   _initialize_pins
   _push_output

Address spaces:
Name               Size   Autos  Total    Usage
BANK2               80      0       0      0.0%
BITBANK2            80      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80     28      78     97.5%
BITBANK0            80      0       0      0.0%
COMMON              14     14      14    100.0%
BITCOMMON           14      0       0      0.0%
DATA                 0      0      92      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sun Dec 01 14:28:16 2024

             _USER_INPUT 0040                       l31 06D1                       l41 064F  
                     l34 0590                       l35 0587                       l43 0679  
                     l60 0629                       l28 06CF                       l37 059E  
                     l46 05EF                       l63 0577                       l66 0583  
                     l77 0785                       l79 07B1             ___awdiv@sign 007B  
                     fsr 0004      ___wmul@multiplicand 0072                      l170 05AB  
                    l323 0734                      l172 05C3                      l900 064C  
                    l902 0652                      l910 05C4                      l840 05A1  
                    l904 0659                      l912 05D3                      l842 05A5  
                    l834 0584                      l906 0663                      l914 05E0  
                    l930 06BC                      l860 06DE                      l852 06D2  
                    l844 05B2                      l836 058A                      l908 066B  
                    l940 05F4                      l932 06C2                      l924 068D  
                    l916 067A                      l950 056C                      l870 06F1  
                    l862 06E2                      l854 06D3                      l846 05B9  
                    l838 059F                      l942 0609                      l934 05F0  
                    l926 0693                      l918 068B                      l952 056F  
                    l880 0712                      l872 06F4                      l864 06E7  
                    l856 06D7                      l848 05BF                      l944 0611  
                    l928 06A9                      l960 0580                      l954 0574  
                    l890 072B                      l882 0718                      l874 06FB  
                    l866 06E9                      l858 06DC                      l946 0614  
                    l970 073E                      l962 0735                      l892 0730  
                    l884 0719                      l876 06FD                      l868 06EB  
                    l948 061C                      l956 0578                      l980 075D  
                    l972 0740                      l964 0738                      l886 0720  
                    l878 0701                      l958 057B                      l990 0788  
                    l982 0760                      l974 0741                      l966 073B  
                    l888 0726                      l896 062A                      l992 078B  
                    l984 0763                      l976 0747                      l968 073C  
                    l898 0630                      l994 078E                      l986 0766  
                    l978 074E                      l996 0797                      l988 076E  
                    u320 059E                      u321 059D                      u410 0701  
                    u330 05A5                      u411 0700                      u331 05A4  
                    u500 05EC                      u405 06F5                      u325 059A  
                    u501 05E8                      u430 0712                      u431 0711  
                    u360 05BF                      u520 0693                      u600 07E4  
                    u425 0702                      u361 05BE                      u345 05AC  
                    u521 0692                      u601 07E3                      u450 0726  
                    u370 06D7                      u514 05EF                      u530 06CF  
                    u451 0725                      u435 070E                      u371 06D6  
                    u355 05B3                      u531 06CE                      u460 072B  
                    u380 06E2                      u540 0609                      u461 072A  
                    u445 071A                      u381 06E1                      u541 0608  
                    u390 06F1                      u470 0679                      u550 0629  
                    u391 06F0                      u471 0678                      u551 0628  
                    u535 06CB                      u480 05D0                      u560 0747  
                    u481 05CC                      u617 0756                      u561 0746  
                    u570 0785                      u475 0675                      u555 0625  
                    u627 057D                      u571 0784                      u580 07A4  
                    u637 05D9                      u581 07A3                      u494 05D3  
                    u590 07D5                      u647 0571                      u591 07D4  
                    u575 0781                      u585 07A0     __end_of_decode_value 062A  
                    fsr0 0004                      indf 0000              _push_output 0578  
                   l1000 07A5                     l1010 07C8                     l1002 07A8  
                   l1020 07E4                     l1012 07CE                     l1022 07E6  
                   l1014 07D5                     l1006 07B4                     l1016 07D7  
                   l1008 07B7                     l1018 07DD              _outputIndex 003C  
                   _beep 062A                     _main 0735                     _open 006C  
                   btemp 007E                     start 0000                    ?_beep 0050  
                  ?_main 0070          __end_of___awdiv 0735                    _CMCON 001F  
        ___awdiv@divisor 0076          ___awdiv@counter 007A             _outputPinpad 002E  
      ??_initialize_pins 0070                    beep@i 0055                    _flash 05C4  
                  main@i 0064                    status 0003                    wtemp0 007E  
        __initialization 07EE             __end_of_beep 067A             __end_of_main 07EE  
                 ??_beep 0052                   ??_main 0060                   ?_flash 0070  
       ___awdiv@dividend 0078         __end_of_delay_us 059F         __end_of_clock_SR 0578  
                 ___wmul 059F                ??___awdiv 007A         ___awdiv@quotient 007C  
__end_of__initialization 07FD             _decode_value 05F0           __pcstackCOMMON 0070  
           __pidataBANK0 0562            __end_of_flash 05F0             ?_push_output 0070  
                ??_flash 0070               __pbssBANK0 0020            decode_value@i 005E  
             __pmaintext 0735                  ?___wmul 0070          _initialize_pins 067A  
              ?_delay_us 0070                ?_clock_SR 0070         beep@total_cycles 0053  
                ___awdiv 06D2                  __ptext1 0578                  __ptext2 067A  
                __ptext3 05F0                  __ptext4 05C4                  __ptext5 062A  
                __ptext6 0584                  __ptext7 059F                  __ptext8 06D2  
                __ptext9 056C               ??_delay_us 0072               ??_clock_SR 0070  
                clrloop0 0565     end_of_initialization 07FD  __end_of_initialize_pins 06D2  
        beep@duration_ms 0050                _PORTAbits 0005                _PORTBbits 0006  
              _TRISAbits 0085                _TRISBbits 0086         initialize_pins@i 0071  
         __end_of___wmul 05C4         decode_value@code 0059      start_initialization 07EE  
       ?_initialize_pins 0070                 ??___wmul 0074              __pdataBANK0 006C  
              ___latbits 0001            __pcstackBANK0 0050                 ?___awdiv 0076  
     beep@half_period_us 0057           ___wmul@product 0074                delay_us@i 0073  
              clear_ram0 0564                main@i_226 0068        ___wmul@multiplier 0070  
              main@cycle 0066                main@itter 006A             delay_us@time 0070  
          ?_decode_value 0059            ??_push_output 0070                 _delay_us 0584  
               _clock_SR 056C           ??_decode_value 005A              _inputPinpad 0020  
             _INTCONbits 000B      __end_of_push_output 0584              _sensorIndex 003E  
