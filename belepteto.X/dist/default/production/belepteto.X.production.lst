

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sat Nov 30 18:50:43 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F648A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,space=0,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    12                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2,group=1
    16                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=1
    19                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=1
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22     0000                     
    23                           ; Generated 12/10/2023 GMT
    24                           ; 
    25                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F648A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57     0004                     fsr             equ	4
    58     0004                     fsr0            equ	4
    59     0000                     indf            equ	0
    60     0000                     indf0           equ	0
    61     0002                     pc              equ	2
    62     0002                     pcl             equ	2
    63     000A                     pclath          equ	10
    64     0003                     status          equ	3
    65     0000                     INDF            equ	0	;# 
    66     0001                     TMR0            equ	1	;# 
    67     0002                     PCL             equ	2	;# 
    68     0003                     STATUS          equ	3	;# 
    69     0004                     FSR             equ	4	;# 
    70     0005                     PORTA           equ	5	;# 
    71     0006                     PORTB           equ	6	;# 
    72     000A                     PCLATH          equ	10	;# 
    73     000B                     INTCON          equ	11	;# 
    74     000C                     PIR1            equ	12	;# 
    75     000E                     TMR1            equ	14	;# 
    76     000E                     TMR1L           equ	14	;# 
    77     000F                     TMR1H           equ	15	;# 
    78     0010                     T1CON           equ	16	;# 
    79     0011                     TMR2            equ	17	;# 
    80     0012                     T2CON           equ	18	;# 
    81     0015                     CCPR1           equ	21	;# 
    82     0015                     CCPR1L          equ	21	;# 
    83     0016                     CCPR1H          equ	22	;# 
    84     0017                     CCP1CON         equ	23	;# 
    85     0018                     RCSTA           equ	24	;# 
    86     0019                     TXREG           equ	25	;# 
    87     001A                     RCREG           equ	26	;# 
    88     001F                     CMCON           equ	31	;# 
    89     0081                     OPTION_REG      equ	129	;# 
    90     0085                     TRISA           equ	133	;# 
    91     0086                     TRISB           equ	134	;# 
    92     008C                     PIE1            equ	140	;# 
    93     008E                     PCON            equ	142	;# 
    94     0092                     PR2             equ	146	;# 
    95     0098                     TXSTA           equ	152	;# 
    96     0099                     SPBRG           equ	153	;# 
    97     009A                     EEDATA          equ	154	;# 
    98     009B                     EEADR           equ	155	;# 
    99     009C                     EECON1          equ	156	;# 
   100     009D                     EECON2          equ	157	;# 
   101     009F                     VRCON           equ	159	;# 
   102     0000                     INDF            equ	0	;# 
   103     0001                     TMR0            equ	1	;# 
   104     0002                     PCL             equ	2	;# 
   105     0003                     STATUS          equ	3	;# 
   106     0004                     FSR             equ	4	;# 
   107     0005                     PORTA           equ	5	;# 
   108     0006                     PORTB           equ	6	;# 
   109     000A                     PCLATH          equ	10	;# 
   110     000B                     INTCON          equ	11	;# 
   111     000C                     PIR1            equ	12	;# 
   112     000E                     TMR1            equ	14	;# 
   113     000E                     TMR1L           equ	14	;# 
   114     000F                     TMR1H           equ	15	;# 
   115     0010                     T1CON           equ	16	;# 
   116     0011                     TMR2            equ	17	;# 
   117     0012                     T2CON           equ	18	;# 
   118     0015                     CCPR1           equ	21	;# 
   119     0015                     CCPR1L          equ	21	;# 
   120     0016                     CCPR1H          equ	22	;# 
   121     0017                     CCP1CON         equ	23	;# 
   122     0018                     RCSTA           equ	24	;# 
   123     0019                     TXREG           equ	25	;# 
   124     001A                     RCREG           equ	26	;# 
   125     001F                     CMCON           equ	31	;# 
   126     0081                     OPTION_REG      equ	129	;# 
   127     0085                     TRISA           equ	133	;# 
   128     0086                     TRISB           equ	134	;# 
   129     008C                     PIE1            equ	140	;# 
   130     008E                     PCON            equ	142	;# 
   131     0092                     PR2             equ	146	;# 
   132     0098                     TXSTA           equ	152	;# 
   133     0099                     SPBRG           equ	153	;# 
   134     009A                     EEDATA          equ	154	;# 
   135     009B                     EEADR           equ	155	;# 
   136     009C                     EECON1          equ	156	;# 
   137     009D                     EECON2          equ	157	;# 
   138     009F                     VRCON           equ	159	;# 
   139                           
   140                           	psect	idataBANK0
   141     0528                     __pidataBANK0:
   142                           
   143                           ;initializer for _open
   144     0528  3401               	retlw	1
   145     0529  3400               	retlw	0
   146     0006                     _PORTBbits      set	6
   147     000B                     _INTCONbits     set	11
   148     0005                     _PORTAbits      set	5
   149     001F                     _CMCON          set	31
   150     0085                     _TRISAbits      set	133
   151     0086                     _TRISBbits      set	134
   152                           
   153                           	psect	cinit
   154     07EE                     start_initialization:	
   155                           ; #config settings
   156                           
   157     07EE                     __initialization:
   158                           
   159                           ; Initialize objects allocated to BANK0
   160     07EE  118A  2528  118A   	fcall	__pidataBANK0	;fetch initializer
   161     07F1  00DA               	movwf	__pdataBANK0& (0+127)
   162     07F2  118A  2529  118A   	fcall	__pidataBANK0+1	;fetch initializer
   163     07F5  00DB               	movwf	(__pdataBANK0+1)& (0+127)
   164                           
   165                           ; Clear objects allocated to BANK0
   166     07F6  1383               	bcf	3,7	;select IRP bank0
   167     07F7  3020               	movlw	low __pbssBANK0
   168     07F8  0084               	movwf	4
   169     07F9  304E               	movlw	low (__pbssBANK0+46)
   170     07FA  118A  252A  118A   	fcall	clear_ram0
   171     07FD                     end_of_initialization:	
   172                           ;End of C runtime variable initialization code
   173                           
   174     07FD                     __end_of__initialization:
   175     07FD  0183               	clrf	3
   176     07FE  118A  2F50         	ljmp	_main	;jump to C main() function
   177                           
   178                           	psect	bssBANK0
   179     0020                     __pbssBANK0:
   180     0020                     _USER_INPUT:
   181     0020                     	ds	14
   182     002E                     _input_pinpad:
   183     002E                     	ds	14
   184     003C                     _output_index:
   185     003C                     	ds	2
   186     003E                     _sensor_index:
   187     003E                     	ds	2
   188     0040                     _output_pinpad:
   189     0040                     	ds	14
   190                           
   191                           	psect	dataBANK0
   192     005A                     __pdataBANK0:
   193     005A                     _open:
   194     005A                     	ds	2
   195                           
   196                           	psect	clrtext
   197     052A                     clear_ram0:	
   198                           ;	Called with FSR containing the base address, and
   199                           ;	W with the last address+1
   200                           
   201     052A  0064               	clrwdt	;clear the watchdog before getting into this loop
   202     052B                     clrloop0:
   203     052B  0180               	clrf	0	;clear RAM location pointed to by FSR
   204     052C  0A84               	incf	4,f	;increment pointer
   205     052D  0604               	xorwf	4,w	;XOR with final address
   206     052E  1903               	btfsc	3,2	;have we reached the end yet?
   207     052F  3400               	retlw	0	;all done for this memory range, return
   208     0530  0604               	xorwf	4,w	;XOR again to restore value
   209     0531  2D2B               	goto	clrloop0	;do the next byte
   210                           
   211                           	psect	cstackCOMMON
   212     0070                     __pcstackCOMMON:
   213     0070                     ?_initialize_pins:
   214     0070                     ?_delay_us:	
   215                           ; 1 bytes @ 0x0
   216                           
   217     0070                     ?_main:	
   218                           ; 1 bytes @ 0x0
   219                           
   220     0070                     ?_decodeValue:	
   221                           ; 1 bytes @ 0x0
   222                           
   223     0070                     ?___wmul:	
   224                           ; 2 bytes @ 0x0
   225                           
   226     0070                     ?___awmod:	
   227                           ; 2 bytes @ 0x0
   228                           
   229     0070                     decodeValue@code:	
   230                           ; 2 bytes @ 0x0
   231                           
   232     0070                     delay_us@time:	
   233                           ; 1 bytes @ 0x0
   234                           
   235     0070                     ___wmul@multiplier:	
   236                           ; 2 bytes @ 0x0
   237                           
   238     0070                     ___awmod@divisor:	
   239                           ; 2 bytes @ 0x0
   240                           
   241     0070                     ??_initialize_pins:	
   242                           ; 2 bytes @ 0x0
   243                           
   244                           
   245                           ; 1 bytes @ 0x0
   246     0070                     	ds	1
   247     0071                     initialize_pins@i:
   248                           
   249                           ; 2 bytes @ 0x1
   250     0071                     	ds	1
   251     0072                     ___wmul@multiplicand:
   252     0072                     ___awmod@dividend:	
   253                           ; 2 bytes @ 0x2
   254                           
   255     0072                     ??_delay_us:	
   256                           ; 2 bytes @ 0x2
   257                           
   258     0072                     ??_decodeValue:	
   259                           ; 1 bytes @ 0x2
   260                           
   261                           
   262                           ; 1 bytes @ 0x2
   263     0072                     	ds	1
   264     0073                     delay_us@i:
   265                           
   266                           ; 2 bytes @ 0x3
   267     0073                     	ds	1
   268     0074                     ___awmod@counter:
   269     0074                     ___wmul@product:	
   270                           ; 1 bytes @ 0x4
   271                           
   272     0074                     ??___wmul:	
   273                           ; 2 bytes @ 0x4
   274                           
   275     0074                     ??___awmod:	
   276                           ; 1 bytes @ 0x4
   277                           
   278                           
   279                           ; 1 bytes @ 0x4
   280     0074                     	ds	1
   281     0075                     ___awmod@sign:
   282                           
   283                           ; 1 bytes @ 0x5
   284     0075                     	ds	1
   285     0076                     ?_cycleOutput:
   286     0076                     ?___awdiv:	
   287                           ; 1 bytes @ 0x6
   288                           
   289     0076                     cycleOutput@list:	
   290                           ; 2 bytes @ 0x6
   291                           
   292     0076                     ___awdiv@divisor:	
   293                           ; 1 bytes @ 0x6
   294                           
   295                           
   296                           ; 2 bytes @ 0x6
   297     0076                     	ds	1
   298     0077                     cycleOutput@size:
   299                           
   300                           ; 2 bytes @ 0x7
   301     0077                     	ds	1
   302     0078                     ___awdiv@dividend:
   303                           
   304                           ; 2 bytes @ 0x8
   305     0078                     	ds	1
   306     0079                     ??_cycleOutput:
   307                           
   308                           ; 1 bytes @ 0x9
   309     0079                     	ds	1
   310     007A                     ___awdiv@counter:
   311     007A                     ??___awdiv:	
   312                           ; 1 bytes @ 0xA
   313                           
   314                           
   315                           ; 1 bytes @ 0xA
   316     007A                     	ds	1
   317     007B                     ___awdiv@sign:
   318                           
   319                           ; 1 bytes @ 0xB
   320     007B                     	ds	1
   321     007C                     ___awdiv@quotient:
   322                           
   323                           ; 2 bytes @ 0xC
   324     007C                     	ds	2
   325                           
   326                           	psect	cstackBANK0
   327     004E                     __pcstackBANK0:
   328     004E                     ?_beep:
   329     004E                     beep@duration_ms:	
   330                           ; 1 bytes @ 0x0
   331                           
   332     004E                     cycleOutput@nextIndex:	
   333                           ; 2 bytes @ 0x0
   334                           
   335                           
   336                           ; 2 bytes @ 0x0
   337     004E                     	ds	2
   338     0050                     cycleOutput@currentIndex:
   339     0050                     ??_beep:	
   340                           ; 2 bytes @ 0x2
   341                           
   342                           
   343                           ; 1 bytes @ 0x2
   344     0050                     	ds	1
   345     0051                     beep@total_cycles:
   346                           
   347                           ; 2 bytes @ 0x3
   348     0051                     	ds	1
   349     0052                     cycleOutput@i:
   350                           
   351                           ; 2 bytes @ 0x4
   352     0052                     	ds	1
   353     0053                     beep@i:
   354                           
   355                           ; 2 bytes @ 0x5
   356     0053                     	ds	2
   357     0055                     beep@half_period_us:
   358                           
   359                           ; 2 bytes @ 0x7
   360     0055                     	ds	2
   361     0057                     ??_main:
   362                           
   363                           ; 1 bytes @ 0x9
   364     0057                     	ds	3
   365                           
   366                           	psect	maintext
   367     0750                     __pmaintext:	
   368 ;;
   369 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   370 ;;
   371 ;; *************** function _main *****************
   372 ;; Defined at:
   373 ;;		line 161 in file "main.c"
   374 ;; Parameters:    Size  Location     Type
   375 ;;		None
   376 ;; Auto vars:     Size  Location     Type
   377 ;;		None
   378 ;; Return value:  Size  Location     Type
   379 ;;                  1    wreg      void 
   380 ;; Registers used:
   381 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   382 ;; Tracked objects:
   383 ;;		On entry : B00/0
   384 ;;		On exit  : 0/0
   385 ;;		Unchanged: 0/0
   386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   387 ;;      Params:         0       0       0       0
   388 ;;      Locals:         0       0       0       0
   389 ;;      Temps:          0       3       0       0
   390 ;;      Totals:         0       3       0       0
   391 ;;Total ram usage:        3 bytes
   392 ;; Hardware stack levels required when called: 2
   393 ;; This function calls:
   394 ;;		_beep
   395 ;;		_cycleOutput
   396 ;;		_decodeValue
   397 ;;		_initialize_pins
   398 ;; This function is called by:
   399 ;;		Startup code after reset
   400 ;; This function uses a non-reentrant model
   401 ;;
   402                           
   403     0750                     _main:	
   404                           ;psect for function _main
   405                           
   406     0750                     l1002:	
   407                           ;incstack = 0
   408                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   409                           
   410                           
   411                           ;main.c: 162:     initialize_pins();
   412     0750  118A  262F  118A   	fcall	_initialize_pins
   413     0753                     l1004:
   414                           
   415                           ;main.c: 164:     _delay((unsigned long)((10)*(20000000/4000.0)));
   416     0753  3041               	movlw	65
   417     0754  1283               	bcf	3,5	;RP0=0, select bank0
   418     0755  1303               	bcf	3,6	;RP1=0, select bank0
   419     0756  00D8               	movwf	??_main+1
   420     0757  30EE               	movlw	238
   421     0758  00D7               	movwf	??_main
   422     0759                     u697:
   423     0759  0BD7               	decfsz	??_main,f
   424     075A  2F59               	goto	u697
   425     075B  0BD8               	decfsz	??_main+1,f
   426     075C  2F59               	goto	u697
   427     075D                     l1006:
   428                           
   429                           ;main.c: 165:     PORTBbits.RB2 = 1;
   430     075D  1283               	bcf	3,5	;RP0=0, select bank0
   431     075E  1303               	bcf	3,6	;RP1=0, select bank0
   432     075F  1506               	bsf	6,2	;volatile
   433     0760                     l1008:
   434                           
   435                           ;main.c: 167:     PORTBbits.RB0 = 0;
   436     0760  1006               	bcf	6,0	;volatile
   437     0761                     l1010:
   438                           
   439                           ;main.c: 170:         if (PORTAbits.RA2 == 0) {
   440     0761  1905               	btfsc	5,2	;volatile
   441     0762  2F64               	goto	u651
   442     0763  2F65               	goto	u650
   443     0764                     u651:
   444     0764  2F7B               	goto	l1016
   445     0765                     u650:
   446     0765                     l1012:
   447                           
   448                           ;main.c: 171:             beep(1000);
   449     0765  30E8               	movlw	232
   450     0766  00CE               	movwf	beep@duration_ms
   451     0767  3003               	movlw	3
   452     0768  00CF               	movwf	beep@duration_ms+1
   453     0769  118A  2588  118A   	fcall	_beep
   454     076C                     l1014:
   455                           
   456                           ;main.c: 173:             _delay((unsigned long)((50)*(20000000/4000.0)));
   457     076C  3002               	movlw	2
   458     076D  1283               	bcf	3,5	;RP0=0, select bank0
   459     076E  1303               	bcf	3,6	;RP1=0, select bank0
   460     076F  00D9               	movwf	??_main+2
   461     0770  3045               	movlw	69
   462     0771  00D8               	movwf	??_main+1
   463     0772  30A9               	movlw	169
   464     0773  00D7               	movwf	??_main
   465     0774                     u707:
   466     0774  0BD7               	decfsz	??_main,f
   467     0775  2F74               	goto	u707
   468     0776  0BD8               	decfsz	??_main+1,f
   469     0777  2F74               	goto	u707
   470     0778  0BD9               	decfsz	??_main+2,f
   471     0779  2F74               	goto	u707
   472     077A  0000               	nop
   473     077B                     l1016:
   474                           
   475                           ;main.c: 178:         PORTBbits.RB6 = 1;
   476     077B  1283               	bcf	3,5	;RP0=0, select bank0
   477     077C  1303               	bcf	3,6	;RP1=0, select bank0
   478     077D  1706               	bsf	6,6	;volatile
   479     077E                     l1018:
   480                           
   481                           ;main.c: 179:         if(output_index< 7)
   482     077E  083D               	movf	_output_index+1,w
   483     077F  3A80               	xorlw	128
   484     0780  00FF               	movwf	btemp+1
   485     0781  3080               	movlw	128
   486     0782  027F               	subwf	btemp+1,w
   487     0783  1D03               	skipz
   488     0784  2F87               	goto	u665
   489     0785  3007               	movlw	7
   490     0786  023C               	subwf	_output_index,w
   491     0787                     u665:
   492     0787  1803               	skipnc
   493     0788  2F8A               	goto	u661
   494     0789  2F8B               	goto	u660
   495     078A                     u661:
   496     078A  2FD4               	goto	l1036
   497     078B                     u660:
   498     078B                     l1020:
   499                           
   500                           ;main.c: 180:         {;main.c: 182:             if (sensor_index < 7) {
   501     078B  1283               	bcf	3,5	;RP0=0, select bank0
   502     078C  1303               	bcf	3,6	;RP1=0, select bank0
   503     078D  083F               	movf	_sensor_index+1,w
   504     078E  3A80               	xorlw	128
   505     078F  00FF               	movwf	btemp+1
   506     0790  3080               	movlw	128
   507     0791  027F               	subwf	btemp+1,w
   508     0792  1D03               	skipz
   509     0793  2F96               	goto	u675
   510     0794  3007               	movlw	7
   511     0795  023E               	subwf	_sensor_index,w
   512     0796                     u675:
   513     0796  1803               	skipnc
   514     0797  2F99               	goto	u671
   515     0798  2F9A               	goto	u670
   516     0799                     u671:
   517     0799  2FAE               	goto	l1026
   518     079A                     u670:
   519     079A                     l1022:
   520                           
   521                           ;main.c: 183:                 PORTBbits.RB7 = input_pinpad[sensor_index];
   522     079A  1283               	bcf	3,5	;RP0=0, select bank0
   523     079B  1303               	bcf	3,6	;RP1=0, select bank0
   524     079C  083E               	movf	_sensor_index,w
   525     079D  00D7               	movwf	??_main
   526     079E  0757               	addwf	??_main,w
   527     079F  3E2E               	addlw	(low (_input_pinpad| 0))& (0+255)
   528     07A0  0084               	movwf	4
   529     07A1  1383               	bcf	3,7	;select IRP bank0
   530     07A2  0C00               	rrf	0,w
   531     07A3  1C03               	skipc
   532     07A4  1386               	bcf	6,7	;volatile
   533     07A5  1803               	skipnc
   534     07A6  1786               	bsf	6,7	;volatile
   535     07A7                     l1024:
   536                           
   537                           ;main.c: 184:                 sensor_index++;
   538     07A7  3001               	movlw	1
   539     07A8  07BE               	addwf	_sensor_index,f
   540     07A9  1803               	skipnc
   541     07AA  0ABF               	incf	_sensor_index+1,f
   542     07AB  3000               	movlw	0
   543     07AC  07BF               	addwf	_sensor_index+1,f
   544                           
   545                           ;main.c: 186:             }
   546     07AD  2FE1               	goto	l1040
   547     07AE                     l1026:
   548                           
   549                           ;main.c: 188:             {;main.c: 190:                 output_pinpad[output_index] = P
      +                          ORTAbits.RA1;
   550     07AE  1283               	bcf	3,5	;RP0=0, select bank0
   551     07AF  1303               	bcf	3,6	;RP1=0, select bank0
   552     07B0  0C05               	rrf	5,w	;volatile
   553     07B1  3901               	andlw	1
   554     07B2  00D7               	movwf	??_main
   555     07B3  01D8               	clrf	??_main+1
   556     07B4  083C               	movf	_output_index,w
   557     07B5  00D9               	movwf	??_main+2
   558     07B6  0759               	addwf	??_main+2,w
   559     07B7  3E40               	addlw	(low (_output_pinpad| 0))& (0+255)
   560     07B8  0084               	movwf	4
   561     07B9  0857               	movf	??_main,w
   562     07BA  1383               	bcf	3,7	;select IRP bank0
   563     07BB  0080               	movwf	0
   564     07BC  0A84               	incf	4,f
   565     07BD  0858               	movf	??_main+1,w
   566     07BE  0080               	movwf	0
   567     07BF                     l1028:
   568                           
   569                           ;main.c: 191:                 sensor_index = 0;
   570     07BF  01BE               	clrf	_sensor_index
   571     07C0  01BF               	clrf	_sensor_index+1
   572     07C1                     l1030:
   573                           
   574                           ;main.c: 192:                 cycleOutput(output_pinpad, 7);
   575     07C1  3040               	movlw	(low (_output_pinpad| 0))& (0+255)
   576     07C2  00F6               	movwf	cycleOutput@list
   577     07C3  3007               	movlw	7
   578     07C4  00F7               	movwf	cycleOutput@size
   579     07C5  3000               	movlw	0
   580     07C6  00F8               	movwf	cycleOutput@size+1
   581     07C7  118A  26EA  118A   	fcall	_cycleOutput
   582     07CA                     l1032:
   583                           
   584                           ;main.c: 193:                 output_index++;
   585     07CA  3001               	movlw	1
   586     07CB  1283               	bcf	3,5	;RP0=0, select bank0
   587     07CC  1303               	bcf	3,6	;RP1=0, select bank0
   588     07CD  07BC               	addwf	_output_index,f
   589     07CE  1803               	skipnc
   590     07CF  0ABD               	incf	_output_index+1,f
   591     07D0  3000               	movlw	0
   592     07D1  07BD               	addwf	_output_index+1,f
   593     07D2                     l1034:
   594                           
   595                           ;main.c: 194:                 PORTBbits.RB7 = 0;
   596     07D2  1386               	bcf	6,7	;volatile
   597     07D3  2FE1               	goto	l1040
   598     07D4                     l1036:
   599                           
   600                           ;main.c: 199:         {;main.c: 200:             open = decodeValue(output_pinpad);
   601     07D4  3040               	movlw	(low (_output_pinpad| 0))& (0+255)
   602     07D5  00F0               	movwf	decodeValue@code
   603     07D6  118A  2532  118A   	fcall	_decodeValue
   604     07D9  0871               	movf	?_decodeValue+1,w
   605     07DA  1283               	bcf	3,5	;RP0=0, select bank0
   606     07DB  1303               	bcf	3,6	;RP1=0, select bank0
   607     07DC  00DB               	movwf	_open+1
   608     07DD  0870               	movf	?_decodeValue,w
   609     07DE  00DA               	movwf	_open
   610     07DF                     l1038:
   611                           
   612                           ;main.c: 201:             output_index = 0;
   613     07DF  01BC               	clrf	_output_index
   614     07E0  01BD               	clrf	_output_index+1
   615     07E1                     l1040:
   616                           
   617                           ;main.c: 203:         PORTBbits.RB6 = 0;
   618     07E1  1306               	bcf	6,6	;volatile
   619     07E2                     l1042:
   620                           
   621                           ;main.c: 205:         if (open == 1) {
   622     07E2  035A               	decf	_open,w
   623     07E3  045B               	iorwf	_open+1,w
   624     07E4  1D03               	btfss	3,2
   625     07E5  2FE7               	goto	u681
   626     07E6  2FE8               	goto	u680
   627     07E7                     u681:
   628     07E7  2FEA               	goto	l70
   629     07E8                     u680:
   630     07E8                     l1044:
   631                           
   632                           ;main.c: 206:             PORTBbits.RB0 = 0;
   633     07E8  1006               	bcf	6,0	;volatile
   634                           
   635                           ;main.c: 207:         } else {
   636     07E9  2F61               	goto	l1010
   637     07EA                     l70:
   638                           
   639                           ;main.c: 208:             PORTBbits.RB0 = 1;
   640     07EA  1406               	bsf	6,0	;volatile
   641     07EB  2F61               	goto	l1010
   642     07EC  118A  2800         	ljmp	start
   643     07EE                     __end_of_main:
   644                           
   645                           	psect	text1
   646     062F                     __ptext1:	
   647 ;; *************** function _initialize_pins *****************
   648 ;; Defined at:
   649 ;;		line 36 in file "main.c"
   650 ;; Parameters:    Size  Location     Type
   651 ;;		None
   652 ;; Auto vars:     Size  Location     Type
   653 ;;  i               2    1[COMMON] int 
   654 ;; Return value:  Size  Location     Type
   655 ;;                  1    wreg      void 
   656 ;; Registers used:
   657 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   658 ;; Tracked objects:
   659 ;;		On entry : 0/0
   660 ;;		On exit  : 0/0
   661 ;;		Unchanged: 0/0
   662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   663 ;;      Params:         0       0       0       0
   664 ;;      Locals:         2       0       0       0
   665 ;;      Temps:          1       0       0       0
   666 ;;      Totals:         3       0       0       0
   667 ;;Total ram usage:        3 bytes
   668 ;; Hardware stack levels used: 1
   669 ;; This function calls:
   670 ;;		Nothing
   671 ;; This function is called by:
   672 ;;		_main
   673 ;; This function uses a non-reentrant model
   674 ;;
   675                           
   676     062F                     _initialize_pins:	
   677                           ;psect for function _initialize_pins
   678                           
   679     062F                     l932:	
   680                           ;incstack = 0
   681                           ; Regs used in _initialize_pins: [wreg-fsr0h+status,2+status,0+btemp+1]
   682                           
   683                           
   684                           ;main.c: 37:     CMCON = 0x07;
   685     062F  3007               	movlw	7
   686     0630  1283               	bcf	3,5	;RP0=0, select bank0
   687     0631  1303               	bcf	3,6	;RP1=0, select bank0
   688     0632  009F               	movwf	31	;volatile
   689                           
   690                           ;main.c: 38:     TRISBbits.TRISB0 = 0;
   691     0633  1683               	bsf	3,5	;RP0=1, select bank1
   692     0634  1303               	bcf	3,6	;RP1=0, select bank1
   693     0635  1006               	bcf	6,0	;volatile
   694                           
   695                           ;main.c: 39:     TRISAbits.TRISA3 = 0;
   696     0636  1185               	bcf	5,3	;volatile
   697                           
   698                           ;main.c: 40:     TRISBbits.TRISB2 = 0;
   699     0637  1106               	bcf	6,2	;volatile
   700                           
   701                           ;main.c: 41:     TRISBbits.TRISB1 = 0;
   702     0638  1086               	bcf	6,1	;volatile
   703                           
   704                           ;main.c: 43:     TRISAbits.TRISA1 = 1;
   705     0639  1485               	bsf	5,1	;volatile
   706                           
   707                           ;main.c: 44:     TRISAbits.TRISA2 = 1;
   708     063A  1505               	bsf	5,2	;volatile
   709                           
   710                           ;main.c: 45:     TRISBbits.TRISB7 = 0;
   711     063B  1386               	bcf	6,7	;volatile
   712                           
   713                           ;main.c: 46:     TRISBbits.TRISB6 = 0;
   714     063C  1306               	bcf	6,6	;volatile
   715                           
   716                           ;main.c: 47:     PORTAbits.RA3 = 1;
   717     063D  1283               	bcf	3,5	;RP0=0, select bank0
   718     063E  1303               	bcf	3,6	;RP1=0, select bank0
   719     063F  1585               	bsf	5,3	;volatile
   720     0640                     l934:
   721                           
   722                           ;main.c: 48:     for(int i =0; i<7; i++)
   723     0640  01F1               	clrf	initialize_pins@i
   724     0641  01F2               	clrf	initialize_pins@i+1
   725     0642                     l940:
   726                           
   727                           ;main.c: 49:     {;main.c: 50:         if(i == 0)
   728     0642  0871               	movf	initialize_pins@i,w
   729     0643  0472               	iorwf	initialize_pins@i+1,w
   730     0644  1D03               	btfss	3,2
   731     0645  2E47               	goto	u591
   732     0646  2E48               	goto	u590
   733     0647                     u591:
   734     0647  2E5E               	goto	l944
   735     0648                     u590:
   736     0648                     l942:
   737                           
   738                           ;main.c: 51:         {;main.c: 52:             output_pinpad[i] = 1;
   739     0648  0871               	movf	initialize_pins@i,w
   740     0649  00F0               	movwf	??_initialize_pins
   741     064A  0770               	addwf	??_initialize_pins,w
   742     064B  3E40               	addlw	(low (_output_pinpad| 0))& (0+255)
   743     064C  0084               	movwf	4
   744     064D  3001               	movlw	1
   745     064E  1383               	bcf	3,7	;select IRP bank0
   746     064F  0080               	movwf	0
   747     0650  0A84               	incf	4,f
   748     0651  3000               	movlw	0
   749     0652  0080               	movwf	0
   750                           
   751                           ;main.c: 53:             input_pinpad[i] = 1;
   752     0653  0871               	movf	initialize_pins@i,w
   753     0654  00F0               	movwf	??_initialize_pins
   754     0655  0770               	addwf	??_initialize_pins,w
   755     0656  3E2E               	addlw	(low (_input_pinpad| 0))& (0+255)
   756     0657  0084               	movwf	4
   757     0658  3001               	movlw	1
   758     0659  0080               	movwf	0
   759     065A  0A84               	incf	4,f
   760     065B  3000               	movlw	0
   761     065C  0080               	movwf	0
   762                           
   763                           ;main.c: 55:         }
   764     065D  2E71               	goto	l946
   765     065E                     l944:
   766                           
   767                           ;main.c: 57:         {;main.c: 58:             output_pinpad[i] = 1;
   768     065E  0871               	movf	initialize_pins@i,w
   769     065F  00F0               	movwf	??_initialize_pins
   770     0660  0770               	addwf	??_initialize_pins,w
   771     0661  3E40               	addlw	(low (_output_pinpad| 0))& (0+255)
   772     0662  0084               	movwf	4
   773     0663  3001               	movlw	1
   774     0664  1383               	bcf	3,7	;select IRP bank0
   775     0665  0080               	movwf	0
   776     0666  0A84               	incf	4,f
   777     0667  3000               	movlw	0
   778     0668  0080               	movwf	0
   779                           
   780                           ;main.c: 59:             input_pinpad[i] = 0;
   781     0669  0871               	movf	initialize_pins@i,w
   782     066A  00F0               	movwf	??_initialize_pins
   783     066B  0770               	addwf	??_initialize_pins,w
   784     066C  3E2E               	addlw	(low (_input_pinpad| 0))& (0+255)
   785     066D  0084               	movwf	4
   786     066E  0180               	clrf	0
   787     066F  0A84               	incf	4,f
   788     0670  0180               	clrf	0
   789     0671                     l946:
   790                           
   791                           ;main.c: 61:     }
   792     0671  3001               	movlw	1
   793     0672  07F1               	addwf	initialize_pins@i,f
   794     0673  1803               	skipnc
   795     0674  0AF2               	incf	initialize_pins@i+1,f
   796     0675  3000               	movlw	0
   797     0676  07F2               	addwf	initialize_pins@i+1,f
   798     0677                     l948:
   799     0677  0872               	movf	initialize_pins@i+1,w
   800     0678  3A80               	xorlw	128
   801     0679  00FF               	movwf	btemp+1
   802     067A  3080               	movlw	128
   803     067B  027F               	subwf	btemp+1,w
   804     067C  1D03               	skipz
   805     067D  2E80               	goto	u605
   806     067E  3007               	movlw	7
   807     067F  0271               	subwf	initialize_pins@i,w
   808     0680                     u605:
   809     0680  1C03               	skipc
   810     0681  2E83               	goto	u601
   811     0682  2E84               	goto	u600
   812     0683                     u601:
   813     0683  2E42               	goto	l940
   814     0684                     u600:
   815     0684                     l28:
   816                           
   817                           ;main.c: 62:     INTCONbits.GIE = 1;
   818     0684  178B               	bsf	11,7	;volatile
   819                           
   820                           ;main.c: 63:     INTCONbits.PEIE = 1;
   821     0685  170B               	bsf	11,6	;volatile
   822     0686                     l31:
   823     0686  0008               	return
   824     0687                     __end_of_initialize_pins:
   825                           
   826                           	psect	text2
   827     0532                     __ptext2:	
   828 ;; *************** function _decodeValue *****************
   829 ;; Defined at:
   830 ;;		line 104 in file "main.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;  code            1    0[COMMON] PTR int 
   833 ;;		 -> output_pinpad(14), 
   834 ;; Auto vars:     Size  Location     Type
   835 ;;  i               2    0        int 
   836 ;; Return value:  Size  Location     Type
   837 ;;                  2    0[COMMON] int 
   838 ;; Registers used:
   839 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   840 ;; Tracked objects:
   841 ;;		On entry : 0/0
   842 ;;		On exit  : 0/0
   843 ;;		Unchanged: 0/0
   844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   845 ;;      Params:         2       0       0       0
   846 ;;      Locals:         0       0       0       0
   847 ;;      Temps:          2       0       0       0
   848 ;;      Totals:         4       0       0       0
   849 ;;Total ram usage:        4 bytes
   850 ;; Hardware stack levels used: 1
   851 ;; This function calls:
   852 ;;		Nothing
   853 ;; This function is called by:
   854 ;;		_main
   855 ;; This function uses a non-reentrant model
   856 ;;
   857                           
   858     0532                     _decodeValue:	
   859                           ;psect for function _decodeValue
   860                           
   861     0532                     l980:	
   862                           ;incstack = 0
   863                           ; Regs used in _decodeValue: [wreg-fsr0h+status,2+status,0]
   864                           
   865     0532                     l986:
   866                           
   867                           ;main.c: 107:     {;main.c: 108:         if(code[i] == 1)
   868     0532  0870               	movf	decodeValue@code,w
   869     0533  0084               	movwf	4
   870     0534  1383               	bcf	3,7	;select IRP bank0
   871     0535  0800               	movf	0,w
   872     0536  00F2               	movwf	??_decodeValue
   873     0537  0A84               	incf	4,f
   874     0538  0800               	movf	0,w
   875     0539  00F3               	movwf	??_decodeValue+1
   876     053A  0372               	decf	??_decodeValue,w
   877     053B  0473               	iorwf	??_decodeValue+1,w
   878     053C  1D03               	btfss	3,2
   879     053D  2D3F               	goto	u641
   880     053E  2D40               	goto	u640
   881     053F                     u641:
   882     053F  2D45               	goto	l994
   883     0540                     u640:
   884     0540                     l988:
   885                           
   886                           ;main.c: 109:         {;main.c: 110:             return 1;
   887     0540  3001               	movlw	1
   888     0541  00F0               	movwf	?_decodeValue
   889     0542  3000               	movlw	0
   890     0543  00F1               	movwf	?_decodeValue+1
   891     0544  2D47               	goto	l56
   892     0545                     l994:
   893                           
   894                           ;main.c: 114:             return 0;
   895     0545  01F0               	clrf	?_decodeValue
   896     0546  01F1               	clrf	?_decodeValue+1
   897     0547                     l56:
   898     0547  0008               	return
   899     0548                     __end_of_decodeValue:
   900                           
   901                           	psect	text3
   902     06EA                     __ptext3:	
   903 ;; *************** function _cycleOutput *****************
   904 ;; Defined at:
   905 ;;		line 90 in file "main.c"
   906 ;; Parameters:    Size  Location     Type
   907 ;;  list            1    6[COMMON] PTR int 
   908 ;;		 -> output_pinpad(14), 
   909 ;;  size            2    7[COMMON] int 
   910 ;; Auto vars:     Size  Location     Type
   911 ;;  i               2    4[BANK0 ] int 
   912 ;;  currentIndex    2    2[BANK0 ] int 
   913 ;;  nextIndex       2    0[BANK0 ] int 
   914 ;; Return value:  Size  Location     Type
   915 ;;                  1    wreg      void 
   916 ;; Registers used:
   917 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   918 ;; Tracked objects:
   919 ;;		On entry : 0/0
   920 ;;		On exit  : 0/0
   921 ;;		Unchanged: 0/0
   922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   923 ;;      Params:         3       0       0       0
   924 ;;      Locals:         0       6       0       0
   925 ;;      Temps:          4       0       0       0
   926 ;;      Totals:         7       6       0       0
   927 ;;Total ram usage:       13 bytes
   928 ;; Hardware stack levels used: 1
   929 ;; Hardware stack levels required when called: 1
   930 ;; This function calls:
   931 ;;		___awmod
   932 ;; This function is called by:
   933 ;;		_main
   934 ;; This function uses a non-reentrant model
   935 ;;
   936                           
   937     06EA                     _cycleOutput:	
   938                           ;psect for function _cycleOutput
   939                           
   940     06EA                     l964:	
   941                           ;incstack = 0
   942                           ; Regs used in _cycleOutput: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   943                           
   944                           
   945                           ;main.c: 91:     int currentIndex = -1;
   946     06EA  30FF               	movlw	255
   947     06EB  1283               	bcf	3,5	;RP0=0, select bank0
   948     06EC  1303               	bcf	3,6	;RP1=0, select bank0
   949     06ED  00D0               	movwf	cycleOutput@currentIndex
   950     06EE  30FF               	movlw	255
   951     06EF  00D1               	movwf	cycleOutput@currentIndex+1
   952     06F0                     l966:
   953                           
   954                           ;main.c: 93:     for (int i = 0; i < size; i++) {
   955     06F0  01D2               	clrf	cycleOutput@i
   956     06F1  01D3               	clrf	cycleOutput@i+1
   957     06F2  2F1D               	goto	l46
   958     06F3                     l968:
   959                           
   960                           ;main.c: 94:         if (list[i] == 1) {
   961     06F3  1283               	bcf	3,5	;RP0=0, select bank0
   962     06F4  1303               	bcf	3,6	;RP1=0, select bank0
   963     06F5  0852               	movf	cycleOutput@i,w
   964     06F6  00F9               	movwf	??_cycleOutput
   965     06F7  0779               	addwf	??_cycleOutput,w
   966     06F8  0776               	addwf	cycleOutput@list,w
   967     06F9  00FA               	movwf	??_cycleOutput+1
   968     06FA  087A               	movf	??_cycleOutput+1,w
   969     06FB  0084               	movwf	4
   970     06FC  1383               	bcf	3,7	;select IRP bank0
   971     06FD  0800               	movf	0,w
   972     06FE  00FB               	movwf	??_cycleOutput+2
   973     06FF  0A84               	incf	4,f
   974     0700  0800               	movf	0,w
   975     0701  00FC               	movwf	??_cycleOutput+3
   976     0702  037B               	decf	??_cycleOutput+2,w
   977     0703  047C               	iorwf	??_cycleOutput+3,w
   978     0704  1D03               	btfss	3,2
   979     0705  2F07               	goto	u621
   980     0706  2F08               	goto	u620
   981     0707                     u621:
   982     0707  2F17               	goto	l974
   983     0708                     u620:
   984     0708                     l970:
   985                           
   986                           ;main.c: 95:             currentIndex = i;
   987     0708  0853               	movf	cycleOutput@i+1,w
   988     0709  00D1               	movwf	cycleOutput@currentIndex+1
   989     070A  0852               	movf	cycleOutput@i,w
   990     070B  00D0               	movwf	cycleOutput@currentIndex
   991     070C                     l972:
   992                           
   993                           ;main.c: 96:             list[i] = 0;
   994     070C  0852               	movf	cycleOutput@i,w
   995     070D  00F9               	movwf	??_cycleOutput
   996     070E  0779               	addwf	??_cycleOutput,w
   997     070F  0776               	addwf	cycleOutput@list,w
   998     0710  00FA               	movwf	??_cycleOutput+1
   999     0711  087A               	movf	??_cycleOutput+1,w
  1000     0712  0084               	movwf	4
  1001     0713  0180               	clrf	0
  1002     0714  0A84               	incf	4,f
  1003     0715  0180               	clrf	0
  1004                           
  1005                           ;main.c: 97:             break;
  1006     0716  2F2B               	goto	l976
  1007     0717                     l974:
  1008                           
  1009                           ;main.c: 99:     }
  1010     0717  3001               	movlw	1
  1011     0718  07D2               	addwf	cycleOutput@i,f
  1012     0719  1803               	skipnc
  1013     071A  0AD3               	incf	cycleOutput@i+1,f
  1014     071B  3000               	movlw	0
  1015     071C  07D3               	addwf	cycleOutput@i+1,f
  1016     071D                     l46:
  1017     071D  0853               	movf	cycleOutput@i+1,w
  1018     071E  3A80               	xorlw	128
  1019     071F  00F9               	movwf	??_cycleOutput
  1020     0720  0878               	movf	cycleOutput@size+1,w
  1021     0721  3A80               	xorlw	128
  1022     0722  0279               	subwf	??_cycleOutput,w
  1023     0723  1D03               	skipz
  1024     0724  2F27               	goto	u635
  1025     0725  0877               	movf	cycleOutput@size,w
  1026     0726  0252               	subwf	cycleOutput@i,w
  1027     0727                     u635:
  1028     0727  1C03               	skipc
  1029     0728  2F2A               	goto	u631
  1030     0729  2F2B               	goto	u630
  1031     072A                     u631:
  1032     072A  2EF3               	goto	l968
  1033     072B                     u630:
  1034     072B                     l976:
  1035                           
  1036                           ;main.c: 101:     int nextIndex = (currentIndex + 1) % size;
  1037     072B  0878               	movf	cycleOutput@size+1,w
  1038     072C  00F1               	movwf	___awmod@divisor+1
  1039     072D  0877               	movf	cycleOutput@size,w
  1040     072E  00F0               	movwf	___awmod@divisor
  1041     072F  1283               	bcf	3,5	;RP0=0, select bank0
  1042     0730  1303               	bcf	3,6	;RP1=0, select bank0
  1043     0731  0850               	movf	cycleOutput@currentIndex,w
  1044     0732  3E01               	addlw	1
  1045     0733  00F2               	movwf	___awmod@dividend
  1046     0734  0851               	movf	cycleOutput@currentIndex+1,w
  1047     0735  1803               	skipnc
  1048     0736  3E01               	addlw	1
  1049     0737  3E00               	addlw	0
  1050     0738  00F3               	movwf	___awmod@dividend+1
  1051     0739  118A  25D8  118A   	fcall	___awmod
  1052     073C  0871               	movf	?___awmod+1,w
  1053     073D  1283               	bcf	3,5	;RP0=0, select bank0
  1054     073E  1303               	bcf	3,6	;RP1=0, select bank0
  1055     073F  00CF               	movwf	cycleOutput@nextIndex+1
  1056     0740  0870               	movf	?___awmod,w
  1057     0741  00CE               	movwf	cycleOutput@nextIndex
  1058     0742                     l978:
  1059                           
  1060                           ;main.c: 102:     list[nextIndex] = 1;
  1061     0742  084E               	movf	cycleOutput@nextIndex,w
  1062     0743  00F9               	movwf	??_cycleOutput
  1063     0744  0779               	addwf	??_cycleOutput,w
  1064     0745  0776               	addwf	cycleOutput@list,w
  1065     0746  00FA               	movwf	??_cycleOutput+1
  1066     0747  087A               	movf	??_cycleOutput+1,w
  1067     0748  0084               	movwf	4
  1068     0749  3001               	movlw	1
  1069     074A  1383               	bcf	3,7	;select IRP bank0
  1070     074B  0080               	movwf	0
  1071     074C  0A84               	incf	4,f
  1072     074D  3000               	movlw	0
  1073     074E  0080               	movwf	0
  1074     074F                     l50:
  1075     074F  0008               	return
  1076     0750                     __end_of_cycleOutput:
  1077                           
  1078                           	psect	text4
  1079     05D8                     __ptext4:	
  1080 ;; *************** function ___awmod *****************
  1081 ;; Defined at:
  1082 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
  1083 ;; Parameters:    Size  Location     Type
  1084 ;;  divisor         2    0[COMMON] int 
  1085 ;;  dividend        2    2[COMMON] int 
  1086 ;; Auto vars:     Size  Location     Type
  1087 ;;  sign            1    5[COMMON] unsigned char 
  1088 ;;  counter         1    4[COMMON] unsigned char 
  1089 ;; Return value:  Size  Location     Type
  1090 ;;                  2    0[COMMON] int 
  1091 ;; Registers used:
  1092 ;;		wreg, status,2, status,0
  1093 ;; Tracked objects:
  1094 ;;		On entry : 0/0
  1095 ;;		On exit  : 0/0
  1096 ;;		Unchanged: 0/0
  1097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1098 ;;      Params:         4       0       0       0
  1099 ;;      Locals:         2       0       0       0
  1100 ;;      Temps:          0       0       0       0
  1101 ;;      Totals:         6       0       0       0
  1102 ;;Total ram usage:        6 bytes
  1103 ;; Hardware stack levels used: 1
  1104 ;; This function calls:
  1105 ;;		Nothing
  1106 ;; This function is called by:
  1107 ;;		_cycleOutput
  1108 ;; This function uses a non-reentrant model
  1109 ;;
  1110                           
  1111     05D8                     ___awmod:	
  1112                           ;psect for function ___awmod
  1113                           
  1114     05D8                     l894:	
  1115                           ;incstack = 0
  1116                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1117                           
  1118     05D8  01F5               	clrf	___awmod@sign
  1119     05D9                     l896:
  1120     05D9  1FF3               	btfss	___awmod@dividend+1,7
  1121     05DA  2DDC               	goto	u501
  1122     05DB  2DDD               	goto	u500
  1123     05DC                     u501:
  1124     05DC  2DE4               	goto	l902
  1125     05DD                     u500:
  1126     05DD                     l898:
  1127     05DD  09F2               	comf	___awmod@dividend,f
  1128     05DE  09F3               	comf	___awmod@dividend+1,f
  1129     05DF  0AF2               	incf	___awmod@dividend,f
  1130     05E0  1903               	skipnz
  1131     05E1  0AF3               	incf	___awmod@dividend+1,f
  1132     05E2                     l900:
  1133     05E2  3001               	movlw	1
  1134     05E3  00F5               	movwf	___awmod@sign
  1135     05E4                     l902:
  1136     05E4  1FF1               	btfss	___awmod@divisor+1,7
  1137     05E5  2DE7               	goto	u511
  1138     05E6  2DE8               	goto	u510
  1139     05E7                     u511:
  1140     05E7  2DED               	goto	l906
  1141     05E8                     u510:
  1142     05E8                     l904:
  1143     05E8  09F0               	comf	___awmod@divisor,f
  1144     05E9  09F1               	comf	___awmod@divisor+1,f
  1145     05EA  0AF0               	incf	___awmod@divisor,f
  1146     05EB  1903               	skipnz
  1147     05EC  0AF1               	incf	___awmod@divisor+1,f
  1148     05ED                     l906:
  1149     05ED  0870               	movf	___awmod@divisor,w
  1150     05EE  0471               	iorwf	___awmod@divisor+1,w
  1151     05EF  1903               	btfsc	3,2
  1152     05F0  2DF2               	goto	u521
  1153     05F1  2DF3               	goto	u520
  1154     05F2                     u521:
  1155     05F2  2E20               	goto	l924
  1156     05F3                     u520:
  1157     05F3                     l908:
  1158     05F3  3001               	movlw	1
  1159     05F4  00F4               	movwf	___awmod@counter
  1160     05F5  2DFF               	goto	l914
  1161     05F6                     l910:
  1162     05F6  3001               	movlw	1
  1163     05F7                     u535:
  1164     05F7  1003               	clrc
  1165     05F8  0DF0               	rlf	___awmod@divisor,f
  1166     05F9  0DF1               	rlf	___awmod@divisor+1,f
  1167     05FA  3EFF               	addlw	-1
  1168     05FB  1D03               	skipz
  1169     05FC  2DF7               	goto	u535
  1170     05FD                     l912:
  1171     05FD  3001               	movlw	1
  1172     05FE  07F4               	addwf	___awmod@counter,f
  1173     05FF                     l914:
  1174     05FF  1FF1               	btfss	___awmod@divisor+1,7
  1175     0600  2E02               	goto	u541
  1176     0601  2E03               	goto	u540
  1177     0602                     u541:
  1178     0602  2DF6               	goto	l910
  1179     0603                     u540:
  1180     0603                     l916:
  1181     0603  0871               	movf	___awmod@divisor+1,w
  1182     0604  0273               	subwf	___awmod@dividend+1,w
  1183     0605  1D03               	skipz
  1184     0606  2E09               	goto	u555
  1185     0607  0870               	movf	___awmod@divisor,w
  1186     0608  0272               	subwf	___awmod@dividend,w
  1187     0609                     u555:
  1188     0609  1C03               	skipc
  1189     060A  2E0C               	goto	u551
  1190     060B  2E0D               	goto	u550
  1191     060C                     u551:
  1192     060C  2E13               	goto	l920
  1193     060D                     u550:
  1194     060D                     l918:
  1195     060D  0870               	movf	___awmod@divisor,w
  1196     060E  02F2               	subwf	___awmod@dividend,f
  1197     060F  0871               	movf	___awmod@divisor+1,w
  1198     0610  1C03               	skipc
  1199     0611  03F3               	decf	___awmod@dividend+1,f
  1200     0612  02F3               	subwf	___awmod@dividend+1,f
  1201     0613                     l920:
  1202     0613  3001               	movlw	1
  1203     0614                     u565:
  1204     0614  1003               	clrc
  1205     0615  0CF1               	rrf	___awmod@divisor+1,f
  1206     0616  0CF0               	rrf	___awmod@divisor,f
  1207     0617  3EFF               	addlw	-1
  1208     0618  1D03               	skipz
  1209     0619  2E14               	goto	u565
  1210     061A                     l922:
  1211     061A  3001               	movlw	1
  1212     061B  02F4               	subwf	___awmod@counter,f
  1213     061C  1D03               	btfss	3,2
  1214     061D  2E1F               	goto	u571
  1215     061E  2E20               	goto	u570
  1216     061F                     u571:
  1217     061F  2E03               	goto	l916
  1218     0620                     u570:
  1219     0620                     l924:
  1220     0620  0875               	movf	___awmod@sign,w
  1221     0621  1903               	btfsc	3,2
  1222     0622  2E24               	goto	u581
  1223     0623  2E25               	goto	u580
  1224     0624                     u581:
  1225     0624  2E2A               	goto	l928
  1226     0625                     u580:
  1227     0625                     l926:
  1228     0625  09F2               	comf	___awmod@dividend,f
  1229     0626  09F3               	comf	___awmod@dividend+1,f
  1230     0627  0AF2               	incf	___awmod@dividend,f
  1231     0628  1903               	skipnz
  1232     0629  0AF3               	incf	___awmod@dividend+1,f
  1233     062A                     l928:
  1234     062A  0873               	movf	___awmod@dividend+1,w
  1235     062B  00F1               	movwf	?___awmod+1
  1236     062C  0872               	movf	___awmod@dividend,w
  1237     062D  00F0               	movwf	?___awmod
  1238     062E                     l326:
  1239     062E  0008               	return
  1240     062F                     __end_of___awmod:
  1241                           
  1242                           	psect	text5
  1243     0588                     __ptext5:	
  1244 ;; *************** function _beep *****************
  1245 ;; Defined at:
  1246 ;;		line 77 in file "main.c"
  1247 ;; Parameters:    Size  Location     Type
  1248 ;;  duration_ms     2    0[BANK0 ] int 
  1249 ;; Auto vars:     Size  Location     Type
  1250 ;;  i               2    5[BANK0 ] int 
  1251 ;;  half_period_    2    7[BANK0 ] int 
  1252 ;;  total_cycles    2    3[BANK0 ] int 
  1253 ;; Return value:  Size  Location     Type
  1254 ;;                  1    wreg      void 
  1255 ;; Registers used:
  1256 ;;		wreg, status,2, status,0, pclath, cstack
  1257 ;; Tracked objects:
  1258 ;;		On entry : 0/0
  1259 ;;		On exit  : 0/0
  1260 ;;		Unchanged: 0/0
  1261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1262 ;;      Params:         0       2       0       0
  1263 ;;      Locals:         0       6       0       0
  1264 ;;      Temps:          0       1       0       0
  1265 ;;      Totals:         0       9       0       0
  1266 ;;Total ram usage:        9 bytes
  1267 ;; Hardware stack levels used: 1
  1268 ;; Hardware stack levels required when called: 1
  1269 ;; This function calls:
  1270 ;;		___awdiv
  1271 ;;		___wmul
  1272 ;;		_delay_us
  1273 ;; This function is called by:
  1274 ;;		_main
  1275 ;; This function uses a non-reentrant model
  1276 ;;
  1277                           
  1278     0588                     _beep:	
  1279                           ;psect for function _beep
  1280                           
  1281     0588                     l950:	
  1282                           ;incstack = 0
  1283                           ; Regs used in _beep: [wreg+status,2+status,0+pclath+cstack]
  1284                           
  1285                           
  1286                           ;main.c: 77: void beep(int duration_ms);main.c: 78: {;main.c: 79:     int half_period_us
      +                           = 1000000 / (2 * 6000);
  1287     0588  3053               	movlw	83
  1288     0589  1283               	bcf	3,5	;RP0=0, select bank0
  1289     058A  1303               	bcf	3,6	;RP1=0, select bank0
  1290     058B  00D5               	movwf	beep@half_period_us
  1291     058C  3000               	movlw	0
  1292     058D  00D6               	movwf	beep@half_period_us+1
  1293     058E                     l952:
  1294                           
  1295                           ;main.c: 80:     int total_cycles = (duration_ms * 1000) / (2 * half_period_us);
  1296     058E  30A6               	movlw	166
  1297     058F  00F6               	movwf	___awdiv@divisor
  1298     0590  3000               	movlw	0
  1299     0591  00F7               	movwf	___awdiv@divisor+1
  1300     0592  084F               	movf	beep@duration_ms+1,w
  1301     0593  00F1               	movwf	___wmul@multiplier+1
  1302     0594  084E               	movf	beep@duration_ms,w
  1303     0595  00F0               	movwf	___wmul@multiplier
  1304     0596  30E8               	movlw	232
  1305     0597  00F2               	movwf	___wmul@multiplicand
  1306     0598  3003               	movlw	3
  1307     0599  00F3               	movwf	___wmul@multiplicand+1
  1308     059A  118A  2563  118A   	fcall	___wmul
  1309     059D  0871               	movf	?___wmul+1,w
  1310     059E  00F9               	movwf	___awdiv@dividend+1
  1311     059F  0870               	movf	?___wmul,w
  1312     05A0  00F8               	movwf	___awdiv@dividend
  1313     05A1  118A  2687  118A   	fcall	___awdiv
  1314     05A4  0877               	movf	?___awdiv+1,w
  1315     05A5  1283               	bcf	3,5	;RP0=0, select bank0
  1316     05A6  1303               	bcf	3,6	;RP1=0, select bank0
  1317     05A7  00D2               	movwf	beep@total_cycles+1
  1318     05A8  0876               	movf	?___awdiv,w
  1319     05A9  00D1               	movwf	beep@total_cycles
  1320     05AA                     l954:
  1321                           
  1322                           ;main.c: 82:     for (int i = 0; i < total_cycles; i++) {
  1323     05AA  01D3               	clrf	beep@i
  1324     05AB  01D4               	clrf	beep@i+1
  1325     05AC  2DC9               	goto	l962
  1326     05AD                     l41:
  1327                           
  1328                           ;main.c: 83:         PORTBbits.RB1 = 1;
  1329     05AD  1283               	bcf	3,5	;RP0=0, select bank0
  1330     05AE  1303               	bcf	3,6	;RP1=0, select bank0
  1331     05AF  1486               	bsf	6,1	;volatile
  1332     05B0                     l956:
  1333                           
  1334                           ;main.c: 84:         delay_us((int)half_period_us);
  1335     05B0  0856               	movf	beep@half_period_us+1,w
  1336     05B1  00F1               	movwf	delay_us@time+1
  1337     05B2  0855               	movf	beep@half_period_us,w
  1338     05B3  00F0               	movwf	delay_us@time
  1339     05B4  118A  2548  118A   	fcall	_delay_us
  1340     05B7                     l958:
  1341                           
  1342                           ;main.c: 85:         PORTBbits.RB1 = 0;
  1343     05B7  1283               	bcf	3,5	;RP0=0, select bank0
  1344     05B8  1303               	bcf	3,6	;RP1=0, select bank0
  1345     05B9  1086               	bcf	6,1	;volatile
  1346                           
  1347                           ;main.c: 86:         delay_us((int)half_period_us);
  1348     05BA  0856               	movf	beep@half_period_us+1,w
  1349     05BB  00F1               	movwf	delay_us@time+1
  1350     05BC  0855               	movf	beep@half_period_us,w
  1351     05BD  00F0               	movwf	delay_us@time
  1352     05BE  118A  2548  118A   	fcall	_delay_us
  1353     05C1                     l960:
  1354                           
  1355                           ;main.c: 87:     }
  1356     05C1  3001               	movlw	1
  1357     05C2  1283               	bcf	3,5	;RP0=0, select bank0
  1358     05C3  1303               	bcf	3,6	;RP1=0, select bank0
  1359     05C4  07D3               	addwf	beep@i,f
  1360     05C5  1803               	skipnc
  1361     05C6  0AD4               	incf	beep@i+1,f
  1362     05C7  3000               	movlw	0
  1363     05C8  07D4               	addwf	beep@i+1,f
  1364     05C9                     l962:
  1365     05C9  0854               	movf	beep@i+1,w
  1366     05CA  3A80               	xorlw	128
  1367     05CB  00D0               	movwf	??_beep
  1368     05CC  0852               	movf	beep@total_cycles+1,w
  1369     05CD  3A80               	xorlw	128
  1370     05CE  0250               	subwf	??_beep,w
  1371     05CF  1D03               	skipz
  1372     05D0  2DD3               	goto	u615
  1373     05D1  0851               	movf	beep@total_cycles,w
  1374     05D2  0253               	subwf	beep@i,w
  1375     05D3                     u615:
  1376     05D3  1C03               	skipc
  1377     05D4  2DD6               	goto	u611
  1378     05D5  2DD7               	goto	u610
  1379     05D6                     u611:
  1380     05D6  2DAD               	goto	l41
  1381     05D7                     u610:
  1382     05D7                     l43:
  1383     05D7  0008               	return
  1384     05D8                     __end_of_beep:
  1385                           
  1386                           	psect	text6
  1387     0548                     __ptext6:	
  1388 ;; *************** function _delay_us *****************
  1389 ;; Defined at:
  1390 ;;		line 69 in file "main.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;  time            2    0[COMMON] int 
  1393 ;; Auto vars:     Size  Location     Type
  1394 ;;  i               2    3[COMMON] int 
  1395 ;; Return value:  Size  Location     Type
  1396 ;;                  1    wreg      void 
  1397 ;; Registers used:
  1398 ;;		wreg, status,2
  1399 ;; Tracked objects:
  1400 ;;		On entry : 0/0
  1401 ;;		On exit  : 0/0
  1402 ;;		Unchanged: 0/0
  1403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1404 ;;      Params:         2       0       0       0
  1405 ;;      Locals:         2       0       0       0
  1406 ;;      Temps:          1       0       0       0
  1407 ;;      Totals:         5       0       0       0
  1408 ;;Total ram usage:        5 bytes
  1409 ;; Hardware stack levels used: 1
  1410 ;; This function calls:
  1411 ;;		Nothing
  1412 ;; This function is called by:
  1413 ;;		_beep
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416                           
  1417     0548                     _delay_us:	
  1418                           ;psect for function _delay_us
  1419                           
  1420     0548                     l832:	
  1421                           ;incstack = 0
  1422                           ; Regs used in _delay_us: [wreg+status,2]
  1423                           
  1424                           
  1425                           ;main.c: 69: void delay_us(int time);main.c: 70: {;main.c: 71:     for(int i =0; i< time
      +                          ; i++)
  1426     0548  01F3               	clrf	delay_us@i
  1427     0549  01F4               	clrf	delay_us@i+1
  1428     054A  2D54               	goto	l34
  1429     054B                     l35:
  1430                           
  1431                           ;main.c: 72:     {;main.c: 73:         _delay((unsigned long)((1)*(20000000/4000000.0)))
      +                          ;
  1432     054B  2D4C               	nop2	;2 cycle nop
  1433     054C  2D4D               	nop2	;2 cycle nop
  1434     054D  0000               	nop
  1435     054E                     l834:
  1436                           
  1437                           ;main.c: 74:     }
  1438     054E  3001               	movlw	1
  1439     054F  07F3               	addwf	delay_us@i,f
  1440     0550  1803               	skipnc
  1441     0551  0AF4               	incf	delay_us@i+1,f
  1442     0552  3000               	movlw	0
  1443     0553  07F4               	addwf	delay_us@i+1,f
  1444     0554                     l34:
  1445     0554  0874               	movf	delay_us@i+1,w
  1446     0555  3A80               	xorlw	128
  1447     0556  00F2               	movwf	??_delay_us
  1448     0557  0871               	movf	delay_us@time+1,w
  1449     0558  3A80               	xorlw	128
  1450     0559  0272               	subwf	??_delay_us,w
  1451     055A  1D03               	skipz
  1452     055B  2D5E               	goto	u355
  1453     055C  0870               	movf	delay_us@time,w
  1454     055D  0273               	subwf	delay_us@i,w
  1455     055E                     u355:
  1456     055E  1C03               	skipc
  1457     055F  2D61               	goto	u351
  1458     0560  2D62               	goto	u350
  1459     0561                     u351:
  1460     0561  2D4B               	goto	l35
  1461     0562                     u350:
  1462     0562                     l37:
  1463     0562  0008               	return
  1464     0563                     __end_of_delay_us:
  1465                           
  1466                           	psect	text7
  1467     0563                     __ptext7:	
  1468 ;; *************** function ___wmul *****************
  1469 ;; Defined at:
  1470 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\Umul16.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;  multiplier      2    0[COMMON] unsigned int 
  1473 ;;  multiplicand    2    2[COMMON] unsigned int 
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;  product         2    4[COMMON] unsigned int 
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  2    0[COMMON] unsigned int 
  1478 ;; Registers used:
  1479 ;;		wreg, status,2, status,0
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1485 ;;      Params:         4       0       0       0
  1486 ;;      Locals:         2       0       0       0
  1487 ;;      Temps:          0       0       0       0
  1488 ;;      Totals:         6       0       0       0
  1489 ;;Total ram usage:        6 bytes
  1490 ;; Hardware stack levels used: 1
  1491 ;; This function calls:
  1492 ;;		Nothing
  1493 ;; This function is called by:
  1494 ;;		_beep
  1495 ;; This function uses a non-reentrant model
  1496 ;;
  1497                           
  1498     0563                     ___wmul:	
  1499                           ;psect for function ___wmul
  1500                           
  1501     0563                     l836:	
  1502                           ;incstack = 0
  1503                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1504                           
  1505     0563  01F4               	clrf	___wmul@product
  1506     0564  01F5               	clrf	___wmul@product+1
  1507     0565                     l838:
  1508     0565  1C70               	btfss	___wmul@multiplier,0
  1509     0566  2D68               	goto	u361
  1510     0567  2D69               	goto	u360
  1511     0568                     u361:
  1512     0568  2D6F               	goto	l160
  1513     0569                     u360:
  1514     0569                     l840:
  1515     0569  0872               	movf	___wmul@multiplicand,w
  1516     056A  07F4               	addwf	___wmul@product,f
  1517     056B  1803               	skipnc
  1518     056C  0AF5               	incf	___wmul@product+1,f
  1519     056D  0873               	movf	___wmul@multiplicand+1,w
  1520     056E  07F5               	addwf	___wmul@product+1,f
  1521     056F                     l160:
  1522     056F  3001               	movlw	1
  1523     0570                     u375:
  1524     0570  1003               	clrc
  1525     0571  0DF2               	rlf	___wmul@multiplicand,f
  1526     0572  0DF3               	rlf	___wmul@multiplicand+1,f
  1527     0573  3EFF               	addlw	-1
  1528     0574  1D03               	skipz
  1529     0575  2D70               	goto	u375
  1530     0576                     l842:
  1531     0576  3001               	movlw	1
  1532     0577                     u385:
  1533     0577  1003               	clrc
  1534     0578  0CF1               	rrf	___wmul@multiplier+1,f
  1535     0579  0CF0               	rrf	___wmul@multiplier,f
  1536     057A  3EFF               	addlw	-1
  1537     057B  1D03               	skipz
  1538     057C  2D77               	goto	u385
  1539     057D                     l844:
  1540     057D  0870               	movf	___wmul@multiplier,w
  1541     057E  0471               	iorwf	___wmul@multiplier+1,w
  1542     057F  1D03               	btfss	3,2
  1543     0580  2D82               	goto	u391
  1544     0581  2D83               	goto	u390
  1545     0582                     u391:
  1546     0582  2D65               	goto	l838
  1547     0583                     u390:
  1548     0583                     l846:
  1549     0583  0875               	movf	___wmul@product+1,w
  1550     0584  00F1               	movwf	?___wmul+1
  1551     0585  0874               	movf	___wmul@product,w
  1552     0586  00F0               	movwf	?___wmul
  1553     0587                     l162:
  1554     0587  0008               	return
  1555     0588                     __end_of___wmul:
  1556                           
  1557                           	psect	text8
  1558     0687                     __ptext8:	
  1559 ;; *************** function ___awdiv *****************
  1560 ;; Defined at:
  1561 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awdiv.c"
  1562 ;; Parameters:    Size  Location     Type
  1563 ;;  divisor         2    6[COMMON] int 
  1564 ;;  dividend        2    8[COMMON] int 
  1565 ;; Auto vars:     Size  Location     Type
  1566 ;;  quotient        2   12[COMMON] int 
  1567 ;;  sign            1   11[COMMON] unsigned char 
  1568 ;;  counter         1   10[COMMON] unsigned char 
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  2    6[COMMON] int 
  1571 ;; Registers used:
  1572 ;;		wreg, status,2, status,0
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1578 ;;      Params:         4       0       0       0
  1579 ;;      Locals:         4       0       0       0
  1580 ;;      Temps:          0       0       0       0
  1581 ;;      Totals:         8       0       0       0
  1582 ;;Total ram usage:        8 bytes
  1583 ;; Hardware stack levels used: 1
  1584 ;; This function calls:
  1585 ;;		Nothing
  1586 ;; This function is called by:
  1587 ;;		_beep
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591     0687                     ___awdiv:	
  1592                           ;psect for function ___awdiv
  1593                           
  1594     0687                     l850:	
  1595                           ;incstack = 0
  1596                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1597                           
  1598     0687  01FB               	clrf	___awdiv@sign
  1599     0688                     l852:
  1600     0688  1FF7               	btfss	___awdiv@divisor+1,7
  1601     0689  2E8B               	goto	u401
  1602     068A  2E8C               	goto	u400
  1603     068B                     u401:
  1604     068B  2E93               	goto	l858
  1605     068C                     u400:
  1606     068C                     l854:
  1607     068C  09F6               	comf	___awdiv@divisor,f
  1608     068D  09F7               	comf	___awdiv@divisor+1,f
  1609     068E  0AF6               	incf	___awdiv@divisor,f
  1610     068F  1903               	skipnz
  1611     0690  0AF7               	incf	___awdiv@divisor+1,f
  1612     0691                     l856:
  1613     0691  3001               	movlw	1
  1614     0692  00FB               	movwf	___awdiv@sign
  1615     0693                     l858:
  1616     0693  1FF9               	btfss	___awdiv@dividend+1,7
  1617     0694  2E96               	goto	u411
  1618     0695  2E97               	goto	u410
  1619     0696                     u411:
  1620     0696  2E9E               	goto	l864
  1621     0697                     u410:
  1622     0697                     l860:
  1623     0697  09F8               	comf	___awdiv@dividend,f
  1624     0698  09F9               	comf	___awdiv@dividend+1,f
  1625     0699  0AF8               	incf	___awdiv@dividend,f
  1626     069A  1903               	skipnz
  1627     069B  0AF9               	incf	___awdiv@dividend+1,f
  1628     069C                     l862:
  1629     069C  3001               	movlw	1
  1630     069D  06FB               	xorwf	___awdiv@sign,f
  1631     069E                     l864:
  1632     069E  01FC               	clrf	___awdiv@quotient
  1633     069F  01FD               	clrf	___awdiv@quotient+1
  1634     06A0                     l866:
  1635     06A0  0876               	movf	___awdiv@divisor,w
  1636     06A1  0477               	iorwf	___awdiv@divisor+1,w
  1637     06A2  1903               	btfsc	3,2
  1638     06A3  2EA5               	goto	u421
  1639     06A4  2EA6               	goto	u420
  1640     06A5                     u421:
  1641     06A5  2EDB               	goto	l886
  1642     06A6                     u420:
  1643     06A6                     l868:
  1644     06A6  3001               	movlw	1
  1645     06A7  00FA               	movwf	___awdiv@counter
  1646     06A8  2EB2               	goto	l874
  1647     06A9                     l870:
  1648     06A9  3001               	movlw	1
  1649     06AA                     u435:
  1650     06AA  1003               	clrc
  1651     06AB  0DF6               	rlf	___awdiv@divisor,f
  1652     06AC  0DF7               	rlf	___awdiv@divisor+1,f
  1653     06AD  3EFF               	addlw	-1
  1654     06AE  1D03               	skipz
  1655     06AF  2EAA               	goto	u435
  1656     06B0                     l872:
  1657     06B0  3001               	movlw	1
  1658     06B1  07FA               	addwf	___awdiv@counter,f
  1659     06B2                     l874:
  1660     06B2  1FF7               	btfss	___awdiv@divisor+1,7
  1661     06B3  2EB5               	goto	u441
  1662     06B4  2EB6               	goto	u440
  1663     06B5                     u441:
  1664     06B5  2EA9               	goto	l870
  1665     06B6                     u440:
  1666     06B6                     l876:
  1667     06B6  3001               	movlw	1
  1668     06B7                     u455:
  1669     06B7  1003               	clrc
  1670     06B8  0DFC               	rlf	___awdiv@quotient,f
  1671     06B9  0DFD               	rlf	___awdiv@quotient+1,f
  1672     06BA  3EFF               	addlw	-1
  1673     06BB  1D03               	skipz
  1674     06BC  2EB7               	goto	u455
  1675     06BD  0877               	movf	___awdiv@divisor+1,w
  1676     06BE  0279               	subwf	___awdiv@dividend+1,w
  1677     06BF  1D03               	skipz
  1678     06C0  2EC3               	goto	u465
  1679     06C1  0876               	movf	___awdiv@divisor,w
  1680     06C2  0278               	subwf	___awdiv@dividend,w
  1681     06C3                     u465:
  1682     06C3  1C03               	skipc
  1683     06C4  2EC6               	goto	u461
  1684     06C5  2EC7               	goto	u460
  1685     06C6                     u461:
  1686     06C6  2ECE               	goto	l882
  1687     06C7                     u460:
  1688     06C7                     l878:
  1689     06C7  0876               	movf	___awdiv@divisor,w
  1690     06C8  02F8               	subwf	___awdiv@dividend,f
  1691     06C9  0877               	movf	___awdiv@divisor+1,w
  1692     06CA  1C03               	skipc
  1693     06CB  03F9               	decf	___awdiv@dividend+1,f
  1694     06CC  02F9               	subwf	___awdiv@dividend+1,f
  1695     06CD                     l880:
  1696     06CD  147C               	bsf	___awdiv@quotient,0
  1697     06CE                     l882:
  1698     06CE  3001               	movlw	1
  1699     06CF                     u475:
  1700     06CF  1003               	clrc
  1701     06D0  0CF7               	rrf	___awdiv@divisor+1,f
  1702     06D1  0CF6               	rrf	___awdiv@divisor,f
  1703     06D2  3EFF               	addlw	-1
  1704     06D3  1D03               	skipz
  1705     06D4  2ECF               	goto	u475
  1706     06D5                     l884:
  1707     06D5  3001               	movlw	1
  1708     06D6  02FA               	subwf	___awdiv@counter,f
  1709     06D7  1D03               	btfss	3,2
  1710     06D8  2EDA               	goto	u481
  1711     06D9  2EDB               	goto	u480
  1712     06DA                     u481:
  1713     06DA  2EB6               	goto	l876
  1714     06DB                     u480:
  1715     06DB                     l886:
  1716     06DB  087B               	movf	___awdiv@sign,w
  1717     06DC  1903               	btfsc	3,2
  1718     06DD  2EDF               	goto	u491
  1719     06DE  2EE0               	goto	u490
  1720     06DF                     u491:
  1721     06DF  2EE5               	goto	l890
  1722     06E0                     u490:
  1723     06E0                     l888:
  1724     06E0  09FC               	comf	___awdiv@quotient,f
  1725     06E1  09FD               	comf	___awdiv@quotient+1,f
  1726     06E2  0AFC               	incf	___awdiv@quotient,f
  1727     06E3  1903               	skipnz
  1728     06E4  0AFD               	incf	___awdiv@quotient+1,f
  1729     06E5                     l890:
  1730     06E5  087D               	movf	___awdiv@quotient+1,w
  1731     06E6  00F7               	movwf	?___awdiv+1
  1732     06E7  087C               	movf	___awdiv@quotient,w
  1733     06E8  00F6               	movwf	?___awdiv
  1734     06E9                     l313:
  1735     06E9  0008               	return
  1736     06EA                     __end_of___awdiv:
  1737     0001                     ___latbits      equ	1
  1738     007E                     btemp           set	126	;btemp
  1739     007E                     wtemp0          set	126
  1740                           
  1741                           	psect	config
  1742                           
  1743                           ;Config register CONFIG @ 0x2007
  1744                           ;	Oscillator Selection bits
  1745                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  1746                           ;	Watchdog Timer Enable bit
  1747                           ;	WDTE = OFF, WDT disabled
  1748                           ;	Power-up Timer Enable bit
  1749                           ;	PWRTE = ON, PWRT enabled
  1750                           ;	RA5/MCLR/VPP Pin Function Select bit
  1751                           ;	MCLRE = ON, RA5/MCLR/VPP pin function is MCLR
  1752                           ;	Brown-out Detect Enable bit
  1753                           ;	BOREN = OFF, BOD disabled
  1754                           ;	Low-Voltage Programming Enable bit
  1755                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  1756                           ;	Data EE Memory Code Protection bit
  1757                           ;	CPD = OFF, Data memory code protection off
  1758                           ;	Flash Program Memory Code Protection bit
  1759                           ;	CP = OFF, Code protection off
  1760     2007                     	org	8199
  1761     2007  3F22               	dw	16162

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         46
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     12      60
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    cycleOutput@list	PTR int  size(1) Largest target is 14
		 -> output_pinpad(BANK0[14]), 

    decodeValue@code	PTR int  size(1) Largest target is 14
		 -> output_pinpad(BANK0[14]), 


Critical Paths under _main in COMMON

    _cycleOutput->___awmod
    _beep->___awdiv
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    _main->_beep

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1375
                                              9 BANK0      3     3      0
                               _beep
                        _cycleOutput
                        _decodeValue
                    _initialize_pins
 ---------------------------------------------------------------------------------
 (1) _initialize_pins                                      3     3      0     156
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _decodeValue                                          6     4      2      91
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _cycleOutput                                         13    10      3     547
                                              6 COMMON     7     4      3
                                              0 BANK0      6     6      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     298
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _beep                                                 9     7      2     581
                                              0 BANK0      9     7      2
                            ___awdiv
                             ___wmul
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _delay_us                                             5     3      2      48
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4      94
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     302
                                              6 COMMON     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beep
     ___awdiv
       ___wmul (ARG)
     ___wmul
     _delay_us
   _cycleOutput
     ___awmod
   _decodeValue
   _initialize_pins

Address spaces:
Name               Size   Autos  Total    Usage
BANK2               80      0       0      0.0%
BITBANK2            80      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80     12      60     75.0%
BITBANK0            80      0       0      0.0%
COMMON              14     14      14    100.0%
BITCOMMON           14      0       0      0.0%
DATA                 0      0      74      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sat Nov 30 18:50:43 2024

             _USER_INPUT 0020                       l31 0686                       l41 05AD  
                     l34 0554                       l50 074F                       l35 054B  
                     l43 05D7                       l28 0684                       l37 0562  
                     l46 071D                       l70 07EA                       l56 0547  
           ___awdiv@sign 007B                       fsr 0004      ___wmul@multiplicand 0072  
                    l160 056F                      l313 06E9                      l162 0587  
                    l326 062E                      l900 05E2                      l910 05F6  
                    l902 05E4                      l840 0569                      l832 0548  
                    l920 0613                      l912 05FD                      l904 05E8  
                    l850 0687                      l842 0576                      l834 054E  
                    l922 061A                      l914 05FF                      l906 05ED  
                    l860 0697                      l852 0688                      l844 057D  
                    l836 0563                      l916 0603                      l908 05F3  
                    l924 0620                      l940 0642                      l932 062F  
                    l870 06A9                      l862 069C                      l854 068C  
                    l846 0583                      l838 0565                      l950 0588  
                    l926 0625                      l918 060D                      l942 0648  
                    l934 0640                      l880 06CD                      l872 06B0  
                    l864 069E                      l856 0691                      l960 05C1  
                    l952 058E                      l928 062A                      l944 065E  
                    l890 06E5                      l882 06CE                      l874 06B2  
                    l866 06A0                      l858 0693                      l962 05C9  
                    l954 05AA                      l970 0708                      l946 0671  
                    l884 06D5                      l876 06B6                      l868 06A6  
                    l956 05B0                      l972 070C                      l964 06EA  
                    l980 0532                      l948 0677                      l878 06C7  
                    l886 06DB                      l958 05B7                      l894 05D8  
                    l974 0717                      l966 06F0                      l888 06E0  
                    l896 05D9                      l976 072B                      l968 06F3  
                    l898 05DD                      l978 0742                      l994 0545  
                    l986 0532                      l988 0540                      u400 068C  
                    u401 068B                      u410 0697                      u411 0696  
                    u420 06A6                      u500 05DD                      u421 06A5  
                    u501 05DC                      u350 0562                      u510 05E8  
                    u351 0561                      u511 05E7                      u440 06B6  
                    u360 0569                      u520 05F3                      u600 0684  
                    u441 06B5                      u361 0568                      u521 05F2  
                    u601 0683                      u610 05D7                      u435 06AA  
                    u355 055E                      u611 05D6                      u460 06C7  
                    u540 0603                      u620 0708                      u461 06C6  
                    u541 0602                      u621 0707                      u605 0680  
                    u390 0583                      u550 060D                      u630 072B  
                    u455 06B7                      u391 0582                      u375 0570  
                    u615 05D3                      u551 060C                      u535 05F7  
                    u631 072A                      u480 06DB                      u640 0540  
                    u481 06DA                      u465 06C3                      u385 0577  
                    u641 053F                      u490 06E0                      u570 0620  
                    u650 0765                      u491 06DF                      u475 06CF  
                    u571 061F                      u555 0609                      u635 0727  
                    u707 0774                      u651 0764                      u580 0625  
                    u660 078B                      u581 0624                      u565 0614  
                    u661 078A                      u590 0648                      u670 079A  
                    u591 0647                      u671 0799                      u680 07E8  
                    u681 07E7                      u665 0787                      u675 0796  
                    u697 0759                      fsr0 0004                      indf 0000  
           ___awmod@sign 0075             ?_cycleOutput 0076                     l1010 0761  
                   l1002 0750                     l1020 078B                     l1012 0765  
                   l1004 0753                     l1030 07C1                     l1022 079A  
                   l1014 076C                     l1006 075D                     l1032 07CA  
                   l1040 07E1                     l1024 07A7                     l1016 077B  
                   l1008 0760                     l1042 07E2                     l1034 07D2  
                   l1026 07AE                     l1018 077E                     l1044 07E8  
                   l1028 07BF                     l1036 07D4                     l1038 07DF  
                   _beep 0588                     _main 0750                     _open 005A  
                   btemp 007E                     start 0000                    ?_beep 004E  
                  ?_main 0070          __end_of___awdiv 06EA          __end_of___awmod 062F  
                  _CMCON 001F          ___awdiv@divisor 0076          ___awdiv@counter 007A  
      ??_initialize_pins 0070             _output_index 003C                    beep@i 0053  
                  status 0003                    wtemp0 007E          decodeValue@code 0070  
        __initialization 07EE             __end_of_beep 05D8             __end_of_main 07EE  
                 ??_beep 0050                   ??_main 0057         ___awdiv@dividend 0078  
       __end_of_delay_us 0563                   ___wmul 0563                ??___awdiv 007A  
              ??___awmod 0074            _output_pinpad 0040         ___awdiv@quotient 007C  
        ___awmod@divisor 0070          ___awmod@counter 0074             cycleOutput@i 0052  
__end_of__initialization 07FD           __pcstackCOMMON 0070             __pidataBANK0 0528  
             __pbssBANK0 0020               __pmaintext 0750                  ?___wmul 0070  
   cycleOutput@nextIndex 004E          _initialize_pins 062F                ?_delay_us 0070  
       beep@total_cycles 0051                  ___awdiv 0687                  ___awmod 05D8  
                __ptext1 062F                  __ptext2 0532                  __ptext3 06EA  
                __ptext4 05D8                  __ptext5 0588                  __ptext6 0548  
                __ptext7 0563                  __ptext8 0687            ??_decodeValue 0072  
       ___awmod@dividend 0072               ??_delay_us 0072                  clrloop0 052B  
   end_of_initialization 07FD  __end_of_initialize_pins 0687          beep@duration_ms 004E  
              _PORTAbits 0005                _PORTBbits 0006                _TRISAbits 0085  
              _TRISBbits 0086      __end_of_decodeValue 0548         initialize_pins@i 0071  
         __end_of___wmul 0588      start_initialization 07EE            ??_cycleOutput 0079  
       ?_initialize_pins 0070                 ??___wmul 0074              __pdataBANK0 005A  
            _decodeValue 0532                ___latbits 0001            __pcstackBANK0 004E  
cycleOutput@currentIndex 0050      __end_of_cycleOutput 0750                 ?___awdiv 0076  
               ?___awmod 0070       beep@half_period_us 0055           ___wmul@product 0074  
              delay_us@i 0073                clear_ram0 052A             _input_pinpad 002E  
      ___wmul@multiplier 0070              _cycleOutput 06EA             delay_us@time 0070  
        cycleOutput@list 0076          cycleOutput@size 0077                 _delay_us 0548  
           ?_decodeValue 0070               _INTCONbits 000B             _sensor_index 003E  
