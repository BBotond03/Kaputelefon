

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sun Dec 01 17:32:42 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F648A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,space=0,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    13                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=1
    20                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=1
    21                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    23                           	dabs	1,0x7E,2
    24     0000                     
    25                           ; Generated 12/10/2023 GMT
    26                           ; 
    27                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution. Publication is not required when
    41                           ;        this file is used in an embedded application.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F648A Definitions
    57                           ; 
    58                           ; SFR Addresses
    59     0004                     fsr             equ	4
    60     0004                     fsr0            equ	4
    61     0000                     indf            equ	0
    62     0000                     indf0           equ	0
    63     0002                     pc              equ	2
    64     0002                     pcl             equ	2
    65     000A                     pclath          equ	10
    66     0003                     status          equ	3
    67     0000                     INDF            equ	0	;# 
    68     0001                     TMR0            equ	1	;# 
    69     0002                     PCL             equ	2	;# 
    70     0003                     STATUS          equ	3	;# 
    71     0004                     FSR             equ	4	;# 
    72     0005                     PORTA           equ	5	;# 
    73     0006                     PORTB           equ	6	;# 
    74     000A                     PCLATH          equ	10	;# 
    75     000B                     INTCON          equ	11	;# 
    76     000C                     PIR1            equ	12	;# 
    77     000E                     TMR1            equ	14	;# 
    78     000E                     TMR1L           equ	14	;# 
    79     000F                     TMR1H           equ	15	;# 
    80     0010                     T1CON           equ	16	;# 
    81     0011                     TMR2            equ	17	;# 
    82     0012                     T2CON           equ	18	;# 
    83     0015                     CCPR1           equ	21	;# 
    84     0015                     CCPR1L          equ	21	;# 
    85     0016                     CCPR1H          equ	22	;# 
    86     0017                     CCP1CON         equ	23	;# 
    87     0018                     RCSTA           equ	24	;# 
    88     0019                     TXREG           equ	25	;# 
    89     001A                     RCREG           equ	26	;# 
    90     001F                     CMCON           equ	31	;# 
    91     0081                     OPTION_REG      equ	129	;# 
    92     0085                     TRISA           equ	133	;# 
    93     0086                     TRISB           equ	134	;# 
    94     008C                     PIE1            equ	140	;# 
    95     008E                     PCON            equ	142	;# 
    96     0092                     PR2             equ	146	;# 
    97     0098                     TXSTA           equ	152	;# 
    98     0099                     SPBRG           equ	153	;# 
    99     009A                     EEDATA          equ	154	;# 
   100     009B                     EEADR           equ	155	;# 
   101     009C                     EECON1          equ	156	;# 
   102     009D                     EECON2          equ	157	;# 
   103     009F                     VRCON           equ	159	;# 
   104     0000                     INDF            equ	0	;# 
   105     0001                     TMR0            equ	1	;# 
   106     0002                     PCL             equ	2	;# 
   107     0003                     STATUS          equ	3	;# 
   108     0004                     FSR             equ	4	;# 
   109     0005                     PORTA           equ	5	;# 
   110     0006                     PORTB           equ	6	;# 
   111     000A                     PCLATH          equ	10	;# 
   112     000B                     INTCON          equ	11	;# 
   113     000C                     PIR1            equ	12	;# 
   114     000E                     TMR1            equ	14	;# 
   115     000E                     TMR1L           equ	14	;# 
   116     000F                     TMR1H           equ	15	;# 
   117     0010                     T1CON           equ	16	;# 
   118     0011                     TMR2            equ	17	;# 
   119     0012                     T2CON           equ	18	;# 
   120     0015                     CCPR1           equ	21	;# 
   121     0015                     CCPR1L          equ	21	;# 
   122     0016                     CCPR1H          equ	22	;# 
   123     0017                     CCP1CON         equ	23	;# 
   124     0018                     RCSTA           equ	24	;# 
   125     0019                     TXREG           equ	25	;# 
   126     001A                     RCREG           equ	26	;# 
   127     001F                     CMCON           equ	31	;# 
   128     0081                     OPTION_REG      equ	129	;# 
   129     0085                     TRISA           equ	133	;# 
   130     0086                     TRISB           equ	134	;# 
   131     008C                     PIE1            equ	140	;# 
   132     008E                     PCON            equ	142	;# 
   133     0092                     PR2             equ	146	;# 
   134     0098                     TXSTA           equ	152	;# 
   135     0099                     SPBRG           equ	153	;# 
   136     009A                     EEDATA          equ	154	;# 
   137     009B                     EEADR           equ	155	;# 
   138     009C                     EECON1          equ	156	;# 
   139     009D                     EECON2          equ	157	;# 
   140     009F                     VRCON           equ	159	;# 
   141                           
   142                           	psect	idataBANK0
   143     051E                     __pidataBANK0:
   144                           
   145                           ;initializer for _open
   146     051E  3401               	retlw	1
   147     051F  3400               	retlw	0
   148     0006                     _PORTBbits      set	6
   149     0005                     _PORTAbits      set	5
   150     001F                     _CMCON          set	31
   151     0085                     _TRISAbits      set	133
   152     0086                     _TRISBbits      set	134
   153                           
   154                           	psect	cinit
   155     07E8                     start_initialization:	
   156                           ; #config settings
   157                           
   158     07E8                     __initialization:
   159                           
   160                           ; Initialize objects allocated to BANK0
   161     07E8  118A  251E  118A   	fcall	__pidataBANK0	;fetch initializer
   162     07EB  00DF               	movwf	__pdataBANK0& (0+127)
   163     07EC  118A  251F  118A   	fcall	__pidataBANK0+1	;fetch initializer
   164     07EF  00E0               	movwf	(__pdataBANK0+1)& (0+127)
   165                           
   166                           ; Clear objects allocated to BANK1
   167     07F0  1383               	bcf	3,7	;select IRP bank0
   168     07F1  30A0               	movlw	low __pbssBANK1
   169     07F2  0084               	movwf	4
   170     07F3  30B0               	movlw	low (__pbssBANK1+16)
   171     07F4  118A  2520  118A   	fcall	clear_ram0
   172                           
   173                           ; Clear objects allocated to BANK0
   174     07F7  3020               	movlw	low __pbssBANK0
   175     07F8  0084               	movwf	4
   176     07F9  3040               	movlw	low (__pbssBANK0+32)
   177     07FA  118A  2520  118A   	fcall	clear_ram0
   178     07FD                     end_of_initialization:	
   179                           ;End of C runtime variable initialization code
   180                           
   181     07FD                     __end_of__initialization:
   182     07FD  0183               	clrf	3
   183     07FE  118A  2EF1         	ljmp	_main	;jump to C main() function
   184                           
   185                           	psect	bssBANK0
   186     0020                     __pbssBANK0:
   187     0020                     _inputPinpad:
   188     0020                     	ds	14
   189     002E                     _outputPinpad:
   190     002E                     	ds	14
   191     003C                     _outputIndex:
   192     003C                     	ds	2
   193     003E                     _sensorIndex:
   194     003E                     	ds	2
   195                           
   196                           	psect	dataBANK0
   197     005F                     __pdataBANK0:
   198     005F                     _open:
   199     005F                     	ds	2
   200                           
   201                           	psect	bssBANK1
   202     00A0                     __pbssBANK1:
   203     00A0                     _USER_INPUT:
   204     00A0                     	ds	16
   205                           
   206                           	psect	clrtext
   207     0520                     clear_ram0:	
   208                           ;	Called with FSR containing the base address, and
   209                           ;	W with the last address+1
   210                           
   211     0520  0064               	clrwdt	;clear the watchdog before getting into this loop
   212     0521                     clrloop0:
   213     0521  0180               	clrf	0	;clear RAM location pointed to by FSR
   214     0522  0A84               	incf	4,f	;increment pointer
   215     0523  0604               	xorwf	4,w	;XOR with final address
   216     0524  1903               	btfsc	3,2	;have we reached the end yet?
   217     0525  3400               	retlw	0	;all done for this memory range, return
   218     0526  0604               	xorwf	4,w	;XOR again to restore value
   219     0527  2D21               	goto	clrloop0	;do the next byte
   220                           
   221                           	psect	cstackCOMMON
   222     0071                     __pcstackCOMMON:
   223     0071                     ?_initialize_pins:
   224     0071                     ?_delay_us:	
   225                           ; 1 bytes @ 0x0
   226                           
   227     0071                     ?_flash:	
   228                           ; 1 bytes @ 0x0
   229                           
   230     0071                     ?_clock_SR:	
   231                           ; 1 bytes @ 0x0
   232                           
   233     0071                     ?_push_output:	
   234                           ; 1 bytes @ 0x0
   235                           
   236     0071                     ?_main:	
   237                           ; 1 bytes @ 0x0
   238                           
   239     0071                     ?___wmul:	
   240                           ; 1 bytes @ 0x0
   241                           
   242     0071                     delay_us@time:	
   243                           ; 2 bytes @ 0x0
   244                           
   245     0071                     ___wmul@multiplier:	
   246                           ; 2 bytes @ 0x0
   247                           
   248     0071                     ??_initialize_pins:	
   249                           ; 2 bytes @ 0x0
   250                           
   251     0071                     ??_flash:	
   252                           ; 1 bytes @ 0x0
   253                           
   254     0071                     ??_clock_SR:	
   255                           ; 1 bytes @ 0x0
   256                           
   257     0071                     ??_push_output:	
   258                           ; 1 bytes @ 0x0
   259                           
   260                           
   261                           ; 1 bytes @ 0x0
   262     0071                     	ds	1
   263     0072                     initialize_pins@i:
   264                           
   265                           ; 2 bytes @ 0x1
   266     0072                     	ds	1
   267     0073                     ___wmul@multiplicand:
   268     0073                     ??_delay_us:	
   269                           ; 2 bytes @ 0x2
   270                           
   271                           
   272                           ; 1 bytes @ 0x2
   273     0073                     	ds	1
   274     0074                     delay_us@i:
   275                           
   276                           ; 2 bytes @ 0x3
   277     0074                     	ds	1
   278     0075                     ___wmul@product:
   279     0075                     ??___wmul:	
   280                           ; 2 bytes @ 0x4
   281                           
   282                           
   283                           ; 1 bytes @ 0x4
   284     0075                     	ds	2
   285     0077                     ?___awdiv:
   286     0077                     ___awdiv@divisor:	
   287                           ; 2 bytes @ 0x6
   288                           
   289                           
   290                           ; 2 bytes @ 0x6
   291     0077                     	ds	2
   292     0079                     ___awdiv@dividend:
   293                           
   294                           ; 2 bytes @ 0x8
   295     0079                     	ds	2
   296     007B                     ?_beep:
   297     007B                     beep@duration_ms:	
   298                           ; 1 bytes @ 0xA
   299                           
   300     007B                     ??___awdiv:	
   301                           ; 2 bytes @ 0xA
   302                           
   303                           
   304                           ; 1 bytes @ 0xA
   305     007B                     	ds	2
   306     007D                     ??_beep:
   307                           
   308                           ; 1 bytes @ 0xC
   309     007D                     	ds	1
   310                           
   311                           	psect	cstackBANK0
   312     0040                     __pcstackBANK0:
   313     0040                     ___awdiv@counter:
   314                           
   315                           ; 1 bytes @ 0x0
   316     0040                     	ds	1
   317     0041                     ___awdiv@sign:
   318                           
   319                           ; 1 bytes @ 0x1
   320     0041                     	ds	1
   321     0042                     ___awdiv@quotient:
   322                           
   323                           ; 2 bytes @ 0x2
   324     0042                     	ds	2
   325     0044                     beep@total_cycles:
   326                           
   327                           ; 2 bytes @ 0x4
   328     0044                     	ds	2
   329     0046                     beep@i:
   330                           
   331                           ; 2 bytes @ 0x6
   332     0046                     	ds	2
   333     0048                     beep@half_period_us:
   334                           
   335                           ; 2 bytes @ 0x8
   336     0048                     	ds	2
   337     004A                     ?_decode_value:
   338     004A                     decode_value@code:	
   339                           ; 1 bytes @ 0xA
   340                           
   341                           
   342                           ; 1 bytes @ 0xA
   343     004A                     	ds	1
   344     004B                     ??_decode_value:
   345                           
   346                           ; 1 bytes @ 0xB
   347     004B                     	ds	4
   348     004F                     decode_value@i:
   349                           
   350                           ; 2 bytes @ 0xF
   351     004F                     	ds	2
   352     0051                     ??_main:
   353                           
   354                           ; 1 bytes @ 0x11
   355     0051                     	ds	4
   356     0055                     main@i:
   357                           
   358                           ; 2 bytes @ 0x15
   359     0055                     	ds	2
   360     0057                     main@i_187:
   361                           
   362                           ; 2 bytes @ 0x17
   363     0057                     	ds	2
   364     0059                     main@i_186:
   365                           
   366                           ; 2 bytes @ 0x19
   367     0059                     	ds	2
   368     005B                     main@i_188:
   369                           
   370                           ; 2 bytes @ 0x1B
   371     005B                     	ds	2
   372     005D                     main@itter:
   373                           
   374                           ; 2 bytes @ 0x1D
   375     005D                     	ds	2
   376                           
   377                           	psect	maintext
   378     06F1                     __pmaintext:	
   379 ;;
   380 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   381 ;;
   382 ;; *************** function _main *****************
   383 ;; Defined at:
   384 ;;		line 139 in file "main.c"
   385 ;; Parameters:    Size  Location     Type
   386 ;;		None
   387 ;; Auto vars:     Size  Location     Type
   388 ;;  i               2   27[BANK0 ] int 
   389 ;;  i               2   23[BANK0 ] int 
   390 ;;  i               2   25[BANK0 ] int 
   391 ;;  i               2   21[BANK0 ] int 
   392 ;;  itter           2   29[BANK0 ] int 
   393 ;;  cycle           2    0        int 
   394 ;; Return value:  Size  Location     Type
   395 ;;                  1    wreg      void 
   396 ;; Registers used:
   397 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   398 ;; Tracked objects:
   399 ;;		On entry : B00/0
   400 ;;		On exit  : 0/0
   401 ;;		Unchanged: 0/0
   402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   403 ;;      Params:         0       0       0       0
   404 ;;      Locals:         0      10       0       0
   405 ;;      Temps:          0       4       0       0
   406 ;;      Totals:         0      14       0       0
   407 ;;Total ram usage:       14 bytes
   408 ;; Hardware stack levels required when called: 3
   409 ;; This function calls:
   410 ;;		_beep
   411 ;;		_clock_SR
   412 ;;		_decode_value
   413 ;;		_initialize_pins
   414 ;;		_push_output
   415 ;; This function is called by:
   416 ;;		Startup code after reset
   417 ;; This function uses a non-reentrant model
   418 ;;
   419                           
   420     06F1                     _main:	
   421                           ;psect for function _main
   422                           
   423     06F1                     l980:	
   424                           ;incstack = 0
   425                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   426                           
   427                           
   428                           ;main.c: 140:     initialize_pins();
   429     06F1  118A  2636  118A   	fcall	_initialize_pins
   430     06F4                     l982:
   431                           
   432                           ;main.c: 141:     PORTBbits.RB2 = 1;
   433     06F4  1283               	bcf	3,5	;RP0=0, select bank0
   434     06F5  1303               	bcf	3,6	;RP1=0, select bank0
   435     06F6  1506               	bsf	6,2	;volatile
   436     06F7                     l984:
   437                           
   438                           ;main.c: 142:     PORTBbits.RB0 = 0;
   439     06F7  1006               	bcf	6,0	;volatile
   440     06F8                     l986:
   441                           
   442                           ;main.c: 143:     int itter = 0;
   443     06F8  01DD               	clrf	main@itter
   444     06F9  01DE               	clrf	main@itter+1
   445     06FA                     l988:
   446     06FA                     l990:
   447                           
   448                           ;main.c: 146:         if (PORTAbits.RA2 == 0) {
   449     06FA  1283               	bcf	3,5	;RP0=0, select bank0
   450     06FB  1303               	bcf	3,6	;RP1=0, select bank0
   451     06FC  1905               	btfsc	5,2	;volatile
   452     06FD  2EFF               	goto	u571
   453     06FE  2F00               	goto	u570
   454     06FF                     u571:
   455     06FF  2F16               	goto	l996
   456     0700                     u570:
   457     0700                     l992:
   458                           
   459                           ;main.c: 147:             beep(1000);
   460     0700  30E8               	movlw	232
   461     0701  00FB               	movwf	beep@duration_ms
   462     0702  3003               	movlw	3
   463     0703  00FC               	movwf	beep@duration_ms+1
   464     0704  118A  25E6  118A   	fcall	_beep
   465     0707                     l994:
   466                           
   467                           ;main.c: 148:             _delay((unsigned long)((50)*(20000000/4000.0)));
   468     0707  3002               	movlw	2
   469     0708  1283               	bcf	3,5	;RP0=0, select bank0
   470     0709  1303               	bcf	3,6	;RP1=0, select bank0
   471     070A  00D3               	movwf	??_main+2
   472     070B  3045               	movlw	69
   473     070C  00D2               	movwf	??_main+1
   474     070D  30A9               	movlw	169
   475     070E  00D1               	movwf	??_main
   476     070F                     u637:
   477     070F  0BD1               	decfsz	??_main,f
   478     0710  2F0F               	goto	u637
   479     0711  0BD2               	decfsz	??_main+1,f
   480     0712  2F0F               	goto	u637
   481     0713  0BD3               	decfsz	??_main+2,f
   482     0714  2F0F               	goto	u637
   483     0715  0000               	nop
   484     0716                     l996:
   485                           
   486                           ;main.c: 151:         PORTBbits.RB7 = 0;
   487     0716  1283               	bcf	3,5	;RP0=0, select bank0
   488     0717  1303               	bcf	3,6	;RP1=0, select bank0
   489     0718  1386               	bcf	6,7	;volatile
   490     0719                     l998:
   491                           
   492                           ;main.c: 153:         for (int i = 0; i < (7 - itter); i++) {
   493     0719  01D5               	clrf	main@i
   494     071A  01D6               	clrf	main@i+1
   495     071B  2F27               	goto	l1004
   496     071C                     l1000:
   497                           
   498                           ;main.c: 154:             clock_SR();
   499     071C  118A  2528  118A   	fcall	_clock_SR
   500     071F                     l1002:
   501                           
   502                           ;main.c: 155:         }
   503     071F  3001               	movlw	1
   504     0720  1283               	bcf	3,5	;RP0=0, select bank0
   505     0721  1303               	bcf	3,6	;RP1=0, select bank0
   506     0722  07D5               	addwf	main@i,f
   507     0723  1803               	skipnc
   508     0724  0AD6               	incf	main@i+1,f
   509     0725  3000               	movlw	0
   510     0726  07D6               	addwf	main@i+1,f
   511     0727                     l1004:
   512     0727  3007               	movlw	7
   513     0728  00D1               	movwf	??_main
   514     0729  085D               	movf	main@itter,w
   515     072A  0251               	subwf	??_main,w
   516     072B  00D2               	movwf	??_main+1
   517     072C  095E               	comf	main@itter+1,w
   518     072D  1803               	skipnc
   519     072E  3E01               	addlw	1
   520     072F  00D3               	movwf	??_main+2
   521     0730  0856               	movf	main@i+1,w
   522     0731  3A80               	xorlw	128
   523     0732  00D4               	movwf	??_main+3
   524     0733  0853               	movf	??_main+2,w
   525     0734  3A80               	xorlw	128
   526     0735  0254               	subwf	??_main+3,w
   527     0736  1D03               	skipz
   528     0737  2F3A               	goto	u585
   529     0738  0852               	movf	??_main+1,w
   530     0739  0255               	subwf	main@i,w
   531     073A                     u585:
   532     073A  1C03               	skipc
   533     073B  2F3D               	goto	u581
   534     073C  2F3E               	goto	u580
   535     073D                     u581:
   536     073D  2F1C               	goto	l1000
   537     073E                     u580:
   538     073E                     l75:
   539                           
   540                           ;main.c: 157:         PORTBbits.RB7 = 1;
   541     073E  1283               	bcf	3,5	;RP0=0, select bank0
   542     073F  1303               	bcf	3,6	;RP1=0, select bank0
   543     0740  1786               	bsf	6,7	;volatile
   544     0741                     l1006:
   545                           
   546                           ;main.c: 158:         clock_SR();
   547     0741  118A  2528  118A   	fcall	_clock_SR
   548     0744                     l1008:
   549                           
   550                           ;main.c: 160:         PORTBbits.RB7 = 0;
   551     0744  1283               	bcf	3,5	;RP0=0, select bank0
   552     0745  1303               	bcf	3,6	;RP1=0, select bank0
   553     0746  1386               	bcf	6,7	;volatile
   554     0747                     l1010:
   555                           
   556                           ;main.c: 161:         for (int i = (7 - itter); i < 7; i++) {
   557     0747  3007               	movlw	7
   558     0748  00D1               	movwf	??_main
   559     0749  085D               	movf	main@itter,w
   560     074A  0251               	subwf	??_main,w
   561     074B  00D9               	movwf	main@i_186
   562     074C  095E               	comf	main@itter+1,w
   563     074D  1803               	skipnc
   564     074E  3E01               	addlw	1
   565     074F  00DA               	movwf	main@i_186+1
   566     0750                     l1012:
   567     0750  085A               	movf	main@i_186+1,w
   568     0751  3A80               	xorlw	128
   569     0752  00FF               	movwf	btemp+1
   570     0753  3080               	movlw	128
   571     0754  027F               	subwf	btemp+1,w
   572     0755  1D03               	skipz
   573     0756  2F59               	goto	u595
   574     0757  3007               	movlw	7
   575     0758  0259               	subwf	main@i_186,w
   576     0759                     u595:
   577     0759  1C03               	skipc
   578     075A  2F5C               	goto	u591
   579     075B  2F5D               	goto	u590
   580     075C                     u591:
   581     075C  2F5E               	goto	l1016
   582     075D                     u590:
   583     075D  2F6A               	goto	l1022
   584     075E                     l1016:
   585                           
   586                           ;main.c: 162:             clock_SR();
   587     075E  118A  2528  118A   	fcall	_clock_SR
   588     0761                     l1018:
   589                           
   590                           ;main.c: 163:         }
   591     0761  3001               	movlw	1
   592     0762  1283               	bcf	3,5	;RP0=0, select bank0
   593     0763  1303               	bcf	3,6	;RP1=0, select bank0
   594     0764  07D9               	addwf	main@i_186,f
   595     0765  1803               	skipnc
   596     0766  0ADA               	incf	main@i_186+1,f
   597     0767  3000               	movlw	0
   598     0768  07DA               	addwf	main@i_186+1,f
   599     0769  2F50               	goto	l1012
   600     076A                     l1022:
   601                           
   602                           ;main.c: 164:         for (int i = 0; i < (7 - itter); i++) {
   603     076A  1283               	bcf	3,5	;RP0=0, select bank0
   604     076B  1303               	bcf	3,6	;RP1=0, select bank0
   605     076C  01D7               	clrf	main@i_187
   606     076D  01D8               	clrf	main@i_187+1
   607     076E  2F7A               	goto	l1028
   608     076F                     l1024:
   609                           
   610                           ;main.c: 165:             clock_SR();
   611     076F  118A  2528  118A   	fcall	_clock_SR
   612     0772                     l1026:
   613                           
   614                           ;main.c: 166:         }
   615     0772  3001               	movlw	1
   616     0773  1283               	bcf	3,5	;RP0=0, select bank0
   617     0774  1303               	bcf	3,6	;RP1=0, select bank0
   618     0775  07D7               	addwf	main@i_187,f
   619     0776  1803               	skipnc
   620     0777  0AD8               	incf	main@i_187+1,f
   621     0778  3000               	movlw	0
   622     0779  07D8               	addwf	main@i_187+1,f
   623     077A                     l1028:
   624     077A  3007               	movlw	7
   625     077B  00D1               	movwf	??_main
   626     077C  085D               	movf	main@itter,w
   627     077D  0251               	subwf	??_main,w
   628     077E  00D2               	movwf	??_main+1
   629     077F  095E               	comf	main@itter+1,w
   630     0780  1803               	skipnc
   631     0781  3E01               	addlw	1
   632     0782  00D3               	movwf	??_main+2
   633     0783  0858               	movf	main@i_187+1,w
   634     0784  3A80               	xorlw	128
   635     0785  00D4               	movwf	??_main+3
   636     0786  0853               	movf	??_main+2,w
   637     0787  3A80               	xorlw	128
   638     0788  0254               	subwf	??_main+3,w
   639     0789  1D03               	skipz
   640     078A  2F8D               	goto	u605
   641     078B  0852               	movf	??_main+1,w
   642     078C  0257               	subwf	main@i_187,w
   643     078D                     u605:
   644     078D  1C03               	skipc
   645     078E  2F90               	goto	u601
   646     078F  2F91               	goto	u600
   647     0790                     u601:
   648     0790  2F6F               	goto	l1024
   649     0791                     u600:
   650     0791                     l80:
   651                           
   652                           ;main.c: 168:         PORTBbits.RB7 = 1;
   653     0791  1283               	bcf	3,5	;RP0=0, select bank0
   654     0792  1303               	bcf	3,6	;RP1=0, select bank0
   655     0793  1786               	bsf	6,7	;volatile
   656     0794                     l1030:
   657                           
   658                           ;main.c: 169:         clock_SR();
   659     0794  118A  2528  118A   	fcall	_clock_SR
   660     0797                     l1032:
   661                           
   662                           ;main.c: 171:         PORTBbits.RB7 = 0;
   663     0797  1283               	bcf	3,5	;RP0=0, select bank0
   664     0798  1303               	bcf	3,6	;RP1=0, select bank0
   665     0799  1386               	bcf	6,7	;volatile
   666     079A                     l1034:
   667                           
   668                           ;main.c: 172:         for (int i = (7 - itter); i < 7; i++) {
   669     079A  3007               	movlw	7
   670     079B  00D1               	movwf	??_main
   671     079C  085D               	movf	main@itter,w
   672     079D  0251               	subwf	??_main,w
   673     079E  00DB               	movwf	main@i_188
   674     079F  095E               	comf	main@itter+1,w
   675     07A0  1803               	skipnc
   676     07A1  3E01               	addlw	1
   677     07A2  00DC               	movwf	main@i_188+1
   678     07A3                     l1036:
   679     07A3  085C               	movf	main@i_188+1,w
   680     07A4  3A80               	xorlw	128
   681     07A5  00FF               	movwf	btemp+1
   682     07A6  3080               	movlw	128
   683     07A7  027F               	subwf	btemp+1,w
   684     07A8  1D03               	skipz
   685     07A9  2FAC               	goto	u615
   686     07AA  3007               	movlw	7
   687     07AB  025B               	subwf	main@i_188,w
   688     07AC                     u615:
   689     07AC  1C03               	skipc
   690     07AD  2FAF               	goto	u611
   691     07AE  2FB0               	goto	u610
   692     07AF                     u611:
   693     07AF  2FB1               	goto	l1040
   694     07B0                     u610:
   695     07B0  2FBD               	goto	l1046
   696     07B1                     l1040:
   697                           
   698                           ;main.c: 173:             clock_SR();
   699     07B1  118A  2528  118A   	fcall	_clock_SR
   700     07B4                     l1042:
   701                           
   702                           ;main.c: 174:         }
   703     07B4  3001               	movlw	1
   704     07B5  1283               	bcf	3,5	;RP0=0, select bank0
   705     07B6  1303               	bcf	3,6	;RP1=0, select bank0
   706     07B7  07DB               	addwf	main@i_188,f
   707     07B8  1803               	skipnc
   708     07B9  0ADC               	incf	main@i_188+1,f
   709     07BA  3000               	movlw	0
   710     07BB  07DC               	addwf	main@i_188+1,f
   711     07BC  2FA3               	goto	l1036
   712     07BD                     l1046:
   713                           
   714                           ;main.c: 176:         push_output();
   715     07BD  118A  2534  118A   	fcall	_push_output
   716     07C0                     l1048:
   717                           
   718                           ;main.c: 177:         USER_INPUT[itter] = PORTAbits.RA1;
   719     07C0  1283               	bcf	3,5	;RP0=0, select bank0
   720     07C1  1303               	bcf	3,6	;RP1=0, select bank0
   721     07C2  0C05               	rrf	5,w	;volatile
   722     07C3  3901               	andlw	1
   723     07C4  00D1               	movwf	??_main
   724     07C5  01D2               	clrf	??_main+1
   725     07C6  085D               	movf	main@itter,w
   726     07C7  00D3               	movwf	??_main+2
   727     07C8  0753               	addwf	??_main+2,w
   728     07C9  3EA0               	addlw	(low (_USER_INPUT| 0))& (0+255)
   729     07CA  0084               	movwf	4
   730     07CB  0851               	movf	??_main,w
   731     07CC  1383               	bcf	3,7	;select IRP bank1
   732     07CD  0080               	movwf	0
   733     07CE  0A84               	incf	4,f
   734     07CF  0852               	movf	??_main+1,w
   735     07D0  0080               	movwf	0
   736     07D1                     l1050:
   737                           
   738                           ;main.c: 178:         itter++;
   739     07D1  3001               	movlw	1
   740     07D2  07DD               	addwf	main@itter,f
   741     07D3  1803               	skipnc
   742     07D4  0ADE               	incf	main@itter+1,f
   743     07D5  3000               	movlw	0
   744     07D6  07DE               	addwf	main@itter+1,f
   745     07D7                     l1052:
   746                           
   747                           ;main.c: 180:         if (itter == 8) {
   748     07D7  3008               	movlw	8
   749     07D8  065D               	xorwf	main@itter,w
   750     07D9  045E               	iorwf	main@itter+1,w
   751     07DA  1D03               	btfss	3,2
   752     07DB  2FDD               	goto	u621
   753     07DC  2FDE               	goto	u620
   754     07DD                     u621:
   755     07DD  2EFA               	goto	l990
   756     07DE                     u620:
   757     07DE                     l1054:
   758                           
   759                           ;main.c: 181:             itter = 0;
   760     07DE  01DD               	clrf	main@itter
   761     07DF  01DE               	clrf	main@itter+1
   762     07E0                     l1056:
   763                           
   764                           ;main.c: 182:             decode_value(USER_INPUT);
   765     07E0  30A0               	movlw	(low (_USER_INPUT| 0))& (0+255)
   766     07E1  00CA               	movwf	decode_value@code
   767     07E2  118A  25AC  118A   	fcall	_decode_value
   768     07E5  2EFA               	goto	l990
   769     07E6  118A  2801         	ljmp	start
   770     07E8                     __end_of_main:
   771                           
   772                           	psect	text1
   773     0534                     __ptext1:	
   774 ;; *************** function _push_output *****************
   775 ;; Defined at:
   776 ;;		line 130 in file "main.c"
   777 ;; Parameters:    Size  Location     Type
   778 ;;		None
   779 ;; Auto vars:     Size  Location     Type
   780 ;;		None
   781 ;; Return value:  Size  Location     Type
   782 ;;                  1    wreg      void 
   783 ;; Registers used:
   784 ;;		wreg
   785 ;; Tracked objects:
   786 ;;		On entry : 0/0
   787 ;;		On exit  : 0/0
   788 ;;		Unchanged: 0/0
   789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   790 ;;      Params:         0       0       0       0
   791 ;;      Locals:         0       0       0       0
   792 ;;      Temps:          1       0       0       0
   793 ;;      Totals:         1       0       0       0
   794 ;;Total ram usage:        1 bytes
   795 ;; Hardware stack levels used: 1
   796 ;; This function calls:
   797 ;;		Nothing
   798 ;; This function is called by:
   799 ;;		_main
   800 ;; This function uses a non-reentrant model
   801 ;;
   802                           
   803     0534                     _push_output:	
   804                           ;psect for function _push_output
   805                           
   806     0534                     l974:	
   807                           ;incstack = 0
   808                           ; Regs used in _push_output: [wreg]
   809                           
   810                           
   811                           ;main.c: 132:     PORTBbits.RB2 = 0;
   812     0534  1283               	bcf	3,5	;RP0=0, select bank0
   813     0535  1303               	bcf	3,6	;RP1=0, select bank0
   814     0536  1106               	bcf	6,2	;volatile
   815     0537                     l976:
   816                           
   817                           ;main.c: 133:     _delay((unsigned long)((10)*(20000000/4000000.0)));
   818     0537  3010               	movlw	16
   819     0538  00F1               	movwf	??_push_output
   820     0539                     u647:
   821     0539  0BF1               	decfsz	??_push_output,f
   822     053A  2D39               	goto	u647
   823     053B  0000               	nop
   824     053C                     l978:
   825                           
   826                           ;main.c: 134:     PORTBbits.RB2 = 1;
   827     053C  1283               	bcf	3,5	;RP0=0, select bank0
   828     053D  1303               	bcf	3,6	;RP1=0, select bank0
   829     053E  1506               	bsf	6,2	;volatile
   830     053F                     l64:
   831     053F  0008               	return
   832     0540                     __end_of_push_output:
   833                           
   834                           	psect	text2
   835     0636                     __ptext2:	
   836 ;; *************** function _initialize_pins *****************
   837 ;; Defined at:
   838 ;;		line 38 in file "main.c"
   839 ;; Parameters:    Size  Location     Type
   840 ;;		None
   841 ;; Auto vars:     Size  Location     Type
   842 ;;  i               2    1[COMMON] int 
   843 ;; Return value:  Size  Location     Type
   844 ;;                  1    wreg      void 
   845 ;; Registers used:
   846 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   852 ;;      Params:         0       0       0       0
   853 ;;      Locals:         2       0       0       0
   854 ;;      Temps:          1       0       0       0
   855 ;;      Totals:         3       0       0       0
   856 ;;Total ram usage:        3 bytes
   857 ;; Hardware stack levels used: 1
   858 ;; This function calls:
   859 ;;		Nothing
   860 ;; This function is called by:
   861 ;;		_main
   862 ;; This function uses a non-reentrant model
   863 ;;
   864                           
   865     0636                     _initialize_pins:	
   866                           ;psect for function _initialize_pins
   867                           
   868     0636                     l934:	
   869                           ;incstack = 0
   870                           ; Regs used in _initialize_pins: [wreg-fsr0h+status,2+status,0+btemp+1]
   871                           
   872                           
   873                           ;main.c: 39:     CMCON = 0x07;
   874     0636  3007               	movlw	7
   875     0637  1283               	bcf	3,5	;RP0=0, select bank0
   876     0638  1303               	bcf	3,6	;RP1=0, select bank0
   877     0639  009F               	movwf	31	;volatile
   878                           
   879                           ;main.c: 40:     TRISBbits.TRISB0 = 0;
   880     063A  1683               	bsf	3,5	;RP0=1, select bank1
   881     063B  1303               	bcf	3,6	;RP1=0, select bank1
   882     063C  1006               	bcf	6,0	;volatile
   883                           
   884                           ;main.c: 41:     TRISAbits.TRISA3 = 0;
   885     063D  1185               	bcf	5,3	;volatile
   886                           
   887                           ;main.c: 42:     TRISBbits.TRISB2 = 0;
   888     063E  1106               	bcf	6,2	;volatile
   889                           
   890                           ;main.c: 43:     TRISBbits.TRISB1 = 0;
   891     063F  1086               	bcf	6,1	;volatile
   892                           
   893                           ;main.c: 45:     TRISAbits.TRISA1 = 1;
   894     0640  1485               	bsf	5,1	;volatile
   895                           
   896                           ;main.c: 46:     TRISAbits.TRISA2 = 1;
   897     0641  1505               	bsf	5,2	;volatile
   898                           
   899                           ;main.c: 47:     TRISBbits.TRISB7 = 0;
   900     0642  1386               	bcf	6,7	;volatile
   901                           
   902                           ;main.c: 48:     TRISBbits.TRISB6 = 0;
   903     0643  1306               	bcf	6,6	;volatile
   904                           
   905                           ;main.c: 49:     PORTAbits.RA3 = 1;
   906     0644  1283               	bcf	3,5	;RP0=0, select bank0
   907     0645  1303               	bcf	3,6	;RP1=0, select bank0
   908     0646  1585               	bsf	5,3	;volatile
   909     0647                     l936:
   910                           
   911                           ;main.c: 50:     for(int i =0; i<7; i++)
   912     0647  01F2               	clrf	initialize_pins@i
   913     0648  01F3               	clrf	initialize_pins@i+1
   914     0649                     l942:
   915                           
   916                           ;main.c: 51:     {;main.c: 52:         if(i == 0)
   917     0649  0872               	movf	initialize_pins@i,w
   918     064A  0473               	iorwf	initialize_pins@i+1,w
   919     064B  1D03               	btfss	3,2
   920     064C  2E4E               	goto	u531
   921     064D  2E4F               	goto	u530
   922     064E                     u531:
   923     064E  2E65               	goto	l946
   924     064F                     u530:
   925     064F                     l944:
   926                           
   927                           ;main.c: 53:         {;main.c: 54:             outputPinpad[i] = 1;
   928     064F  0872               	movf	initialize_pins@i,w
   929     0650  00F1               	movwf	??_initialize_pins
   930     0651  0771               	addwf	??_initialize_pins,w
   931     0652  3E2E               	addlw	(low (_outputPinpad| 0))& (0+255)
   932     0653  0084               	movwf	4
   933     0654  3001               	movlw	1
   934     0655  1383               	bcf	3,7	;select IRP bank0
   935     0656  0080               	movwf	0
   936     0657  0A84               	incf	4,f
   937     0658  3000               	movlw	0
   938     0659  0080               	movwf	0
   939                           
   940                           ;main.c: 55:             inputPinpad[i] = 1;
   941     065A  0872               	movf	initialize_pins@i,w
   942     065B  00F1               	movwf	??_initialize_pins
   943     065C  0771               	addwf	??_initialize_pins,w
   944     065D  3E20               	addlw	(low (_inputPinpad| 0))& (0+255)
   945     065E  0084               	movwf	4
   946     065F  3001               	movlw	1
   947     0660  0080               	movwf	0
   948     0661  0A84               	incf	4,f
   949     0662  3000               	movlw	0
   950     0663  0080               	movwf	0
   951                           
   952                           ;main.c: 57:         }
   953     0664  2E78               	goto	l948
   954     0665                     l946:
   955                           
   956                           ;main.c: 59:         {;main.c: 60:             outputPinpad[i] = 1;
   957     0665  0872               	movf	initialize_pins@i,w
   958     0666  00F1               	movwf	??_initialize_pins
   959     0667  0771               	addwf	??_initialize_pins,w
   960     0668  3E2E               	addlw	(low (_outputPinpad| 0))& (0+255)
   961     0669  0084               	movwf	4
   962     066A  3001               	movlw	1
   963     066B  1383               	bcf	3,7	;select IRP bank0
   964     066C  0080               	movwf	0
   965     066D  0A84               	incf	4,f
   966     066E  3000               	movlw	0
   967     066F  0080               	movwf	0
   968                           
   969                           ;main.c: 61:             inputPinpad[i] = 0;
   970     0670  0872               	movf	initialize_pins@i,w
   971     0671  00F1               	movwf	??_initialize_pins
   972     0672  0771               	addwf	??_initialize_pins,w
   973     0673  3E20               	addlw	(low (_inputPinpad| 0))& (0+255)
   974     0674  0084               	movwf	4
   975     0675  0180               	clrf	0
   976     0676  0A84               	incf	4,f
   977     0677  0180               	clrf	0
   978     0678                     l948:
   979                           
   980                           ;main.c: 63:     }
   981     0678  3001               	movlw	1
   982     0679  07F2               	addwf	initialize_pins@i,f
   983     067A  1803               	skipnc
   984     067B  0AF3               	incf	initialize_pins@i+1,f
   985     067C  3000               	movlw	0
   986     067D  07F3               	addwf	initialize_pins@i+1,f
   987     067E                     l950:
   988     067E  0873               	movf	initialize_pins@i+1,w
   989     067F  3A80               	xorlw	128
   990     0680  00FF               	movwf	btemp+1
   991     0681  3080               	movlw	128
   992     0682  027F               	subwf	btemp+1,w
   993     0683  1D03               	skipz
   994     0684  2E87               	goto	u545
   995     0685  3007               	movlw	7
   996     0686  0272               	subwf	initialize_pins@i,w
   997     0687                     u545:
   998     0687  1C03               	skipc
   999     0688  2E8A               	goto	u541
  1000     0689  2E8B               	goto	u540
  1001     068A                     u541:
  1002     068A  2E49               	goto	l942
  1003     068B                     u540:
  1004     068B                     l29:
  1005     068B  0008               	return
  1006     068C                     __end_of_initialize_pins:
  1007                           
  1008                           	psect	text3
  1009     05AC                     __ptext3:	
  1010 ;; *************** function _decode_value *****************
  1011 ;; Defined at:
  1012 ;;		line 112 in file "main.c"
  1013 ;; Parameters:    Size  Location     Type
  1014 ;;  code            1   10[BANK0 ] PTR int 
  1015 ;;		 -> USER_INPUT(16), 
  1016 ;; Auto vars:     Size  Location     Type
  1017 ;;  i               2   15[BANK0 ] int 
  1018 ;; Return value:  Size  Location     Type
  1019 ;;                  1    wreg      void 
  1020 ;; Registers used:
  1021 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1022 ;; Tracked objects:
  1023 ;;		On entry : 0/0
  1024 ;;		On exit  : 0/0
  1025 ;;		Unchanged: 0/0
  1026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1027 ;;      Params:         0       1       0       0
  1028 ;;      Locals:         0       2       0       0
  1029 ;;      Temps:          0       4       0       0
  1030 ;;      Totals:         0       7       0       0
  1031 ;;Total ram usage:        7 bytes
  1032 ;; Hardware stack levels used: 1
  1033 ;; Hardware stack levels required when called: 2
  1034 ;; This function calls:
  1035 ;;		_beep
  1036 ;;		_flash
  1037 ;; This function is called by:
  1038 ;;		_main
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042     05AC                     _decode_value:	
  1043                           ;psect for function _decode_value
  1044                           
  1045     05AC                     l952:	
  1046                           ;incstack = 0
  1047                           ; Regs used in _decode_value: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1048                           
  1049                           
  1050                           ;main.c: 112: void decode_value(int code[]);main.c: 113: {;main.c: 114:     for(int i =0
      +                          ; i<7; i++)
  1051     05AC  1283               	bcf	3,5	;RP0=0, select bank0
  1052     05AD  1303               	bcf	3,6	;RP1=0, select bank0
  1053     05AE  01CF               	clrf	decode_value@i
  1054     05AF  01D0               	clrf	decode_value@i+1
  1055     05B0                     l958:
  1056                           
  1057                           ;main.c: 115:     {;main.c: 116:         if(code[i] == 1)
  1058     05B0  1283               	bcf	3,5	;RP0=0, select bank0
  1059     05B1  1303               	bcf	3,6	;RP1=0, select bank0
  1060     05B2  084F               	movf	decode_value@i,w
  1061     05B3  00CB               	movwf	??_decode_value
  1062     05B4  074B               	addwf	??_decode_value,w
  1063     05B5  074A               	addwf	decode_value@code,w
  1064     05B6  00CC               	movwf	??_decode_value+1
  1065     05B7  084C               	movf	??_decode_value+1,w
  1066     05B8  0084               	movwf	4
  1067     05B9  1383               	bcf	3,7	;select IRP bank0
  1068     05BA  0800               	movf	0,w
  1069     05BB  00CD               	movwf	??_decode_value+2
  1070     05BC  0A84               	incf	4,f
  1071     05BD  0800               	movf	0,w
  1072     05BE  00CE               	movwf	??_decode_value+3
  1073     05BF  034D               	decf	??_decode_value+2,w
  1074     05C0  044E               	iorwf	??_decode_value+3,w
  1075     05C1  1D03               	btfss	3,2
  1076     05C2  2DC4               	goto	u551
  1077     05C3  2DC5               	goto	u550
  1078     05C4                     u551:
  1079     05C4  2DCD               	goto	l962
  1080     05C5                     u550:
  1081     05C5                     l960:
  1082                           
  1083                           ;main.c: 117:         {;main.c: 118:             beep(500);
  1084     05C5  30F4               	movlw	244
  1085     05C6  00FB               	movwf	beep@duration_ms
  1086     05C7  3001               	movlw	1
  1087     05C8  00FC               	movwf	beep@duration_ms+1
  1088     05C9  118A  25E6  118A   	fcall	_beep
  1089                           
  1090                           ;main.c: 119:         }
  1091     05CC  2DD0               	goto	l964
  1092     05CD                     l962:
  1093                           
  1094                           ;main.c: 121:             flash();
  1095     05CD  118A  2580  118A   	fcall	_flash
  1096     05D0                     l964:
  1097                           
  1098                           ;main.c: 122:     }
  1099     05D0  3001               	movlw	1
  1100     05D1  1283               	bcf	3,5	;RP0=0, select bank0
  1101     05D2  1303               	bcf	3,6	;RP1=0, select bank0
  1102     05D3  07CF               	addwf	decode_value@i,f
  1103     05D4  1803               	skipnc
  1104     05D5  0AD0               	incf	decode_value@i+1,f
  1105     05D6  3000               	movlw	0
  1106     05D7  07D0               	addwf	decode_value@i+1,f
  1107     05D8                     l966:
  1108     05D8  0850               	movf	decode_value@i+1,w
  1109     05D9  3A80               	xorlw	128
  1110     05DA  00FF               	movwf	btemp+1
  1111     05DB  3080               	movlw	128
  1112     05DC  027F               	subwf	btemp+1,w
  1113     05DD  1D03               	skipz
  1114     05DE  2DE1               	goto	u565
  1115     05DF  3007               	movlw	7
  1116     05E0  024F               	subwf	decode_value@i,w
  1117     05E1                     u565:
  1118     05E1  1C03               	skipc
  1119     05E2  2DE4               	goto	u561
  1120     05E3  2DE5               	goto	u560
  1121     05E4                     u561:
  1122     05E4  2DB0               	goto	l958
  1123     05E5                     u560:
  1124     05E5                     l58:
  1125     05E5  0008               	return
  1126     05E6                     __end_of_decode_value:
  1127                           
  1128                           	psect	text4
  1129     0580                     __ptext4:	
  1130 ;; *************** function _flash *****************
  1131 ;; Defined at:
  1132 ;;		line 91 in file "main.c"
  1133 ;; Parameters:    Size  Location     Type
  1134 ;;		None
  1135 ;; Auto vars:     Size  Location     Type
  1136 ;;		None
  1137 ;; Return value:  Size  Location     Type
  1138 ;;                  1    wreg      void 
  1139 ;; Registers used:
  1140 ;;		wreg, status,0
  1141 ;; Tracked objects:
  1142 ;;		On entry : 0/0
  1143 ;;		On exit  : 0/0
  1144 ;;		Unchanged: 0/0
  1145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1146 ;;      Params:         0       0       0       0
  1147 ;;      Locals:         0       0       0       0
  1148 ;;      Temps:          3       0       0       0
  1149 ;;      Totals:         3       0       0       0
  1150 ;;Total ram usage:        3 bytes
  1151 ;; Hardware stack levels used: 1
  1152 ;; This function calls:
  1153 ;;		Nothing
  1154 ;; This function is called by:
  1155 ;;		_decode_value
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159     0580                     _flash:	
  1160                           ;psect for function _flash
  1161                           
  1162     0580                     l928:	
  1163                           ;incstack = 0
  1164                           ; Regs used in _flash: [wreg+status,0]
  1165                           
  1166                           
  1167                           ;main.c: 93:     PORTBbits.RB0 = !PORTBbits.RB0;
  1168     0580  1003               	clrc
  1169     0581  1283               	bcf	3,5	;RP0=0, select bank0
  1170     0582  1303               	bcf	3,6	;RP1=0, select bank0
  1171     0583  1C06               	btfss	6,0	;volatile
  1172     0584  1403               	setc
  1173     0585  1803               	btfsc	3,0
  1174     0586  2D88               	goto	u491
  1175     0587  2D8C               	goto	u490
  1176     0588                     u491:
  1177     0588  1283               	bcf	3,5	;RP0=0, select bank0
  1178     0589  1303               	bcf	3,6	;RP1=0, select bank0
  1179     058A  1406               	bsf	6,0	;volatile
  1180     058B  2D8F               	goto	u504
  1181     058C                     u490:
  1182     058C  1283               	bcf	3,5	;RP0=0, select bank0
  1183     058D  1303               	bcf	3,6	;RP1=0, select bank0
  1184     058E  1006               	bcf	6,0	;volatile
  1185     058F                     u504:
  1186     058F                     l930:
  1187                           
  1188                           ;main.c: 94:     _delay((unsigned long)((50)*(20000000/4000.0)));
  1189     058F  3002               	movlw	2
  1190     0590  00F3               	movwf	??_flash+2
  1191     0591  3045               	movlw	69
  1192     0592  00F2               	movwf	??_flash+1
  1193     0593  30A9               	movlw	169
  1194     0594  00F1               	movwf	??_flash
  1195     0595                     u657:
  1196     0595  0BF1               	decfsz	??_flash,f
  1197     0596  2D95               	goto	u657
  1198     0597  0BF2               	decfsz	??_flash+1,f
  1199     0598  2D95               	goto	u657
  1200     0599  0BF3               	decfsz	??_flash+2,f
  1201     059A  2D95               	goto	u657
  1202     059B  2D9C               	nop2
  1203     059C                     l932:
  1204                           
  1205                           ;main.c: 95:     PORTBbits.RB0 = !PORTBbits.RB0;
  1206     059C  1003               	clrc
  1207     059D  1283               	bcf	3,5	;RP0=0, select bank0
  1208     059E  1303               	bcf	3,6	;RP1=0, select bank0
  1209     059F  1C06               	btfss	6,0	;volatile
  1210     05A0  1403               	setc
  1211     05A1  1803               	btfsc	3,0
  1212     05A2  2DA4               	goto	u511
  1213     05A3  2DA8               	goto	u510
  1214     05A4                     u511:
  1215     05A4  1283               	bcf	3,5	;RP0=0, select bank0
  1216     05A5  1303               	bcf	3,6	;RP1=0, select bank0
  1217     05A6  1406               	bsf	6,0	;volatile
  1218     05A7  2DAB               	goto	u524
  1219     05A8                     u510:
  1220     05A8  1283               	bcf	3,5	;RP0=0, select bank0
  1221     05A9  1303               	bcf	3,6	;RP1=0, select bank0
  1222     05AA  1006               	bcf	6,0	;volatile
  1223     05AB                     u524:
  1224     05AB                     l44:
  1225     05AB  0008               	return
  1226     05AC                     __end_of_flash:
  1227                           
  1228                           	psect	text5
  1229     05E6                     __ptext5:	
  1230 ;; *************** function _beep *****************
  1231 ;; Defined at:
  1232 ;;		line 79 in file "main.c"
  1233 ;; Parameters:    Size  Location     Type
  1234 ;;  duration_ms     2   10[COMMON] int 
  1235 ;; Auto vars:     Size  Location     Type
  1236 ;;  i               2    6[BANK0 ] int 
  1237 ;;  half_period_    2    8[BANK0 ] int 
  1238 ;;  total_cycles    2    4[BANK0 ] int 
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  1    wreg      void 
  1241 ;; Registers used:
  1242 ;;		wreg, status,2, status,0, pclath, cstack
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1248 ;;      Params:         2       0       0       0
  1249 ;;      Locals:         0       6       0       0
  1250 ;;      Temps:          1       0       0       0
  1251 ;;      Totals:         3       6       0       0
  1252 ;;Total ram usage:        9 bytes
  1253 ;; Hardware stack levels used: 1
  1254 ;; Hardware stack levels required when called: 1
  1255 ;; This function calls:
  1256 ;;		___awdiv
  1257 ;;		___wmul
  1258 ;;		_delay_us
  1259 ;; This function is called by:
  1260 ;;		_decode_value
  1261 ;;		_main
  1262 ;; This function uses a non-reentrant model
  1263 ;;
  1264                           
  1265     05E6                     _beep:	
  1266                           ;psect for function _beep
  1267                           
  1268     05E6                     l914:	
  1269                           ;incstack = 0
  1270                           ; Regs used in _beep: [wreg+status,2+status,0+pclath+cstack]
  1271                           
  1272                           
  1273                           ;main.c: 79: void beep(int duration_ms);main.c: 80: {;main.c: 81:     int half_period_us
      +                           = 1000000 / (2 * 6000);
  1274     05E6  3053               	movlw	83
  1275     05E7  1283               	bcf	3,5	;RP0=0, select bank0
  1276     05E8  1303               	bcf	3,6	;RP1=0, select bank0
  1277     05E9  00C8               	movwf	beep@half_period_us
  1278     05EA  3000               	movlw	0
  1279     05EB  00C9               	movwf	beep@half_period_us+1
  1280     05EC                     l916:
  1281                           
  1282                           ;main.c: 82:     int total_cycles = (duration_ms * 1000) / (2 * half_period_us);
  1283     05EC  30A6               	movlw	166
  1284     05ED  00F7               	movwf	___awdiv@divisor
  1285     05EE  3000               	movlw	0
  1286     05EF  00F8               	movwf	___awdiv@divisor+1
  1287     05F0  087C               	movf	beep@duration_ms+1,w
  1288     05F1  00F2               	movwf	___wmul@multiplier+1
  1289     05F2  087B               	movf	beep@duration_ms,w
  1290     05F3  00F1               	movwf	___wmul@multiplier
  1291     05F4  30E8               	movlw	232
  1292     05F5  00F3               	movwf	___wmul@multiplicand
  1293     05F6  3003               	movlw	3
  1294     05F7  00F4               	movwf	___wmul@multiplicand+1
  1295     05F8  118A  255B  118A   	fcall	___wmul
  1296     05FB  0872               	movf	?___wmul+1,w
  1297     05FC  00FA               	movwf	___awdiv@dividend+1
  1298     05FD  0871               	movf	?___wmul,w
  1299     05FE  00F9               	movwf	___awdiv@dividend
  1300     05FF  118A  268C  118A   	fcall	___awdiv
  1301     0602  0878               	movf	?___awdiv+1,w
  1302     0603  1283               	bcf	3,5	;RP0=0, select bank0
  1303     0604  1303               	bcf	3,6	;RP1=0, select bank0
  1304     0605  00C5               	movwf	beep@total_cycles+1
  1305     0606  0877               	movf	?___awdiv,w
  1306     0607  00C4               	movwf	beep@total_cycles
  1307     0608                     l918:
  1308                           
  1309                           ;main.c: 84:     for (int i = 0; i < total_cycles; i++) {
  1310     0608  01C6               	clrf	beep@i
  1311     0609  01C7               	clrf	beep@i+1
  1312     060A  2E27               	goto	l926
  1313     060B                     l39:
  1314                           
  1315                           ;main.c: 85:         PORTBbits.RB1 = 1;
  1316     060B  1283               	bcf	3,5	;RP0=0, select bank0
  1317     060C  1303               	bcf	3,6	;RP1=0, select bank0
  1318     060D  1486               	bsf	6,1	;volatile
  1319     060E                     l920:
  1320                           
  1321                           ;main.c: 86:         delay_us((int)half_period_us);
  1322     060E  0849               	movf	beep@half_period_us+1,w
  1323     060F  00F2               	movwf	delay_us@time+1
  1324     0610  0848               	movf	beep@half_period_us,w
  1325     0611  00F1               	movwf	delay_us@time
  1326     0612  118A  2540  118A   	fcall	_delay_us
  1327     0615                     l922:
  1328                           
  1329                           ;main.c: 87:         PORTBbits.RB1 = 0;
  1330     0615  1283               	bcf	3,5	;RP0=0, select bank0
  1331     0616  1303               	bcf	3,6	;RP1=0, select bank0
  1332     0617  1086               	bcf	6,1	;volatile
  1333                           
  1334                           ;main.c: 88:         delay_us((int)half_period_us);
  1335     0618  0849               	movf	beep@half_period_us+1,w
  1336     0619  00F2               	movwf	delay_us@time+1
  1337     061A  0848               	movf	beep@half_period_us,w
  1338     061B  00F1               	movwf	delay_us@time
  1339     061C  118A  2540  118A   	fcall	_delay_us
  1340     061F                     l924:
  1341                           
  1342                           ;main.c: 89:     }
  1343     061F  3001               	movlw	1
  1344     0620  1283               	bcf	3,5	;RP0=0, select bank0
  1345     0621  1303               	bcf	3,6	;RP1=0, select bank0
  1346     0622  07C6               	addwf	beep@i,f
  1347     0623  1803               	skipnc
  1348     0624  0AC7               	incf	beep@i+1,f
  1349     0625  3000               	movlw	0
  1350     0626  07C7               	addwf	beep@i+1,f
  1351     0627                     l926:
  1352     0627  0847               	movf	beep@i+1,w
  1353     0628  3A80               	xorlw	128
  1354     0629  00FD               	movwf	??_beep
  1355     062A  0845               	movf	beep@total_cycles+1,w
  1356     062B  3A80               	xorlw	128
  1357     062C  027D               	subwf	??_beep,w
  1358     062D  1D03               	skipz
  1359     062E  2E31               	goto	u485
  1360     062F  0844               	movf	beep@total_cycles,w
  1361     0630  0246               	subwf	beep@i,w
  1362     0631                     u485:
  1363     0631  1C03               	skipc
  1364     0632  2E34               	goto	u481
  1365     0633  2E35               	goto	u480
  1366     0634                     u481:
  1367     0634  2E0B               	goto	l39
  1368     0635                     u480:
  1369     0635                     l41:
  1370     0635  0008               	return
  1371     0636                     __end_of_beep:
  1372                           
  1373                           	psect	text6
  1374     0540                     __ptext6:	
  1375 ;; *************** function _delay_us *****************
  1376 ;; Defined at:
  1377 ;;		line 71 in file "main.c"
  1378 ;; Parameters:    Size  Location     Type
  1379 ;;  time            2    0[COMMON] int 
  1380 ;; Auto vars:     Size  Location     Type
  1381 ;;  i               2    3[COMMON] int 
  1382 ;; Return value:  Size  Location     Type
  1383 ;;                  1    wreg      void 
  1384 ;; Registers used:
  1385 ;;		wreg, status,2
  1386 ;; Tracked objects:
  1387 ;;		On entry : 0/0
  1388 ;;		On exit  : 0/0
  1389 ;;		Unchanged: 0/0
  1390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1391 ;;      Params:         2       0       0       0
  1392 ;;      Locals:         2       0       0       0
  1393 ;;      Temps:          1       0       0       0
  1394 ;;      Totals:         5       0       0       0
  1395 ;;Total ram usage:        5 bytes
  1396 ;; Hardware stack levels used: 1
  1397 ;; This function calls:
  1398 ;;		Nothing
  1399 ;; This function is called by:
  1400 ;;		_beep
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404     0540                     _delay_us:	
  1405                           ;psect for function _delay_us
  1406                           
  1407     0540                     l852:	
  1408                           ;incstack = 0
  1409                           ; Regs used in _delay_us: [wreg+status,2]
  1410                           
  1411                           
  1412                           ;main.c: 71: void delay_us(int time);main.c: 72: {;main.c: 73:     for(int i =0; i< time
      +                          ; i++)
  1413     0540  01F4               	clrf	delay_us@i
  1414     0541  01F5               	clrf	delay_us@i+1
  1415     0542  2D4C               	goto	l32
  1416     0543                     l33:
  1417                           
  1418                           ;main.c: 74:     {;main.c: 75:         _delay((unsigned long)((1)*(20000000/4000000.0)))
      +                          ;
  1419     0543  2D44               	nop2	;2 cycle nop
  1420     0544  2D45               	nop2	;2 cycle nop
  1421     0545  0000               	nop
  1422     0546                     l854:
  1423                           
  1424                           ;main.c: 76:     }
  1425     0546  3001               	movlw	1
  1426     0547  07F4               	addwf	delay_us@i,f
  1427     0548  1803               	skipnc
  1428     0549  0AF5               	incf	delay_us@i+1,f
  1429     054A  3000               	movlw	0
  1430     054B  07F5               	addwf	delay_us@i+1,f
  1431     054C                     l32:
  1432     054C  0875               	movf	delay_us@i+1,w
  1433     054D  3A80               	xorlw	128
  1434     054E  00F3               	movwf	??_delay_us
  1435     054F  0872               	movf	delay_us@time+1,w
  1436     0550  3A80               	xorlw	128
  1437     0551  0273               	subwf	??_delay_us,w
  1438     0552  1D03               	skipz
  1439     0553  2D56               	goto	u335
  1440     0554  0871               	movf	delay_us@time,w
  1441     0555  0274               	subwf	delay_us@i,w
  1442     0556                     u335:
  1443     0556  1C03               	skipc
  1444     0557  2D59               	goto	u331
  1445     0558  2D5A               	goto	u330
  1446     0559                     u331:
  1447     0559  2D43               	goto	l33
  1448     055A                     u330:
  1449     055A                     l35:
  1450     055A  0008               	return
  1451     055B                     __end_of_delay_us:
  1452                           
  1453                           	psect	text7
  1454     055B                     __ptext7:	
  1455 ;; *************** function ___wmul *****************
  1456 ;; Defined at:
  1457 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\Umul16.c"
  1458 ;; Parameters:    Size  Location     Type
  1459 ;;  multiplier      2    0[COMMON] unsigned int 
  1460 ;;  multiplicand    2    2[COMMON] unsigned int 
  1461 ;; Auto vars:     Size  Location     Type
  1462 ;;  product         2    4[COMMON] unsigned int 
  1463 ;; Return value:  Size  Location     Type
  1464 ;;                  2    0[COMMON] unsigned int 
  1465 ;; Registers used:
  1466 ;;		wreg, status,2, status,0
  1467 ;; Tracked objects:
  1468 ;;		On entry : 0/0
  1469 ;;		On exit  : 0/0
  1470 ;;		Unchanged: 0/0
  1471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1472 ;;      Params:         4       0       0       0
  1473 ;;      Locals:         2       0       0       0
  1474 ;;      Temps:          0       0       0       0
  1475 ;;      Totals:         6       0       0       0
  1476 ;;Total ram usage:        6 bytes
  1477 ;; Hardware stack levels used: 1
  1478 ;; This function calls:
  1479 ;;		Nothing
  1480 ;; This function is called by:
  1481 ;;		_beep
  1482 ;; This function uses a non-reentrant model
  1483 ;;
  1484                           
  1485     055B                     ___wmul:	
  1486                           ;psect for function ___wmul
  1487                           
  1488     055B                     l856:	
  1489                           ;incstack = 0
  1490                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1491                           
  1492     055B  01F5               	clrf	___wmul@product
  1493     055C  01F6               	clrf	___wmul@product+1
  1494     055D                     l858:
  1495     055D  1C71               	btfss	___wmul@multiplier,0
  1496     055E  2D60               	goto	u341
  1497     055F  2D61               	goto	u340
  1498     0560                     u341:
  1499     0560  2D67               	goto	l172
  1500     0561                     u340:
  1501     0561                     l860:
  1502     0561  0873               	movf	___wmul@multiplicand,w
  1503     0562  07F5               	addwf	___wmul@product,f
  1504     0563  1803               	skipnc
  1505     0564  0AF6               	incf	___wmul@product+1,f
  1506     0565  0874               	movf	___wmul@multiplicand+1,w
  1507     0566  07F6               	addwf	___wmul@product+1,f
  1508     0567                     l172:
  1509     0567  3001               	movlw	1
  1510     0568                     u355:
  1511     0568  1003               	clrc
  1512     0569  0DF3               	rlf	___wmul@multiplicand,f
  1513     056A  0DF4               	rlf	___wmul@multiplicand+1,f
  1514     056B  3EFF               	addlw	-1
  1515     056C  1D03               	skipz
  1516     056D  2D68               	goto	u355
  1517     056E                     l862:
  1518     056E  3001               	movlw	1
  1519     056F                     u365:
  1520     056F  1003               	clrc
  1521     0570  0CF2               	rrf	___wmul@multiplier+1,f
  1522     0571  0CF1               	rrf	___wmul@multiplier,f
  1523     0572  3EFF               	addlw	-1
  1524     0573  1D03               	skipz
  1525     0574  2D6F               	goto	u365
  1526     0575                     l864:
  1527     0575  0871               	movf	___wmul@multiplier,w
  1528     0576  0472               	iorwf	___wmul@multiplier+1,w
  1529     0577  1D03               	btfss	3,2
  1530     0578  2D7A               	goto	u371
  1531     0579  2D7B               	goto	u370
  1532     057A                     u371:
  1533     057A  2D5D               	goto	l858
  1534     057B                     u370:
  1535     057B                     l866:
  1536     057B  0876               	movf	___wmul@product+1,w
  1537     057C  00F2               	movwf	?___wmul+1
  1538     057D  0875               	movf	___wmul@product,w
  1539     057E  00F1               	movwf	?___wmul
  1540     057F                     l174:
  1541     057F  0008               	return
  1542     0580                     __end_of___wmul:
  1543                           
  1544                           	psect	text8
  1545     068C                     __ptext8:	
  1546 ;; *************** function ___awdiv *****************
  1547 ;; Defined at:
  1548 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awdiv.c"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;  divisor         2    6[COMMON] int 
  1551 ;;  dividend        2    8[COMMON] int 
  1552 ;; Auto vars:     Size  Location     Type
  1553 ;;  quotient        2    2[BANK0 ] int 
  1554 ;;  sign            1    1[BANK0 ] unsigned char 
  1555 ;;  counter         1    0[BANK0 ] unsigned char 
  1556 ;; Return value:  Size  Location     Type
  1557 ;;                  2    6[COMMON] int 
  1558 ;; Registers used:
  1559 ;;		wreg, status,2, status,0
  1560 ;; Tracked objects:
  1561 ;;		On entry : 0/0
  1562 ;;		On exit  : 0/0
  1563 ;;		Unchanged: 0/0
  1564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1565 ;;      Params:         4       0       0       0
  1566 ;;      Locals:         0       4       0       0
  1567 ;;      Temps:          0       0       0       0
  1568 ;;      Totals:         4       4       0       0
  1569 ;;Total ram usage:        8 bytes
  1570 ;; Hardware stack levels used: 1
  1571 ;; This function calls:
  1572 ;;		Nothing
  1573 ;; This function is called by:
  1574 ;;		_beep
  1575 ;; This function uses a non-reentrant model
  1576 ;;
  1577                           
  1578     068C                     ___awdiv:	
  1579                           ;psect for function ___awdiv
  1580                           
  1581     068C                     l870:	
  1582                           ;incstack = 0
  1583                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1584                           
  1585     068C  1283               	bcf	3,5	;RP0=0, select bank0
  1586     068D  1303               	bcf	3,6	;RP1=0, select bank0
  1587     068E  01C1               	clrf	___awdiv@sign
  1588     068F                     l872:
  1589     068F  1FF8               	btfss	___awdiv@divisor+1,7
  1590     0690  2E92               	goto	u381
  1591     0691  2E93               	goto	u380
  1592     0692                     u381:
  1593     0692  2E9A               	goto	l878
  1594     0693                     u380:
  1595     0693                     l874:
  1596     0693  09F7               	comf	___awdiv@divisor,f
  1597     0694  09F8               	comf	___awdiv@divisor+1,f
  1598     0695  0AF7               	incf	___awdiv@divisor,f
  1599     0696  1903               	skipnz
  1600     0697  0AF8               	incf	___awdiv@divisor+1,f
  1601     0698                     l876:
  1602     0698  3001               	movlw	1
  1603     0699  00C1               	movwf	___awdiv@sign
  1604     069A                     l878:
  1605     069A  1FFA               	btfss	___awdiv@dividend+1,7
  1606     069B  2E9D               	goto	u391
  1607     069C  2E9E               	goto	u390
  1608     069D                     u391:
  1609     069D  2EA5               	goto	l884
  1610     069E                     u390:
  1611     069E                     l880:
  1612     069E  09F9               	comf	___awdiv@dividend,f
  1613     069F  09FA               	comf	___awdiv@dividend+1,f
  1614     06A0  0AF9               	incf	___awdiv@dividend,f
  1615     06A1  1903               	skipnz
  1616     06A2  0AFA               	incf	___awdiv@dividend+1,f
  1617     06A3                     l882:
  1618     06A3  3001               	movlw	1
  1619     06A4  06C1               	xorwf	___awdiv@sign,f
  1620     06A5                     l884:
  1621     06A5  01C2               	clrf	___awdiv@quotient
  1622     06A6  01C3               	clrf	___awdiv@quotient+1
  1623     06A7                     l886:
  1624     06A7  0877               	movf	___awdiv@divisor,w
  1625     06A8  0478               	iorwf	___awdiv@divisor+1,w
  1626     06A9  1903               	btfsc	3,2
  1627     06AA  2EAC               	goto	u401
  1628     06AB  2EAD               	goto	u400
  1629     06AC                     u401:
  1630     06AC  2EE2               	goto	l906
  1631     06AD                     u400:
  1632     06AD                     l888:
  1633     06AD  3001               	movlw	1
  1634     06AE  00C0               	movwf	___awdiv@counter
  1635     06AF  2EB9               	goto	l894
  1636     06B0                     l890:
  1637     06B0  3001               	movlw	1
  1638     06B1                     u415:
  1639     06B1  1003               	clrc
  1640     06B2  0DF7               	rlf	___awdiv@divisor,f
  1641     06B3  0DF8               	rlf	___awdiv@divisor+1,f
  1642     06B4  3EFF               	addlw	-1
  1643     06B5  1D03               	skipz
  1644     06B6  2EB1               	goto	u415
  1645     06B7                     l892:
  1646     06B7  3001               	movlw	1
  1647     06B8  07C0               	addwf	___awdiv@counter,f
  1648     06B9                     l894:
  1649     06B9  1FF8               	btfss	___awdiv@divisor+1,7
  1650     06BA  2EBC               	goto	u421
  1651     06BB  2EBD               	goto	u420
  1652     06BC                     u421:
  1653     06BC  2EB0               	goto	l890
  1654     06BD                     u420:
  1655     06BD                     l896:
  1656     06BD  3001               	movlw	1
  1657     06BE                     u435:
  1658     06BE  1003               	clrc
  1659     06BF  0DC2               	rlf	___awdiv@quotient,f
  1660     06C0  0DC3               	rlf	___awdiv@quotient+1,f
  1661     06C1  3EFF               	addlw	-1
  1662     06C2  1D03               	skipz
  1663     06C3  2EBE               	goto	u435
  1664     06C4  0878               	movf	___awdiv@divisor+1,w
  1665     06C5  027A               	subwf	___awdiv@dividend+1,w
  1666     06C6  1D03               	skipz
  1667     06C7  2ECA               	goto	u445
  1668     06C8  0877               	movf	___awdiv@divisor,w
  1669     06C9  0279               	subwf	___awdiv@dividend,w
  1670     06CA                     u445:
  1671     06CA  1C03               	skipc
  1672     06CB  2ECD               	goto	u441
  1673     06CC  2ECE               	goto	u440
  1674     06CD                     u441:
  1675     06CD  2ED5               	goto	l902
  1676     06CE                     u440:
  1677     06CE                     l898:
  1678     06CE  0877               	movf	___awdiv@divisor,w
  1679     06CF  02F9               	subwf	___awdiv@dividend,f
  1680     06D0  0878               	movf	___awdiv@divisor+1,w
  1681     06D1  1C03               	skipc
  1682     06D2  03FA               	decf	___awdiv@dividend+1,f
  1683     06D3  02FA               	subwf	___awdiv@dividend+1,f
  1684     06D4                     l900:
  1685     06D4  1442               	bsf	___awdiv@quotient,0
  1686     06D5                     l902:
  1687     06D5  3001               	movlw	1
  1688     06D6                     u455:
  1689     06D6  1003               	clrc
  1690     06D7  0CF8               	rrf	___awdiv@divisor+1,f
  1691     06D8  0CF7               	rrf	___awdiv@divisor,f
  1692     06D9  3EFF               	addlw	-1
  1693     06DA  1D03               	skipz
  1694     06DB  2ED6               	goto	u455
  1695     06DC                     l904:
  1696     06DC  3001               	movlw	1
  1697     06DD  02C0               	subwf	___awdiv@counter,f
  1698     06DE  1D03               	btfss	3,2
  1699     06DF  2EE1               	goto	u461
  1700     06E0  2EE2               	goto	u460
  1701     06E1                     u461:
  1702     06E1  2EBD               	goto	l896
  1703     06E2                     u460:
  1704     06E2                     l906:
  1705     06E2  0841               	movf	___awdiv@sign,w
  1706     06E3  1903               	btfsc	3,2
  1707     06E4  2EE6               	goto	u471
  1708     06E5  2EE7               	goto	u470
  1709     06E6                     u471:
  1710     06E6  2EEC               	goto	l910
  1711     06E7                     u470:
  1712     06E7                     l908:
  1713     06E7  09C2               	comf	___awdiv@quotient,f
  1714     06E8  09C3               	comf	___awdiv@quotient+1,f
  1715     06E9  0AC2               	incf	___awdiv@quotient,f
  1716     06EA  1903               	skipnz
  1717     06EB  0AC3               	incf	___awdiv@quotient+1,f
  1718     06EC                     l910:
  1719     06EC  0843               	movf	___awdiv@quotient+1,w
  1720     06ED  00F8               	movwf	?___awdiv+1
  1721     06EE  0842               	movf	___awdiv@quotient,w
  1722     06EF  00F7               	movwf	?___awdiv
  1723     06F0                     l325:
  1724     06F0  0008               	return
  1725     06F1                     __end_of___awdiv:
  1726                           
  1727                           	psect	text9
  1728     0528                     __ptext9:	
  1729 ;; *************** function _clock_SR *****************
  1730 ;; Defined at:
  1731 ;;		line 124 in file "main.c"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;		None
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;		None
  1736 ;; Return value:  Size  Location     Type
  1737 ;;                  1    wreg      void 
  1738 ;; Registers used:
  1739 ;;		wreg
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 0/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1745 ;;      Params:         0       0       0       0
  1746 ;;      Locals:         0       0       0       0
  1747 ;;      Temps:          1       0       0       0
  1748 ;;      Totals:         1       0       0       0
  1749 ;;Total ram usage:        1 bytes
  1750 ;; Hardware stack levels used: 1
  1751 ;; This function calls:
  1752 ;;		Nothing
  1753 ;; This function is called by:
  1754 ;;		_main
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758     0528                     _clock_SR:	
  1759                           ;psect for function _clock_SR
  1760                           
  1761     0528                     l968:	
  1762                           ;incstack = 0
  1763                           ; Regs used in _clock_SR: [wreg]
  1764                           
  1765                           
  1766                           ;main.c: 126:     PORTBbits.RB6 = 1;
  1767     0528  1283               	bcf	3,5	;RP0=0, select bank0
  1768     0529  1303               	bcf	3,6	;RP1=0, select bank0
  1769     052A  1706               	bsf	6,6	;volatile
  1770     052B                     l970:
  1771                           
  1772                           ;main.c: 127:     _delay((unsigned long)((10)*(20000000/4000000.0)));
  1773     052B  3010               	movlw	16
  1774     052C  00F1               	movwf	??_clock_SR
  1775     052D                     u667:
  1776     052D  0BF1               	decfsz	??_clock_SR,f
  1777     052E  2D2D               	goto	u667
  1778     052F  0000               	nop
  1779     0530                     l972:
  1780                           
  1781                           ;main.c: 128:     PORTBbits.RB6 = 0;
  1782     0530  1283               	bcf	3,5	;RP0=0, select bank0
  1783     0531  1303               	bcf	3,6	;RP1=0, select bank0
  1784     0532  1306               	bcf	6,6	;volatile
  1785     0533                     l61:
  1786     0533  0008               	return
  1787     0534                     __end_of_clock_SR:
  1788     0001                     ___latbits      equ	1
  1789     007E                     btemp           set	126	;btemp
  1790     007E                     wtemp0          set	126
  1791                           
  1792                           	psect	config
  1793                           
  1794                           ;Config register CONFIG @ 0x2007
  1795                           ;	Oscillator Selection bits
  1796                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  1797                           ;	Watchdog Timer Enable bit
  1798                           ;	WDTE = OFF, WDT disabled
  1799                           ;	Power-up Timer Enable bit
  1800                           ;	PWRTE = ON, PWRT enabled
  1801                           ;	RA5/MCLR/VPP Pin Function Select bit
  1802                           ;	MCLRE = ON, RA5/MCLR/VPP pin function is MCLR
  1803                           ;	Brown-out Detect Enable bit
  1804                           ;	BOREN = OFF, BOD disabled
  1805                           ;	Low-Voltage Programming Enable bit
  1806                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  1807                           ;	Data EE Memory Code Protection bit
  1808                           ;	CPD = OFF, Data memory code protection off
  1809                           ;	Flash Program Memory Code Protection bit
  1810                           ;	CP = OFF, Code protection off
  1811     2007                     	org	8199
  1812     2007  3F22               	dw	16162

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         48
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     13      13
    BANK0            80     31      65
    BANK1            80      0      16
    BANK2            69      0       0

Pointer List with Targets:

    decode_value@code	PTR int  size(1) Largest target is 16
		 -> USER_INPUT(BANK1[16]), 


Critical Paths under _main in COMMON

    _main->_beep
    _decode_value->_beep
    _beep->___awdiv
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    _main->_decode_value
    _decode_value->_beep
    _beep->___awdiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0    1687
                                             17 BANK0     14    14      0
                               _beep
                           _clock_SR
                       _decode_value
                    _initialize_pins
                        _push_output
 ---------------------------------------------------------------------------------
 (1) _push_output                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initialize_pins                                      3     3      0     156
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _decode_value                                         7     6      1     673
                                             10 BANK0      7     6      1
                               _beep
                              _flash
 ---------------------------------------------------------------------------------
 (2) _flash                                                3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _beep                                                 9     7      2     582
                                             10 COMMON     3     1      2
                                              4 BANK0      6     6      0
                            ___awdiv
                             ___wmul
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             5     3      2      48
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4      94
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     302
                                              6 COMMON     4     0      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _clock_SR                                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beep
     ___awdiv
       ___wmul (ARG)
     ___wmul
     _delay_us
   _clock_SR
   _decode_value
     _beep
     _flash
   _initialize_pins
   _push_output

Address spaces:
Name               Size   Autos  Total    Usage
BANK2               69      0       0      0.0%
BITBANK2            69      0       0      0.0%
BANK1               80      0      16     20.0%
BITBANK1            80      0       0      0.0%
BANK0               80     31      65     81.2%
BITBANK0            80      0       0      0.0%
COMMON              13     13      13    100.0%
BITCOMMON           13      0       0      0.0%
DATA                 0      0      94      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sun Dec 01 17:32:42 2024

             _USER_INPUT 00A0                       l32 054C                       l33 0543  
                     l41 0635                       l35 055A                       l44 05AB  
                     l61 0533                       l29 068B                       l39 060B  
                     l64 053F                       l80 0791                       l58 05E5  
                     l75 073E             ___awdiv@sign 0041                       fsr 0004  
    ___wmul@multiplicand 0073                      l172 0567                      l325 06F0  
                    l174 057F                      l900 06D4                      l910 06EC  
                    l902 06D5                      l904 06DC                      l920 060E  
                    l906 06E2                      l922 0615                      l914 05E6  
                    l930 058F                      l908 06E7                      l860 0561  
                    l852 0540                      l924 061F                      l916 05EC  
                    l932 059C                      l870 068C                      l862 056E  
                    l854 0546                      l926 0627                      l918 0608  
                    l950 067E                      l942 0649                      l934 0636  
                    l880 069E                      l872 068F                      l864 0575  
                    l856 055B                      l928 0580                      l960 05C5  
                    l952 05AC                      l944 064F                      l936 0647  
                    l970 052B                      l890 06B0                      l882 06A3  
                    l874 0693                      l866 057B                      l858 055D  
                    l962 05CD                      l946 0665                      l972 0530  
                    l892 06B7                      l884 06A5                      l876 0698  
                    l964 05D0                      l948 0678                      l980 06F1  
                    l894 06B9                      l886 06A7                      l878 069A  
                    l966 05D8                      l958 05B0                      l974 0534  
                    l990 06FA                      l982 06F4                      l968 0528  
                    l896 06BD                      l888 06AD                      l976 0537  
                    l992 0700                      l984 06F7                      l898 06CE  
                    l978 053C                      l994 0707                      l986 06F8  
                    l996 0716                      l988 06FA                      l998 0719  
                    u400 06AD                      u401 06AC                      u330 055A  
                    u331 0559                      u420 06BD                      u340 0561  
                    u421 06BC                      u341 0560                      u510 05A8  
                    u415 06B1                      u335 0556                      u511 05A4  
                    u440 06CE                      u504 058F                      u600 0791  
                    u441 06CD                      u601 0790                      u370 057B  
                    u530 064F                      u610 07B0                      u435 06BE  
                    u371 057A                      u355 0568                      u531 064E  
                    u611 07AF                      u460 06E2                      u380 0693  
                    u524 05AB                      u540 068B                      u620 07DE  
                    u461 06E1                      u445 06CA                      u381 0692  
                    u365 056F                      u541 068A                      u621 07DD  
                    u605 078D                      u470 06E7                      u390 069E  
                    u550 05C5                      u471 06E6                      u455 06D6  
                    u391 069D                      u551 05C4                      u615 07AC  
                    u480 0635                      u560 05E5                      u481 0634  
                    u561 05E4                      u545 0687                      u490 058C  
                    u570 0700                      u491 0588                      u571 06FF  
                    u580 073E                      u485 0631                      u565 05E1  
                    u581 073D                      u637 070F                      u590 075D  
                    u647 0539                      u591 075C                      u657 0595  
                    u585 073A                      u667 052D                      u595 0759  
   __end_of_decode_value 05E6                      fsr0 0004                      indf 0000  
            _push_output 0534                     l1000 071C                     l1010 0747  
                   l1002 071F                     l1012 0750                     l1004 0727  
                   l1030 0794                     l1022 076A                     l1006 0741  
                   l1040 07B1                     l1032 0797                     l1024 076F  
                   l1016 075E                     l1008 0744                     l1050 07D1  
                   l1042 07B4                     l1034 079A                     l1026 0772  
                   l1018 0761                     l1052 07D7                     l1036 07A3  
                   l1028 077A                     l1054 07DE                     l1046 07BD  
                   l1056 07E0                     l1048 07C0              _outputIndex 003C  
                   _beep 05E6                     _main 06F1                     _open 005F  
                   btemp 007E                     start 0001                    ?_beep 007B  
                  ?_main 0071          __end_of___awdiv 06F1                    _CMCON 001F  
        ___awdiv@divisor 0077          ___awdiv@counter 0040             _outputPinpad 002E  
      ??_initialize_pins 0071                    beep@i 0046                    _flash 0580  
                  main@i 0055                    status 0003                    wtemp0 007E  
        __initialization 07E8             __end_of_beep 0636             __end_of_main 07E8  
                 ??_beep 007D                   ??_main 0051                   ?_flash 0071  
       ___awdiv@dividend 0079         __end_of_delay_us 055B         __end_of_clock_SR 0534  
                 ___wmul 055B                ??___awdiv 007B         ___awdiv@quotient 0042  
__end_of__initialization 07FD             _decode_value 05AC           __pcstackCOMMON 0071  
           __pidataBANK0 051E            __end_of_flash 05AC             ?_push_output 0071  
                ??_flash 0071               __pbssBANK0 0020               __pbssBANK1 00A0  
          decode_value@i 004F               __pmaintext 06F1                  ?___wmul 0071  
        _initialize_pins 0636                ?_delay_us 0071                ?_clock_SR 0071  
       beep@total_cycles 0044                  ___awdiv 068C                  __ptext1 0534  
                __ptext2 0636                  __ptext3 05AC                  __ptext4 0580  
                __ptext5 05E6                  __ptext6 0540                  __ptext7 055B  
                __ptext8 068C                  __ptext9 0528               ??_delay_us 0073  
             ??_clock_SR 0071                  clrloop0 0521     end_of_initialization 07FD  
__end_of_initialize_pins 068C          beep@duration_ms 007B                _PORTAbits 0005  
              _PORTBbits 0006                _TRISAbits 0085                _TRISBbits 0086  
       initialize_pins@i 0072           __end_of___wmul 0580         decode_value@code 004A  
    start_initialization 07E8         ?_initialize_pins 0071                 ??___wmul 0075  
            __pdataBANK0 005F                ___latbits 0001            __pcstackBANK0 0040  
               ?___awdiv 0077       beep@half_period_us 0048           ___wmul@product 0075  
              delay_us@i 0074                clear_ram0 0520                main@i_186 0059  
              main@i_187 0057                main@i_188 005B        ___wmul@multiplier 0071  
              main@itter 005D             delay_us@time 0071            ?_decode_value 004A  
          ??_push_output 0071                 _delay_us 0540                 _clock_SR 0528  
         ??_decode_value 004B              _inputPinpad 0020      __end_of_push_output 0540  
            _sensorIndex 003E  
